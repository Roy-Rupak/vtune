<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  >
  <systemTypePatterns objectType="function" boolean:ignoreCase="false">
    <systemTypePattern systemType="executor">
      <regex>\b_?_kmp_invoke_microtask</regex>
    </systemTypePattern>
    <systemTypePattern systemType="overhead">
      <systemSubtypePattern systemSubtype="workForking">
        <regex>\b_?_kmpc_fork_call</regex>
        <regex>\b_?_kmp_launch_worker</regex>
        <regex>\b_?_kmp_invoke_task_func</regex>
        <regex>\b_?_kmp_launch_thread</regex>
        <regex>\b_?_kmp_create_worker</regex>
        <regex>\bvcomp_fork</regex>
        <regex>\bvcomp::PersistentThreadFunc</regex>
        <regex>\bgomp_thread_start</regex>
        <regex>\bgomp_team_start</regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="workScheduling">
        <regex>\b_?_kmpc?_.*dispatch_</regex>
        <regex>\b_?_kmpc?_.*static_f?ini</regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="reduction">
        <regex>\b_?_kmpc?_.*reduce</regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="atomics">
        <regex>\b_?_kmpc_atomic_*</regex>
        <regex>\bvcomp_atomic_*</regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="OMPTasking">
        <regex>\b_?_kmp_task_alloc</regex>
        <regex>\b_?_kmp_task_finish</regex>
      </systemSubtypePattern>
    </systemTypePattern>
    <systemTypePattern systemType="sync">
      <systemSubtypePattern systemSubtype="busyWaitOnBarrier">
        <regex>\b_?_kmp_.*barrier</regex>
        <regex>\b_?_kmp_wait_(32|64).*</regex>
        <regex>\b_?_kmp_wait_oncore.*</regex>
        <regex>\.*_kmp_wait_template.*</regex>
        <regex>\.*_kmp_wait_sleep.*</regex>
        <regex>\b_?_kmp_(static_)?yield</regex>
        <regex>\b_?_kmpc_barrier</regex>
        <regex>\b_?_kmp_end_split_barrier</regex>
        <regex>\b_?_kmp_x86_pause</regex>
        <regex>\b_?_kmp_flag_.*</regex>
        <regex>\bvcomp_barrier</regex>
        <regex>\b_?vcomp::PartialBarrier[N\d]+?(_Poll)?::Block</regex>
        <regex>\bgomp_team_barrier_wait</regex>
        <regex>\bgomp_barrier_wait</regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="busyWaitOnLock">
        <regex>\b_?_kmpc_critical</regex>
        <regex>\b_?_kmpc_set_(nested_)?lock$</regex>
        <regex>\b_?_kmp_acquire_.*</regex>
        <regex>\b_?_kmp_wait_yield.*</regex>
        <regex>\b_?_kmp_release.*_lock</regex>
        <regex>\b_?_kmp_eq_4</regex>
        <regex>\bvcomp_enter_critsect</regex>
        <regex>\b_vcomp::OmpSimpleLock::Set</regex>
        <regex>\bgomp_set_lock_\d+</regex>
        <regex>\bgomp_mutex_lock</regex>
        <regex>\bgomp_sem_wait</regex>
        <regex>\bGOMP_critical_name_start</regex>
        <regex>\bomp_set_(nested_)?lock$</regex>
      </systemSubtypePattern>
      <regex>\b_?_kmpc_ordered</regex>
      <regex>\bvcomp_ordered_begin</regex>
      <regex>\bgomp_work_share_end</regex>
      <regex>\bGOMP_taskwait</regex>
      <regex>\bGOMP_ordered_sync</regex>
      <regex>\b_?_kmp_hardware_timestamp</regex>
    </systemTypePattern>
    <systemTypePattern systemType="systemOverhead">
      <regex>\b_?_kmpc?_.*$</regex>
    </systemTypePattern>
  </systemTypePatterns>
  <systemTypePatterns objectType="module" boolean:ignoreCase="true">
    <systemTypePattern systemType="system">
      <regex>\blibiomp.*?\.dll$</regex>
      <regex>\blibiomp\d\.so$</regex>
      <regex>\blibgomp\.so.*</regex>
      <regex>\bvcomp\d+d\.dll$</regex>
      <regex>\bcyggomp\-\d+\.dll$</regex>
      <regex>\blibgomp\-\d+\.dll$</regex>
    </systemTypePattern>
  </systemTypePatterns>
  <systemTypePatterns objectType="function" boolean:ignoreCase="true">
    <systemTypePattern systemType="system">
      <regex>\bGOMP_</regex>
      <regex>\bgomp_</regex>
    </systemTypePattern>
  </systemTypePatterns>
  <renamePatterns boolean:ignoreCase="false">
    <renamePattern subst="[OpenMP fork]">
      <regex><![CDATA[ \b_?_kmpc_fork_call ]]></regex>
      <regex><![CDATA[ \bvcomp_fork ]]></regex>
      <regex><![CDATA[ \bgomp_team_start ]]></regex>
    </renamePattern>
    <renamePattern subst="[OpenMP worker]">
      <regex><![CDATA[ \b_?_kmp_launch_worker ]]></regex>
      <regex><![CDATA[ \bvcomp::PersistentThreadFunc ]]></regex>
      <regex><![CDATA[ \bgomp_thread_start ]]></regex>
    </renamePattern>
    <renamePattern subst="[OpenMP dispatcher]">
      <regex><![CDATA[ \b_?_kmp_invoke_task_func ]]></regex>
      <regex><![CDATA[ \b_?_kmpc?_dispatch_next.*$]]></regex>
      <regex><![CDATA[ \btest_then_inc_acq.*$ ]]></regex>
    </renamePattern>
  </renamePatterns>
</bag>
