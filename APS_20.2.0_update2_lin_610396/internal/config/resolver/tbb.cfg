<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace=""
  xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
  >
  <systemTypePatterns objectType="function" boolean:ignoreCase="false">
    <systemTypePattern systemType="sync">
      <systemSubtypePattern systemSubtype="busyWaitOnLock">
        <regex><![CDATA[ ^tbb::.*mutex(_v\d+)?:: ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::lock_task_pool\b ]]></regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="busyWaitOnBarrier">
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::steal_task\b ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::can_steal\b ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::receive_or_steal_task\b ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::prolonged_pause\b ]]></regex>
        <regex><![CDATA[ prolonged_pause\b ]]></regex>
      </systemSubtypePattern>
    </systemTypePattern>
    <systemTypePattern systemType="overhead">
      <systemSubtypePattern systemSubtype="workScheduling">
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::wait_for_all\b ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::local_wait_for_all\b ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::get_mailbox_task\b ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::mail_outbox::internal_pop\b ]]></regex>
        <regex><![CDATA[ ^tbb::internal::allocate_.*::allocate\b ]]></regex>
        <xsl:if test="exsl:ctx('targetOS') = 'Linux'">
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*_partition_type::execute\b ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_for<struct tbb::(?:interface\d+::)?internal::quick_sort_range\s*,\s*struct tbb::(?:interface\d+::)?internal::quick_sort_body\s*,.*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_for<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::do_iteration_task<([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::do_iteration_task_iter<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::do_task_iter<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_reduce<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::finish_reduce<([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_reduce_with_affinity<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::finish_reduce_with_affinity<([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::interface\d+::internal::start_deterministic_reduce<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::interface\d+::internal::finish_deterministic_reduce<([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::flow::interface\d+::.*::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::final_sum<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::sum_node<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::finish_scan<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_scan<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::while_iteration_task<(.+)>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::while_group_task<(.+)>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::while_task<[^,]+,\s*([^,]+).*>::execute ]]></regex>
          <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::stage_task::execute ]]></regex>
        </xsl:if>
        <regex><![CDATA[ ^(void )?tbb::(?:interface\d+::)?internal::GenericScheduler::.*$ ]]></regex>
        <regex><![CDATA[ ^(void )?tbb::(?:interface\d+::)?internal::CustomScheduler<.*$ ]]></regex>
        <regex><![CDATA[ ^(void )?tbb::(?:interface\d+::)?internal::generic_scheduler::.*$ ]]></regex>
        <regex><![CDATA[ ^(void )?tbb::(?:interface\d+::)?internal::custom_scheduler<.*$ ]]></regex>
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::task_base::spawn\b ]]></regex>
      </systemSubtypePattern>
      <systemSubtypePattern systemSubtype="workForking">
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::private_worker::thread_routine\b ]]></regex>
      </systemSubtypePattern>
    </systemTypePattern>
    <systemTypePattern systemType="system">
      <regex><![CDATA[ ^tbb::interface\d+::internal::partition_type_base\b ]]></regex>
    </systemTypePattern>
    <systemTypePattern systemType="internal">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::task_stream::pop\b ]]></regex>
    </systemTypePattern>
    <systemTypePattern systemType="system">
      <regex><![CDATA[ ^tbb:: ]]></regex>
      <regex><![CDATA[ ^_?_TBB_ ]]></regex>
    </systemTypePattern>
  </systemTypePatterns>
  <systemTypePatterns objectType="module" boolean:ignoreCase="true">
    <systemTypePattern systemType="system">
      <regex><![CDATA[ \btbb(malloc)?(_debug)?\.dll$ ]]></regex>
      <regex><![CDATA[ \b[a-z]+_tbb(malloc)?(_debug)?\.dll$ ]]></regex>
    </systemTypePattern>
  </systemTypePatterns>
  <renamePatterns boolean:ignoreCase="false">
    <renamePattern subst="[TBB parallel_sort]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_for<struct tbb::(?:interface\d+::)?internal::quick_sort_range\s*,\s*struct tbb::(?:interface\d+::)?internal::quick_sort_body\s*,.*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB parallel_for on $1]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_for<[^,]+,\s*([^,]+).*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB parallel_do on $1]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::do_iteration_task<([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::do_iteration_task_iter<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::do_task_iter<[^,]+,\s*([^,]+).*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB parallel_reduce on $1]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_reduce<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::finish_reduce<([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_reduce_with_affinity<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::finish_reduce_with_affinity<([^,]+).*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB parallel_deterministic_reduce on $1]">
      <regex><![CDATA[ ^tbb::interface\d+::internal::start_deterministic_reduce<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::interface\d+::internal::finish_deterministic_reduce<([^,]+).*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB Flow Graph]">
      <regex><![CDATA[ ^tbb::flow::interface\d+::.*::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB parallel_scan on $1]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::final_sum<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::sum_node<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::finish_scan<[^,]+,\s*([^,]+).*>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::start_scan<[^,]+,\s*([^,]+).*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB parallel_while on $1]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::while_iteration_task<(.+)>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::while_group_task<(.+)>::execute ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::while_task<[^,]+,\s*([^,]+).*>::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB pipeline]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::stage_task::execute ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB Dispatch Loop]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::wait_for_all ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::local_wait_for_all ]]></regex>
    </renamePattern>
    <renamePattern subst="[TBB Scheduler Internals]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::GenericScheduler::.*$ ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::CustomScheduler<.*$ ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::generic_scheduler::.*$ ]]></regex>
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::custom_scheduler<.*$ ]]></regex>
      <regex><![CDATA[ ^tbb::internal::allocate_.*::allocate\b ]]></regex>
      <xsl:if test="exsl:ctx('targetOS') = 'Linux'">
        <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*_partition_type::execute\b ]]></regex>
      </xsl:if>
    </renamePattern>
    <renamePattern subst="[TBB worker]">
      <regex><![CDATA[ ^tbb::(?:interface\d+::)?internal::.*::private_worker::thread_routine\b ]]></regex>
    </renamePattern>
  </renamePatterns>
</bag>
