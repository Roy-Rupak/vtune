<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double">
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace=""
    syntax="norules">
    <xsl:if test="(
        exsl:ctx('connectionType', '') = 'mic-offload'
        or exsl:ctx('connectionType', '') = 'mic'
        )">
      <xsl:value-of select="exsl:error('%VTSSIsNotPossibleForOffloadMIC')"/>
    </xsl:if>
    <xsl:if test="(
        exsl:ctx('connectionType', '') = 'sniper'
        )">
        <xsl:value-of select="exsl:error('%VTSSIsNotPossibleForSniper')"/>
    </xsl:if>
  </prerequisites>
  <knobs xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <xsl:variable name="knobsParams">
      <params
        enablePython="{exsl:ctx('isPytraceAvailable', 0)}"/>
    </xsl:variable>
    <xsl:variable name="knobsParamsName">
      <xsl:text>config://collector/include/knobs.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($knobsParams)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
    <xsl:variable name="traceEvents" select="document('config://collector/include/trace_events.xsl?runtool=runss')"/>
    <xsl:variable name="analysisCommonKnobs" select="document('config://analysis_type/include/knobs.xsl')"/>
    <intKnob id="ringBuffer" displayName="%RingBuffer" cliName="ring-buffer">
      <description>%RingBufferDescription</description>
      <int:min>0</int:min>
      <int:defaultValue>0</int:defaultValue>
      <experimental>platform-profiling</experimental>
    </intKnob>
    <enumKnob id="collectSamplesMode" displayName="%CollectSamplesMode" cliName="cpu-samples-mode">
      <description>%CollectSamplesModeDescription</description>
      <values>
        <value displayName="%Disabled">off</value>
        <value displayName="%WithStacks">stack</value>
        <value displayName="%WithoutStacks">nostack</value>
        <defaultValue>off</defaultValue>
      </values>
    </enumKnob>
    <booleanKnob id="errorsAsWarnings" boolean:visible="false">
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <xsl:copy-of select="$analysisCommonKnobs//knobs/intKnob[@id='samplingInterval']"/>
    <booleanKnob id="accurateCPUTimeDetection" displayName="%AccurateCPUTimeDetection" cliName="accurate-cpu-time-detection" boolean:visible="false">
      <boolean:defaultValue>false</boolean:defaultValue>
      <description>%AccurateCPUTimeDetectionDescription</description>
    </booleanKnob>
    <enumKnob id="collectWaitsMode" displayName="%CollectWaitsMode" cliName="waits-mode">
      <description>%CollectWaitsModeDescription</description>
      <values>
        <value displayName="%Disabled">off</value>
        <value displayName="%WithStacks">stack</value>
        <value displayName="%WithoutStacks">nostack</value>
        <defaultValue>off</defaultValue>
      </values>
    </enumKnob>
    <enumKnob id="collectSignalsMode" displayName="%CollectSignalsMode" cliName="signals-mode">
      <description>%CollectSignalsModeDescription</description>
      <values>
        <value displayName="%Disabled">off</value>
        <value displayName="%SyncObjectsOnly">objects</value>
        <value displayName="%WithStacks">stack</value>
        <value displayName="%WithoutStacks">nostack</value>
        <defaultValue>off</defaultValue>
      </values>
    </enumKnob>
    <enumKnob id="collectIoMode" displayName="%CollectIoMode" cliName="io-mode">
      <description>%CollectIoModeDescription</description>
      <values>
        <value displayName="%Disabled">off</value>
        <value displayName="%WithStacks">stack</value>
        <value displayName="%WithoutStacks">nostack</value>
        <defaultValue>off</defaultValue>
      </values>
    </enumKnob>
    <booleanKnob id="collectUserTasksEventsCountersMode" displayName="%CollectUserTasksEventsCountersMode" cliName="enable-user-tasks">
      <description>%CollectUserTasksEventsCountersModeDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <booleanKnob id="collectUserSyncMode" displayName="%CollectUserSyncMode" cliName="enable-user-sync">
      <description>%CollectUserSyncModeDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <enumKnob id="stackwalk" displayName="%Stackwalk" cliName="stackwalk-mode">
      <description>%StackwalkDescription</description>
      <values>
        <value displayName="%StackUnwindOnline">online</value>
        <value displayName="%StackUnwindOffline">offline</value>
        <defaultValue>offline</defaultValue>
      </values>
    </enumKnob>
    <booleanKnob id="stackStitching" displayName="%StackStitching" cliName="stack-stitching">
      <description>%StackStitchingDescription</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>
    <xsl:copy-of select="$traceEvents//common/knobs/*"/>
    <booleanKnob id="kernelStackWarningCheck" boolean:visible="false">
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <booleanKnob id="basicBlockAnalysis" displayName="%BasicBlockAnalysis" boolean:visible="false">
      <description>%BasicBlockAnalysisDescription</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>
    <stringKnob id="isPowerVRDataAvailable" boolean:visible="false">
      <defaultValue>no</defaultValue>
    </stringKnob>
    <booleanKnob id="noSignalAltstack" displayName="%NoSignalAltstack" cliName="no-altstack" boolean:visible="false">
      <xsl:if test="exsl:ctx('targetOS') = 'Linux'">
        <xsl:attribute name="boolean:visible">true</xsl:attribute>
      </xsl:if>
      <description>%NoSignalAltstackDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <xsl:copy-of select="$commonKnobs//knobs/*"/>
  </knobs>
  <analysis xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    str:keep_str_namespace=""
    exsl:keep_exsl_namespace=""
    syntax="norules">
    <collector id="runss" displayName="%RunssDisplayName">
      <binaryName>runss</binaryName>
      <pythonRemoteBinaryName>runss.py</pythonRemoteBinaryName>
      <boolean:requestContextValues>true</boolean:requestContextValues>
      <property name="helpId">intel.phe.configs.new_stack-sampling_collector_analysis_f1104</property>
      <xsl:if test="exsl:ctx('stackStitching', 0)">
        <collectorOption option="stack-stitching"/>
      </xsl:if>
      <xsl:if test="not(exsl:ctx('stackStitching', 0))">
        <collectorOption option="no-stack-stitching"/>
      </xsl:if>
      <xsl:variable name="traceEvents" select="document('config://collector/include/trace_events.xsl?runtool=runss')"/>
      <xsl:copy-of select="$traceEvents//common/collector/*"/>
      <xsl:if test="exsl:ctx('traceMpi', 0)">
        <collectorOption option="itt-config">preload</collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('gpuUsage', 0) and exsl:ctx('targetOS')='Windows'">
        <xsl:variable name="gpu_usage" select="document('config://analysis_type/include/gpu_usage.xsl?errorLevel=error')"/>
        <xsl:variable name="gpuUsageErrorMessage" select="$gpu_usage//root/variables/gpuUsageErrorMessage"/>
        <xsl:variable name="gpuUsageAvailable" select="$gpu_usage//root/variables/gpuUsageAvailable"/>
        <xsl:if test="not($gpuUsageAvailable = 'true')">
          <xsl:choose>
            <xsl:when test="not(exsl:ctx('errorsAsWarnings', 0))">
              <xsl:value-of select="exsl:error(string($gpuUsageErrorMessage))"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="exsl:warning(string($gpuUsageErrorMessage))"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:if test="$gpuUsageAvailable">
          <collectorOption option="etw-config">dma,frames</collectorOption>
        </xsl:if>
      </xsl:if>
      <xsl:variable name="collectorCommon">
        <xsl:text>config://collector/include/common.xsl?runtool=runss</xsl:text>
      </xsl:variable>
      <xsl:copy-of select="document($collectorCommon)//common/collector/*"/>
      <xsl:if test="contains(exsl:ctx('mrteType', ''), 'python')">
        <xsl:if test="not(exsl:ctx('isTPSSAvailable', 0)) or not(exsl:ctx('isPytraceAvailable', 0))">
          <xsl:value-of select="exsl:error('%PythonHotspotsNotSupported')"/>
        </xsl:if>
        <xsl:if test="exsl:ctx('targetOS', 'none') = 'Linux' and exsl:ctx('stackwalk', '') = 'online'">
          <xsl:value-of select="exsl:error('%PythonHotspotsOnlineStackwalkNotSupported')"/>
        </xsl:if>
      </xsl:if>
      <xsl:if test="exsl:ctx('targetType', '') = 'system'">
        <xsl:choose>
          <xsl:when test="exsl:ctx('collectSWHotspots', 0)">
            <xsl:value-of select="exsl:error('%RunssHotspotsSwModeNotSupported')"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="exsl:ctx('collectSamplesMode', '')!='off' or exsl:ctx('collectSignalsMode', '')!='off' or exsl:ctx('collectWaitsMode', '')!='off' or exsl:ctx('collectIoMode', '')!='off' or exsl:ctx('collectUserTasksEventsCountersMode', 0) or exsl:ctx('analyzeMemoryConsumption', 0)">
              <xsl:value-of select="exsl:error('%RunssUnsupportedTargetType')"/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="exsl:ctx('targetType', '') = 'launch' or exsl:ctx('targetType', '') = 'attach'">
        <xsl:choose>
          <xsl:when test="exsl:ctx('targetOS')!='Android'">
            <xsl:if test="not(exsl:ctx('followChild', 0))">
              <collectorOption option="no-follow-child"/>
            </xsl:if>
            <xsl:if test="exsl:ctx('followChildStrategy', '')">
              <collectorOption option="strategy"><xsl:copy-of select="exsl:ctx('followChildStrategy', '')"/></collectorOption>
            </xsl:if>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="exsl:ctx('targetType', '') = 'launch' or exsl:ctx('targetType', '') = 'attach' or exsl:ctx('targetType', '') = 'android-run'">
        <collectorOption option="itt-config">frame</collectorOption>
        <xsl:if test="exsl:ctx('collectUserTasksEventsCountersMode', 0)">
          <collectorOption option="itt-config">task,event,counter</collectorOption>
        </xsl:if>
      </xsl:if>
      <xsl:if test="exsl:ctx('stackwalk', '') = 'online' or exsl:ctx('stackwalk', '') = 'offline'">
        <xsl:choose>
          <xsl:when test="exsl:ctx('targetOS')!='Android'">
            <collectorOption option="stackwalk"><xsl:copy-of select="exsl:ctx('stackwalk', '')"/></collectorOption>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="exsl:ctx('targetOS') = 'Windows' and exsl:ctx('accurateCPUTimeDetection', 0)">
        <xsl:choose>
          <xsl:when test="exsl:ctx('ETW', '') = 'OK'">
            <collectorOption option="type">cswitch</collectorOption>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="exsl:ctx('ETW', '') = 'ACCESS_DENIED'">
                <xsl:value-of select="exsl:warning('%EtwAccessDenied')"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="exsl:warning('%EtwUnknownError')"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="exsl:ctx('customCollector', '')">
        <collectorOption option="custom-collector"><xsl:copy-of select="exsl:ctx('customCollector', '')"/></collectorOption>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="contains(exsl:ctx('mrteType', ''), 'python') and exsl:ctx('mrteMode', '') != 'native'">
          <collectorOption option="mrte-mode"><xsl:copy-of select="exsl:ctx('mrteMode', '')"/></collectorOption>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('targetOS') = 'Windows' or exsl:ctx('targetOS') = 'Android'">
              <collectorOption option="mrte-mode"><xsl:copy-of select="exsl:ctx('mrteMode', '')"/></collectorOption>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="exsl:ctx('mrteMode', '') = 'mixed' or exsl:ctx('mrteMode', '') = 'managed'">
                  <xsl:value-of select="exsl:warning('%TpssSupportsMrteNativeOnlyOnLinux')"/>
                </xsl:when>
                <xsl:otherwise>
                  <collectorOption option="mrte-mode"><xsl:copy-of select="exsl:ctx('mrteMode', '')"/></collectorOption>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:if test="exsl:ctx('noSignalAltstack', 0) and exsl:ctx('targetOS') = 'Linux'">
        <collectorOption option="no-altstack"></collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('collectSamplesMode', '') != 'off'">
        <xsl:choose>
          <xsl:when test="exsl:ctx('targetOS')='Android'">
            <collectorOption option="ptrace">cpu</collectorOption>
            <xsl:choose>
              <xsl:when test="exsl:ctx('collectSamplesMode', '') = 'stack'">
                <collectorOption option="stack"></collectorOption>
              </xsl:when>
              <xsl:otherwise>
                <collectorOption option="no-stack"></collectorOption>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="exsl:ctx('mrteMode', '') != 'managed' or exsl:ctx('mrteType', '') != 'python'">
              <collectorOption option="type">cpu:counters:nostack</collectorOption>
              <collectorOption option="type"><xsl:text>cpu:</xsl:text><xsl:copy-of select="exsl:ctx('collectSamplesMode', '')"/></collectorOption>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
        <collectorOption option="interval"><xsl:copy-of select="exsl:ctx('samplingInterval', 10)"/></collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('collectSignalsMode', '') = 'stack' or exsl:ctx('collectSignalsMode', '') = 'nostack'">
        <collectorOption option="type"><xsl:text>threading:</xsl:text><xsl:copy-of select="exsl:ctx('collectSignalsMode', '')"/></collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('collectWaitsMode', '') != 'off'">
        <collectorOption option="type"><xsl:text>waiting:</xsl:text><xsl:copy-of select="exsl:ctx('collectWaitsMode', '')"/></collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('collectSignalsMode', '') = 'stack' or exsl:ctx('collectSignalsMode', '') = 'nostack' or exsl:ctx('collectWaitsMode', '') = 'stack' or exsl:ctx('collectWaitsMode', '') = 'nostack'">
        <xsl:if test="exsl:ctx('collectUserSyncMode', 0)">
          <collectorOption option="type">user_sync</collectorOption>
        </xsl:if>
      </xsl:if>
      <xsl:if test="exsl:ctx('collectSignalsMode', '') != 'stack' and exsl:ctx('collectSignalsMode', '') != 'nostack' and exsl:ctx('collectWaitsMode', '') != 'stack' and exsl:ctx('collectWaitsMode', '') != 'nostack'">
        <xsl:if test="exsl:ctx('collectUserSyncMode', 0)">
          <xsl:value-of select="exsl:error('%CollectUserSyncModeError')"/>
        </xsl:if>
      </xsl:if>
      <xsl:if test="exsl:ctx('collectIoMode', '') != 'off'">
        <collectorOption option="type"><xsl:text>io:</xsl:text><xsl:copy-of select="exsl:ctx('collectIoMode', '')"/></collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('pmuEventConfig', '')">
        <xsl:variable name="isSEPFlow" select="exsl:ctx('isSEPDriverAvailable', 0) and (not(exsl:ctx('usePerf', 0)) or exsl:ctx('targetOS', '') = 'Windows' or exsl:ctx('targetOS', '') = 'MacOSX' or exsl:ctx('targetOS', '') = 'FreeBSD')"/>
        <xsl:variable name="isPerfFlow" select="(exsl:ctx('targetOS', '') = 'Linux' or exsl:ctx('targetOS', '') = 'Android') and exsl:ctx('LinuxPerfCredentials', 'NotAvailable')!='NotAvailable'
                   and contains(exsl:ctx('LinuxPerfCapabilities', ''), 'format')"/>
        <xsl:variable name="isPMUAvailable" select="exsl:ctx('PerfmonVersion', '4') > '1' and ($isSEPFlow or $isPerfFlow)"/>
        <xsl:variable name="isPermissionInsufficient" select="exsl:ctx('targetOS')='Windows' and not(exsl:ctx('AdministratorPrivileges', 'false'))"/>
        <xsl:choose>
          <xsl:when test="not($isPMUAvailable) or $isPermissionInsufficient">
            <xsl:if test="not($isPMUAvailable)">
              <xsl:value-of select="exsl:warning('%PMUNotAvailableWarningTpss')"/>
            </xsl:if>
            <xsl:if test="$isPermissionInsufficient">
              <xsl:value-of select="exsl:warning('%PMUNotAvailablePermissionWarningTpss')"/>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="$isSEPFlow">
                <collectorOption option="event-config"><xsl:copy-of select="exsl:ctx('pmuEventConfig', '')"/></collectorOption>
                <xsl:if test="exsl:ctx('useCountingMode', 0) or exsl:ctx('useAggregatedCounting', 0)">
                  <collectorOption option="collector">emon</collectorOption>
                </xsl:if>
              </xsl:when>
              <xsl:otherwise>
                <collectorOption option="event-config"><xsl:copy-of select="exsl:ctx('pmuEventConfig', '')"/></collectorOption>
                <collectorOption option="collector">perf</collectorOption>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="exsl:ctx('useCountingMode', 0)">
                <collectorOption option="count"/>
              </xsl:when>
              <xsl:when test="exsl:ctx('useAggregatedCounting', 0)">
                <collectorOption option="aggregated-counting"/>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </collector>
  </analysis>
  <finalization xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <xsl:variable name="finalizationCommon">
      <xsl:text>config://collector/include/common.xsl?runtool=runss</xsl:text>
    </xsl:variable>
    <xsl:copy-of select="document($finalizationCommon)//common/finalization/*"/>
  </finalization>
</bag>
