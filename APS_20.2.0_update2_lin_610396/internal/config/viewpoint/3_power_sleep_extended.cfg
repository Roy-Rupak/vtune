<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright © 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%ExtendedSleepStatesViewpointName'
    shortName='%ExtendedSleepStatesViewpointShortName'
    description='%ExtendedSleepStatesViewpointDescription'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>22</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <queryRef>/VmSwitchObject</queryRef>
      <queryRef>/ModulePStateTime</queryRef>
      <queryRef>/CpuLoad</queryRef>
      <queryRef>/VCpuLoad</queryRef>
      <queryRef>/SStateTime</queryRef>
      <queryRef>/KernelWakelockTime</queryRef>
      <queryRef>/UserWakelockTime</queryRef>
      <queryRef>/DState</queryRef>
      <queryRef>/DeviceTemperature</queryRef>
      <queryRef>/BandwidthBytes</queryRef>
      <queryRef>/DevicePStateFreq</queryRef>
      <queryRef>/GfxCStateTime</queryRef>
      <queryRef>/DramEventTime</queryRef>
      <queryRef>/NCDStateTime</queryRef>
      <queryRef>/TimerResolutionTime</queryRef>
      <queryRef>/PowerMilliWatt</queryRef>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="bottomUpCPPane" placeId="resultsArea"/>
    <pane id="bottomUpCPane" placeId="resultsArea"/>
    <pane id="bottomUpSStatePane" placeId="resultsArea"/>
    <pane id="bottomUpDStatePane" placeId="resultsArea"/>
    <pane id="bottomUpNCDStatePane" placeId="resultsArea"/>
    <pane id="bottomUpWLPane" placeId="resultsArea"/>
    <pane id="bottomUpThermalPane" placeId="resultsArea"/>
    <pane id="bottomUpBwPane" placeId="resultsArea"/>
    <pane id="bottomUpPwrPane" placeId="resultsArea"/>
    <pane id="bottomUpGfxPane" placeId="resultsArea"/>
    <pane id="bottomUpDramSRRPane" placeId="resultsArea"/>
    <pane id="bottomUpTimerResolutionPane" placeId="resultsArea"/>
    <pane id="correlateTimelinePane" placeId="resultsArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="timelineCPPane" placeId="bottomArea"/>
    <pane id="timelineCPane" placeId="bottomArea"/>
    <pane id="timelineSStatePane" placeId="bottomArea"/>
    <pane id="timelineDStatePane" placeId="bottomArea"/>
    <pane id="timelineNCDStatePane" placeId="bottomArea"/>
    <pane id="timelineWLPane" placeId="bottomArea"/>
    <pane id="timelineThermalPane" placeId="bottomArea"/>
    <pane id="timelineBwPane" placeId="bottomArea"/>
    <pane id="timelinePwrPane" placeId="bottomArea"/>
    <pane id="timelineGfxPane" placeId="bottomArea"/>
    <pane id="timelineDramSRRPane" placeId="bottomArea"/>
    <pane id="timelineTimerResolutionPane" placeId="bottomArea"/>
    <pane id="quickFilterWLPane" placeId="filterArea"/>
    <pane id="quickFilterDStatePane" placeId="filterArea"/>
    <pane id="quickFilterNCDStatePane" placeId="filterArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="quickFilterDevicePane" placeId="filterArea"/>
    <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
    <displayLayout>
      <tab id="SocwatchSummaryTab">
        <masterPane id="summaryPane"/>
      </tab>
      <tab id="SocwatchCPStatesTab">
        <requiredData groupOperation="or">
          <queryRef>/CStateTime</queryRef>
          <queryRef>/PStateTime</queryRef>
          <queryRef>/ModulePStateTime</queryRef>
          <queryRef>/VmSwitchObject</queryRef>
        </requiredData>
        <masterPane id="bottomUpCPPane"/>
        <paneToShow id="timelineCPPane"/>
        <paneToShow id="quickFilterPane"/>
      </tab>
      <tab id="SocwatchCoreWakeUpsTab">
        <requiredData>
          <queryRef>/CStateTime</queryRef>
        </requiredData>
        <masterPane id="bottomUpCPane"/>
        <paneToShow id="timelineCPane"/>
        <xsl:if test="$StacksCollected">
          <paneToShow id="stackPane"/>
        </xsl:if>
        <paneToShow id="quickFilterPane"/>
      </tab>
      <tab id="SocwatchSStatesTab">
        <requiredData>
          <queryRef>/SStateTime</queryRef>
        </requiredData>
        <masterPane id="bottomUpSStatePane"/>
        <paneToShow id="timelineSStatePane"/>
      </tab>
      <tab id="SocwatchNCDStatesTab">
        <requiredData>
          <queryRef>/NCDState</queryRef>
        </requiredData>
        <masterPane id="bottomUpNCDStatePane"/>
        <paneToShow id="timelineNCDStatePane"/>
        <paneToShow id="quickFilterNCDStatePane"/>
      </tab>
      <tab id="SocwatchDStatesTab">
        <requiredData>
          <queryRef>/DState</queryRef>
        </requiredData>
        <masterPane id="bottomUpDStatePane"/>
        <paneToShow id="timelineDStatePane"/>
        <paneToShow id="quickFilterDStatePane"/>
      </tab>
      <tab id="SocwatchWLTab">
        <requiredData groupOperation="or">
          <queryRef>/KernelWakelockTime</queryRef>
          <queryRef>/UserWakelockTime</queryRef>
        </requiredData>
        <masterPane id="bottomUpWLPane"/>
        <paneToShow id="timelineWLPane"/>
        <paneToShow id="quickFilterWLPane"/>
      </tab>
      <tab id="SocwatchTempTab">
        <requiredData>
          <queryRef>/DeviceTemperature</queryRef>
        </requiredData>
        <masterPane id="bottomUpThermalPane"/>
        <paneToShow id="timelineThermalPane"/>
        <paneToShow id="quickFilterDevicePane"/>
      </tab>
      <tab id="SocwatchBwTab">
        <requiredData groupOperation="or">
          <queryRef>/ComponentBandwidthBytes</queryRef>
          <queryRef>/BandwidthBytes</queryRef>
        </requiredData>
        <masterPane id="bottomUpBwPane"/>
        <paneToShow id="timelineBwPane"/>
        <paneToShow id="quickFilterDevicePane"/>
      </tab>
      <tab id="SocwatchPwrTab">
        <requiredData>
          <queryRef>/PowerMilliWatt</queryRef>
        </requiredData>
        <masterPane id="bottomUpPwrPane"/>
        <paneToShow id="timelinePwrPane"/>
        <paneToShow id="quickFilterDevicePane"/>
      </tab>
      <tab id="SocwatchGfxTab">
        <requiredData groupOperation="or">
          <queryRef>/DevicePStateFreq</queryRef>
          <queryRef>/GfxCStateTime</queryRef>
        </requiredData>
        <masterPane id="bottomUpGfxPane"/>
        <paneToShow id="timelineGfxPane"/>
        <paneToShow id="quickFilterDevicePane"/>
      </tab>
      <tab id="SocwatchDramSRRTab">
        <requiredData>
          <queryRef>/DramEventTime</queryRef>
        </requiredData>
        <masterPane id="bottomUpDramSRRPane"/>
        <paneToShow id="timelineDramSRRPane"/>
      </tab>
      <tab id="SocwatchTMRTab">
        <requiredData>
          <queryRef>/TimerResolutionInfo</queryRef>
        </requiredData>
        <masterPane id="bottomUpTimerResolutionPane"/>
        <paneToShow id="timelineTimerResolutionPane"/>
      </tab>
      <xsl:if test="not(exsl:is_compare_mode())">
        <tab id="SocwatchcorrelatetimelineTab">
          <requiredData groupOperation="or">
            <queryRef>/CStateTime</queryRef>
            <queryRef>/PStateTime</queryRef>
            <queryRef>/ModulePStateTime</queryRef>
            <queryRef>/VmSwitchObject</queryRef>
            <queryRef>/SStateTime</queryRef>
            <queryRef>/NCDState</queryRef>
            <queryRef>/DState</queryRef>
            <queryRef>/KernelWakelockTime</queryRef>
            <queryRef>/UserWakelockTime</queryRef>
            <queryRef>/DeviceTemperature</queryRef>
            <queryRef>/BandwidthBytes</queryRef>
            <queryRef>/PowerMilliWatt</queryRef>
            <queryRef>/DevicePStateFreq</queryRef>
            <queryRef>/GfxCStateTime</queryRef>
            <queryRef>/DramEventTime</queryRef>
          </requiredData>
          <masterPane id="correlateTimelinePane"/>
          <paneToShow id="quickFilterPane"/>
        </tab>
      </xsl:if>
      <defaultTab id="SocwatchSummaryTab"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="timelineblocks" select="document('config://viewpoint/include/timelineblocks.xsl')"/>
    <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              metrics="CStateAndWakeUpsDataOfInterest"
              groupings="/CState/CStateTimerType/CStateWakeUpReasonObjectType/CStateWakeUpObject/CStateProcessName"
              doi="CStateAndWakeUpsDataOfInterest"
              />
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="quickFilterWLPane">
      <params id="quickFilterWLPane"
              metrics="WLDataOfInterest"
              groupings ="/KernelWakelockObject/KernelWakelockUnlockReason/KernelWakelockLockProcess/KernelWakelockUnlockProcess"
              showLoopKnob="false"
              showInlineKnob="false"
              showCalleeAttributionKnob="false"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileWLName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterWLPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileWLName)"/>
    <xsl:variable name="quickFilterDStatePane">
      <params id="quickFilterDStatePane"
              metrics="DStateDataOfInterest"
              groupings ="/DState/DStateDevice/DStateComplex"
              showLoopKnob="false"
              showInlineKnob="false"
              showCalleeAttributionKnob="false"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileDStateName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterDStatePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileDStateName)"/>
    <xsl:variable name="quickFilterNCDStatePane">
      <params id="quickFilterNCDStatePane"
              metrics="NCDStateDataOfInterest"
              groupings ="/NCDState/NCDStateDevice/NCDStateComplex"
              showLoopKnob="false"
              showInlineKnob="false"
              showCalleeAttributionKnob="false"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileNCDStateName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterNCDStatePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileNCDStateName)"/>
    <xsl:variable name="quickFilterDevicePane">
      <params id="quickFilterDevicePane"
              metrics="DeviceDataOfInterest"
              groupings="/DeviceName"
              showLoopKnob="false"
              showInlineKnob="false"
              showCalleeAttributionKnob="false"
              doiBy="DeviceDataOfInterest"
              />
    </xsl:variable>
    <xsl:variable name="qfilterFileDeviceName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterDevicePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileDeviceName)"/>
    <xsl:variable name="stackPane">
      <params layers="CStateTimer"/>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="bottomUpCPPane">
      <params id="bottomUpCPPane"
              displayName="CPStatesWindow"
              description="CPUSleepStatesBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.cpucpstates_f1150"
              groupings="CPGridRowBy"
              sorting="PowerCoreSorting"
              defaultGrouping="/Core"
              errorMessage="ErrorNoData"
              columns="CPMStateColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpCPFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpCPPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpCPFileName)"/>
    <xsl:variable name="bottomUpCPane">
      <params id="bottomUpCPane"
              displayName="WakeUpsWindow"
              description="CPUWakeUPsBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.corewakeup_f1148"
              groupings="CGridRowBy"
              sorting="WakeUpsSorting"
              defaultGrouping="/CStateWakeUpObject/Core"
              errorMessage="ErrorNoData"
              groupingItems="no"
              columns="WakeUpsColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpCFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpCPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpCFileName)"/>
    <xsl:variable name="bottomUpSStatePane">
      <params id="bottomUpSStatePane"
              displayName="SStateWindow"
              description="SStateBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.system_sleep_states_window_f1153"
              groupings="SGridRowBy"
              sorting="SStateSorting"
              defaultGrouping="/SState"
              errorMessage="ErrorNoData"
              groupingItems="no"
              columns="SStateColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpSFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpSStatePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpSFileName)"/>
    <xsl:variable name="bottomUpDStatePane">
      <params id="bottomUpDStatePane"
              displayName="SCDStateWindow"
              description="DStateBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.scdevicestates_f1152"
              errorMessage="ErrorNoData"
              groupings="DSGridRowBy"
              sorting="DStateSorting"
              groupingItems="no"
              defaultGrouping="/DStateDevice"
              columns="DStateColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpDSFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpDStatePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpDSFileName)"/>
    <xsl:variable name="bottomUpNCDStatePane">
      <params id="bottomUpNCDStatePane"
              displayName="NCDStateWindow"
              description="DStateBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.ncdevicestaes_f1151"
              errorMessage="ErrorNoData"
              groupings="NCDSGridRowBy"
              sorting="NCDStateSorting"
              defaultGrouping="/NCDStateDevice"
              groupingItems="no"
              columns="NCDStateColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpNCDSFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpNCDStatePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpNCDSFileName)"/>
    <xsl:variable name="bottomUpThermalPane">
      <params id="bottomUpThermalPane"
              displayName="ThermalWindow"
              description="ThermalBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.temperature_f1154"
              errorMessage="ErrorNoData"
              groupings="TermalGridRowBy"
              sorting="ThermalSorting"
              defaultGrouping="/DeviceName"
              groupingItems="no"
              columns="ThermalColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpTermalFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpThermalPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpTermalFileName)"/>
    <xsl:variable name="bottomUpGfxPane">
      <params id="bottomUpGfxPane"
              displayName="GfxWindow"
              description="GfxBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.graphicscpstates_f1169"
              errorMessage="ErrorNoData"
              groupings="GfxGridRowBy"
              sorting="PowerGfxSorting"
              defaultGrouping="/DeviceName"
              groupingItems="no"
              columns="PowerGfxColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpGfxFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpGfxPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpGfxFileName)"/>
    <xsl:variable name="bottomUpBwPane">
      <params id="bottomUpBwPane"
              displayName="BwStateWindow"
              description="BwStateBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.bandwidth_f1147"
              errorMessage="ErrorNoData"
              groupings="BwGridRowBy"
              sorting="PowerBwSorting"
              defaultGrouping="/DeviceName"
              groupingItems="no"
              columns="PowerBwColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpBwFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpBwPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpBwFileName)"/>
    <xsl:variable name="bottomUpPwrPane">
      <params id="bottomUpPwrPane"
              displayName="PwrStateWindow"
              description="PwrStateBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.power_f1170"
              errorMessage="ErrorNoData"
              groupings="PwrGridRowBy"
              sorting="PowerPwrSorting"
              defaultGrouping="/PowerEventType"
              groupingItems="no"
              columns="PowerPwrColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpPwrFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPwrPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpPwrFileName)"/>
    <xsl:variable name="bottomUpWLPane">
      <params id="bottomUpWLPane"
              displayName="WakelockWindow"
              description="WakelockBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.wakelocks_f1156"
              errorMessage="ErrorNoData"
              groupings="WLGridRowBy"
              sorting="WLSorting"
              defaultGrouping="/KernelWakelockObject"
              groupingItems="no"
              columns="WLColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpWLFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpWLPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpWLFileName)"/>
    <xsl:variable name="bottomUpDramSRRPane">
      <params id="bottomUpDramSRRPane"
              displayName="DramSRR"
              description="DramSRRBottomUpWindowDescription"
              helpKeyword="configs.wake_ups_window_f1144"
              errorMessage="ErrorNoData"
              groupings="DramSRRGridRowBy"
              sorting="DramSRRSorting"
              defaultGrouping="/DeviceName"
              groupingItems="no"
              columns="DramSRRColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpDramSRRFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpDramSRRPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpDramSRRFileName)"/>
    <xsl:variable name="bottomUpTimerResolutionPane">
      <params id="bottomUpTimerResolutionPane"
              displayName="TimerResolutionWindow"
              description="TimerResolutionBottomUpWindowDescription"
              helpKeyword="intel.phe.configs.timerresolution_f1155"
              errorMessage="ErrorNoData"
              groupings="TimerResolutionGridRowBy"
              groupingItems="no"
              columns="TimerResolutionColumns"/>
    </xsl:variable>
    <xsl:variable name="bottomUpTimerFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpTimerResolutionPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpTimerFileName)"/>
    <xsl:variable name="summaryPane">
      <params description="CPUSleepStatesSummaryWindowDescription"
              enableLinksInSummaryInfo="false"
              showPower="true"
              showPhysicalCores="true"
              showTasks="false"
              helpKeyWord="configs.summary_power_f1244"
              showFrames="false"/>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="timelineCPPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%CPUSleepStatesTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineCPPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <xsl:choose>
        <xsl:when test="exsl:ctx('hwSofiaExists', 'none') = 'true'">
          <area headerMode="rich" id="core">
            <rowSet>
              <rowBy>
                <queryRef>/PowerCore</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/CStateTime</queryRef>
                <queryRef>/VmSwitchCount</queryRef>
              </columnBy>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateTime/CState</queryRef>
                </drawBy>
              </layer>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUpCount</queryRef>
                </drawBy>
              </layer>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/CStateTransitionCause</queryRef>
                  <queryRef>/CStateProcessName</queryRef>
                  <queryRef>/CState</queryRef>
                </tooltipBy>
                <diveBy>
                  <queryRef>/CStateWakeUpDive</queryRef>
                </diveBy>
              </layer>
              <layer boolean:showText="true" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/CStateWakeUpObjectName</queryRef>
                  <queryRef>/CStateProcessName</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/CStateWakeUpObjectName</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsVMM/VmSwitchOsVMM[VMM]</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/VmSwitchOsVMM</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsAndroid/VmSwitchOsAndroid[Android]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsAndroid</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsModem/VmSwitchOsModem[Modem]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsModem</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsSecVM/VmSwitchOsSecVM[SecVM]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsSecVM</queryRef>
                </colorBy>
              </layer>
            </rowSet>
          </area>
          <xsl:choose>
            <xsl:when test="exsl:ctx('VMSwitchExists', 'none') = 'true'">
              <area headerMode="rich" boolean:showYScale="true" boolean:visible="false" id="vcpu_load">
                <rowSet displayName="%VCPULoadObject">
                  <rowBy>
                    <queryRef>/HWContextCoreName/HWContextNameName</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/VmSwitchTime</queryRef>
                  </columnBy>
                  <layer type="Overtime" boolean:visible="true" boolean:scaleGroupStart="true">
                    <drawBy>
                      <queryRef>/VCPULoad5ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad5ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/VCPULoad10ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad10ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/VCPULoad20ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad20ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false" boolean:scaleGroupEnd="true">
                    <drawBy>
                      <queryRef>/VCPULoad50ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad50ms</queryRef>
                    </tooltipBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:when>
            <xsl:otherwise>
              <area headerMode="rich" boolean:showYScale="true" boolean:visible="false" id="cpu_load">
                <rowSet displayName="%CPULoadObject">
                  <rowBy boolean:useGridQuery="false">
                    <queryRef>/HWCore</queryRef>
                  </rowBy>
                  <layer type="Overtime" boolean:visible="true" boolean:scaleGroupStart="true">
                    <drawBy>
                      <queryRef>/CPULoad5ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad5ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/CPULoad10ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad10ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/CPULoad20ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad20ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false" boolean:scaleGroupEnd="true">
                    <drawBy>
                      <queryRef>/CPULoad50ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad50ms</queryRef>
                    </tooltipBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('hwModuleExists', 'none') = 'true'">
              <area headerMode="rich" id="core_package">
                <rowSet>
                  <rowBy>
                    <queryRef>/PowerPackage/PowerModule/Core</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CStateTime</queryRef>
                    <queryRef>/ModuleCStateTime</queryRef>
                    <queryRef>/PackageCStateTime</queryRef>
                  </columnBy>
                  <layer visibleOnLevels="Package,CorePackage,CorePackage">
                    <drawBy>
                      <queryRef>/PackageCStateTime/PackageCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="HWModule,HWCoreModule">
                    <drawBy>
                      <queryRef>/ModuleCStateTime/ModuleCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateTime/CState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpCount</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateTransitionCause</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                      <queryRef>/CState</queryRef>
                    </tooltipBy>
                    <diveBy>
                      <queryRef>/CStateWakeUpDive</queryRef>
                    </diveBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                    </tooltipBy>
                    <colorBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                    </colorBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:when>
            <xsl:otherwise>
              <area headerMode="rich" id="core_package">
                <rowSet>
                  <rowBy>
                    <queryRef>/PowerPackage/Core</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CStateTime</queryRef>
                    <queryRef>/PackageCStateTime</queryRef>
                  </columnBy>
                  <layer visibleOnLevels="Package,CorePackage,CorePackage">
                    <drawBy>
                      <queryRef>/PackageCStateTime/PackageCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateTime/CState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpCount</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateTransitionCause</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                      <queryRef>/CState</queryRef>
                    </tooltipBy>
                    <diveBy>
                      <queryRef>/CStateWakeUpDive</queryRef>
                    </diveBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                    </tooltipBy>
                    <colorBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                    </colorBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <area headerMode="rich" id="hw_c_state">
        <rowSet displayName="Hardware C-State">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/HWCore</queryRef>
          </rowBy>
          <layer>
            <drawBy>
              <queryRef>/HwCStateTime/HwCState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/HwCState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <xsl:choose>
        <xsl:when test="exsl:ctx('ModulePState', 'none') = 'true'">
          <area headerMode="rich" boolean:showYScale="true" id="module_p_states">
            <rowSet displayName="%PStates">
              <rowBy boolean:useGridQuery="false">
                <queryRef>/ModuleFrequency</queryRef>
              </rowBy>
              <layer type="Overtime" boolean:allowToHideSeries="true">
                <drawBy>
                  <queryRef>/ModulePStateFreq/ModulePStateType</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/ModulePStateType</queryRef>
                </colorBy>
              </layer>
              <xsl:choose>
                <xsl:when test="exsl:ctx('MinMaxRequest', 'none') = 'true' or exsl:ctx('PStateRequest', 'none') = 'true'">
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/ModulePStateMinRequester/ModulePStateType[%MinPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/ModulePStateMinRequester</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/ModulePStateMaxRequester/ModulePStateType[%MaxPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/ModulePStateMaxRequester</queryRef>
                    </tooltipBy>
                  </layer>
                </xsl:when>
              </xsl:choose>
            </rowSet>
          </area>
        </xsl:when>
        <xsl:otherwise>
          <area headerMode="rich" boolean:showYScale="true" id="p_states">
            <rowSet displayName="%PStates">
              <rowBy boolean:useGridQuery="false">
                <queryRef>/CoreFrequency</queryRef>
              </rowBy>
              <layer type="Overtime" boolean:allowToHideSeries="true">
                <drawBy>
                  <queryRef>/PStateFreq/PStateType</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/PStateType</queryRef>
                </colorBy>
              </layer>
              <xsl:choose>
                <xsl:when test="exsl:ctx('MinMaxRequest', 'none') = 'true' or exsl:ctx('PStateRequest', 'none') = 'true'">
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/PStateMinRequester/PStateType[%MinPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/PStateMinRequester</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/PStateMaxRequester/PStateType[%MaxPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/PStateMaxRequester</queryRef>
                    </tooltipBy>
                  </layer>
                </xsl:when>
              </xsl:choose>
            </rowSet>
          </area>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineCPPane">
        <xsl:copy-of select="$timelineCPPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timelineCPPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineCPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%CPUSleepStatesTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineCPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <xsl:choose>
        <xsl:when test="exsl:ctx('hwSofiaExists', 'none') = 'true'">
          <area headerMode="rich" id="core">
            <rowSet>
              <rowBy>
                <queryRef>/PowerCore/HWContextNameName</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/CStateTime</queryRef>
                <queryRef>/VmSwitchCount</queryRef>
              </columnBy>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateTime/CState</queryRef>
                </drawBy>
              </layer>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUpCount</queryRef>
                </drawBy>
              </layer>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/CStateTransitionCause</queryRef>
                  <queryRef>/CStateProcessName</queryRef>
                  <queryRef>/CState</queryRef>
                </tooltipBy>
                <diveBy>
                  <queryRef>/CStateWakeUpDive</queryRef>
                </diveBy>
              </layer>
              <layer boolean:showText="true" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/CStateWakeUpObjectName</queryRef>
                  <queryRef>/CStateProcessName</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/CStateWakeUpObjectName</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsVMM/VmSwitchOsVMM[VMM]</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/VmSwitchOsVMM</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsAndroid/VmSwitchOsAndroid[Android]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsAndroid</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsModem/VmSwitchOsModem[Modem]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsModem</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsSecVM/VmSwitchOsSecVM[SecVM]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsSecVM</queryRef>
                </colorBy>
              </layer>
            </rowSet>
          </area>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('hwModuleExists', 'none') = 'true'">
              <area headerMode="rich" id="core_package">
                <rowSet>
                  <rowBy>
                    <queryRef>/PowerPackage/PowerModule/Core</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CStateTime</queryRef>
                    <queryRef>/ModuleCStateTime</queryRef>
                    <queryRef>/PackageCStateTime</queryRef>
                  </columnBy>
                  <layer visibleOnLevels="Package,CorePackage,CorePackage">
                    <drawBy>
                      <queryRef>/PackageCStateTime/PackageCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="HWModule,HWCoreModule">
                    <drawBy>
                      <queryRef>/ModuleCStateTime/ModuleCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateTime/CState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpCount</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateTransitionCause</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                      <queryRef>/CState</queryRef>
                    </tooltipBy>
                    <diveBy>
                      <queryRef>/CStateWakeUpDive</queryRef>
                    </diveBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                    </tooltipBy>
                    <colorBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                    </colorBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:when>
            <xsl:otherwise>
              <area headerMode="rich" id="core_package">
                <rowSet>
                  <rowBy>
                    <queryRef>/PowerPackage/Core</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CStateTime</queryRef>
                    <queryRef>/PackageCStateTime</queryRef>
                  </columnBy>
                  <layer visibleOnLevels="Package,CorePackage,CorePackage">
                    <drawBy>
                      <queryRef>/PackageCStateTime/PackageCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateTime/CState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpCount</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateTransitionCause</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                      <queryRef>/CState</queryRef>
                    </tooltipBy>
                    <diveBy>
                      <queryRef>/CStateWakeUpDive</queryRef>
                    </diveBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                    </tooltipBy>
                    <colorBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                    </colorBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <area headerMode="rich" id="hw_c_state">
        <rowSet displayName="Hardware C-State">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/HWCore</queryRef>
          </rowBy>
          <layer>
            <drawBy>
              <queryRef>/HwCStateTime/HwCState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/HwCState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineCPane">
        <xsl:copy-of select="$timelineCPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineCPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <srcAsm id="srcAsmPane" int:stateVersion="2">
      <asmWindow>
        <helpKeywordF1>configs.find_problem_asm_pane_f1041</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <queryRef>/CStateInternalAddressFlat</queryRef>
                <queryRef>/CStateBasicBlockInternal/CStateInternalAddress</queryRef>
                <queryRef>/CStateFunctionRangeInternal/CStateBasicBlockInternal/CStateInternalAddress</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/CStateSourceLine</queryRef>
                <queryRef>/CStateAssemblyContent</queryRef>
                <vectorQueryInsert>/WakeUpsColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </asmWindow>
      <srcWindow>
        <helpKeywordF1>configs.find_problem_src_pane_f1040</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <queryRef>/CStateSourceLineFlat</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/CStateSourceContent</queryRef>
                <vectorQueryInsert>/WakeUpsColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </srcWindow>
      <fileSearchWindow>
        <helpKeywordF1>configs.find_file_type_f1072</helpKeywordF1>
      </fileSearchWindow>
      <doiBy>
        <queryRef>/DataOfInterest</queryRef>
      </doiBy>
    </srcAsm>
    <xsl:variable name="timelineSStatePaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%SStatesTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineSStatePaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" id="s_state">
        <rowSet displayName="%Machine">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/Machine</queryRef>
          </rowBy>
          <layer>
            <drawBy>
              <queryRef>/SStateTime/SState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/SState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineSStatePane">
        <xsl:copy-of select="$timelineSStatePaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineSStatePaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineDStatePaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%DStatesTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineDStatePaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" id="sc_d_state">
        <rowSet displayName="%SCDStateDevice">
          <rowBy>
            <queryRef>/DStateDevice</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DStateTime/DState</queryRef>
          </columnBy>
          <layer>
            <drawBy>
              <queryRef>/DStateTime/DState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/DState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineDStatePane">
        <xsl:copy-of select="$timelineDStatePaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineDStatePaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineNCDStatePaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%DStatesTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineNCDStatePaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" id="nc_d_state">
        <rowSet displayName="%DStateDevice">
          <rowBy>
            <queryRef>/NCDStateDevice/NCDState</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/NCDStateCount/NCDState</queryRef>
          </columnBy>
          <layer boolean:allowToHideSeries="true">
            <drawBy>
              <queryRef>/NCDStateCount/NCDState</queryRef>
              <displayAttributes>
                <timelineFormat>dot</timelineFormat>
              </displayAttributes>
            </drawBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineNCDStatePane">
        <xsl:copy-of select="$timelineNCDStatePaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineNCDStatePaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineWLPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%WakelocksTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineWLPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich">
        <rowSet displayName="%WakelockCount">
          <layer type="InstanceCountOverTime" boolean:scaleGroupStart="true">
            <drawBy>
              <queryRef>/KernelWakelockCount</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/KernelWakelockCount</queryRef>
            </tooltipBy>
          </layer>
          <layer type="InstanceCountOverTime" boolean:scaleGroupEnd="true">
            <drawBy>
              <queryRef>/UserWakelockCount</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/UserWakelockCount</queryRef>
            </tooltipBy>
          </layer>
          <layer>
            <drawBy>
              <queryRef>/S3Time</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/S3Time</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area sizeMode="rowLimit" id="user_wakelock_name">
        <rowSet displayName="%UserWakelockUIDName">
          <rowBy>
            <queryRef>/UserWakelockUIDName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/UserWakelockTime</queryRef>
          </columnBy>
          <layer type="RowInterval">
            <drawBy>
              <queryRef>/UserWakelock</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/UserWakelockLockProcess</queryRef>
              <queryRef>/UserWakelockUnlockProcess</queryRef>
              <queryRef>/UserWakelockFlag</queryRef>
              <queryRef>/UserWakelockTag</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area sizeMode="rowLimit" id="wakelock_object">
        <rowSet displayName="%WakelockObject">
          <rowBy>
            <queryRef>/KernelWakelockObjectBand</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/KernelWakelockTime</queryRef>
          </columnBy>
          <layer type="RowInterval">
            <drawBy>
              <queryRef>/KernelWakelock</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/KernelWakelockLockProcess</queryRef>
              <queryRef>/KernelWakelockLockReason</queryRef>
              <queryRef>/KernelWakelockUnlockReason</queryRef>
              <queryRef>/KernelWakelockUnlockProcess</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineWLPane">
        <xsl:copy-of select="$timelineWLPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineWLPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineBwPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%BwTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineBwPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" boolean:showYScale="true" id="bw">
        <rowSet displayName="%BandwidthMBytesPerSecond">
          <rowBy>
            <queryRef>/DeviceBWName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/BandwidthMBytesPerSecond</queryRef>
          </columnBy>
          <layer type="Overtime" boolean:scaleGroupStart="true">
            <drawBy>
              <queryRef>/BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadWrite32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadWrite64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadWritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/READ32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/READ64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0R32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0R64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1R32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1R64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/WRITE32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/WRITE64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0W32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0W64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1W32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1W64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/GfxBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/GfxEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DisplayBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DisplayEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IspBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IspEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel0BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel0EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel1BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel1EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel2BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel2EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/VedBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/VedEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/PUnitBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/PUnitEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IaBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime" boolean:scaleGroupEnd="true">
            <drawBy>
              <queryRef>/IaEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/BandwidthInstance</queryRef>
            </drawBy>
            <colorBy>
              <queryRef>/BandwidthInstance</queryRef>
            </colorBy>
            <tooltipBy>
              <queryRef>/BandwidthInstance</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineBwPane">
        <xsl:copy-of select="$timelineBwPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineBwPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelinePwrPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <helpKeywordF1>configs.timeline_f1106</helpKeywordF1>
      <description>%PwrTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelinePwrPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" id="power">
        <rowSet displayName="%PowerMilliWatt">
          <rowBy>
            <queryRef>/DevicePowerName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/PowerMilliWatt</queryRef>
          </columnBy>
          <layer type="Overtime" boolean:scaleGroupStart="true">
            <drawBy>
              <queryRef>/PackagePowerMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/CpuPowerMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/GpuPowerMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DramMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime" boolean:scaleGroupEnd="true">
            <drawBy>
              <queryRef>/SoCMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/PowerInstance</queryRef>
            </drawBy>
            <colorBy>
              <queryRef>/PowerInstance</queryRef>
            </colorBy>
            <tooltipBy>
              <queryRef>/PowerInstance</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelinePwrPane">
        <xsl:copy-of select="$timelinePwrPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelinePwrPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineThermalPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%ThermalTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineThermalPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" boolean:showYScale="true" id="temperature">
        <rowSet displayName="%Temperature">
          <rowBy>
            <queryRef>/DeviceTempName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DeviceThermalTime</queryRef>
          </columnBy>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DeviceTemperature</queryRef>
            </drawBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineThermalPane">
        <xsl:copy-of select="$timelineThermalPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineThermalPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineGfxPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <helpKeywordF1>configs.timeline_f1106</helpKeywordF1>
      <description>%GfxTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineGfxPaneConfig">
    <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" boolean:maxLabels="true" id="graphics_p_states">
        <rowSet displayName="%GfxPStates">
          <rowBy>
            <queryRef>/DeviceGFXPStateName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DevicePStateTime</queryRef>
          </columnBy>
          <layer>
            <drawBy>
              <queryRef>/ActiveGfxCStateTime/DeviceCStateName[RC0]</queryRef>
              <displayAttributes>
                <timelineFormat>heatmap</timelineFormat>
              </displayAttributes>
            </drawBy>
          </layer>
          <layer>
            <drawBy>
              <queryRef>/DevicePStateFreq</queryRef>
              <displayAttributes>
                <timelineFormat>dot</timelineFormat>
                <boolean:timelineShowZeroValues>true</boolean:timelineShowZeroValues>
              </displayAttributes>
            </drawBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" id="graphics_c_states">
        <rowSet displayName="%GfxCStates">
          <rowBy>
            <queryRef>/DeviceGFXCStateName/DeviceCStateName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/GfxCStateTime</queryRef>
          </columnBy>
          <layer visibleOnLevels="DeviceGFXCStateName" boolean:allowToHideSeries="true">
            <drawBy>
              <queryRef>/GfxCStateTime/DeviceCStateName</queryRef>
              <displayAttributes>
                <timelineFormat>area</timelineFormat>
              </displayAttributes>
            </drawBy>
            <tooltipBy>
              <queryRef>/DeviceCState</queryRef>
            </tooltipBy>
          </layer>
          <layer visibleOnLevels="DeviceCStateName">
            <drawBy>
              <queryRef>/GfxCStateTime/DeviceCStateName</queryRef>
              <displayAttributes>
                <timelineFormat>heatmap</timelineFormat>
              </displayAttributes>
            </drawBy>
            <tooltipBy>
              <queryRef>/DeviceCState</queryRef>
            </tooltipBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/DeviceCState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/DeviceCState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineGfxPane">
        <xsl:copy-of select="$timelineGfxPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineGfxPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineDramSRRPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <helpKeywordF1>configs.timeline_f1106</helpKeywordF1>
      <description>%DramSRRTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineDramSRRPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" id="dram_srr">
        <rowSet displayName="%DramSRR">
          <rowBy>
            <queryRef>/DeviceName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DramEventTime/DramEventType</queryRef>
          </columnBy>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DramEventTime/DramEventType</queryRef>
            </drawBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/DramEventInstance</queryRef>
            </drawBy>
            <colorBy>
              <queryRef>/DramEventInstance</queryRef>
            </colorBy>
            <tooltipBy>
              <queryRef>/DramEventInstance</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineDramSRRPane">
        <xsl:copy-of select="$timelineDramSRRPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineDramSRRPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="timelineTimerResolutionPaneAttributes">
      <xsl:attribute name="displayName">%TimelineWindow</xsl:attribute>
      <description>%TimerResolutionTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelineTimerResolutionPaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <area headerMode="rich" boolean:showYScale="true" id="machine">
        <rowSet displayName="%Machine">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/Machine</queryRef>
          </rowBy>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/TimerResolutionInfo</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/TimerResolutionInfo</queryRef>
            </tooltipBy>
          </layer>
          <layer>
            <drawBy>
              <queryRef>/TimerResolutionName</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/TimerResolutionName</queryRef>
            </tooltipBy>
            <colorBy>
              <queryRef>/TimerResolutionName</queryRef>
            </colorBy>
          </layer>
        </rowSet>
      </area>
      <area sizeMode="rowLimit" id="timer_resolution_request">
        <rowSet displayName="%TimerResolutionRequest">
          <rowBy>
            <queryRef>/TimerResolutionRequestAppName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/TimerResolutionRequestTime</queryRef>
          </columnBy>
          <layer type="RowInterval">
            <drawBy>
              <queryRef>/TimerResolutionRequest</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/TimerResolutionRequestAppName</queryRef>
              <queryRef>/TimerResolutionRequest</queryRef>
            </tooltipBy>
            <colorBy>
              <queryRef>/TimerResolutionRequest</queryRef>
            </colorBy>
          </layer>
        </rowSet>
      </area>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineTimerResolutionPane">
        <xsl:copy-of select="$timelineTimerResolutionPaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$timelineTimerResolutionPaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="correlateTimelinePaneAttributes">
      <xsl:attribute name="displayName">%CorrelateTimelineWindow</xsl:attribute>
      <helpKeywordF1>intel.phe.configs.correllatemetrics_f1149</helpKeywordF1>
      <description>%CorrelateTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="correlateTimelinePaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
      </ruler>
      <xsl:choose>
        <xsl:when test="exsl:ctx('hwSofiaExists', 'none') = 'true'">
          <area headerMode="rich" id="core">
            <rowSet>
              <rowBy>
                <queryRef>/PowerCore/HWContextNameName</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/CStateTime</queryRef>
                <queryRef>/VmSwitchCount</queryRef>
              </columnBy>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateTime/CState</queryRef>
                </drawBy>
              </layer>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUpCount</queryRef>
                </drawBy>
              </layer>
              <layer visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/CStateTransitionCause</queryRef>
                  <queryRef>/CStateProcessName</queryRef>
                  <queryRef>/CState</queryRef>
                </tooltipBy>
                <diveBy>
                  <queryRef>/CStateWakeUpDive</queryRef>
                </diveBy>
              </layer>
              <layer boolean:showText="true" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/CStateWakeUpObjectName</queryRef>
                  <queryRef>/CStateProcessName</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/CStateWakeUpObjectName</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsVMM/VmSwitchOsVMM[VMM]</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/VmSwitchOsVMM</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsAndroid/VmSwitchOsAndroid[Android]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsAndroid</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsModem/VmSwitchOsModem[Modem]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsModem</queryRef>
                </colorBy>
              </layer>
              <layer type="EventMarker" visibleOnLevels="Core">
                <drawBy>
                  <queryRef>/VmSwitchOsSecVM/VmSwitchOsSecVM[SecVM]</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/VmSwitchExitCause</queryRef>
                  <queryRef>/VmSwitchVcpuId</queryRef>
                </tooltipBy>
                <colorBy>
                  <queryRef>/VmSwitchOsSecVM</queryRef>
                </colorBy>
              </layer>
            </rowSet>
          </area>
          <xsl:choose>
            <xsl:when test="exsl:ctx('VMSwitchExists', 'none') = 'true'">
              <area headerMode="rich" boolean:showYScale="true" boolean:visible="false" id="vcpu_load">
                <rowSet displayName="%VCPULoadObject">
                  <rowBy>
                    <queryRef>/HWContextCoreName/HWContextNameName</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/VmSwitchTime</queryRef>
                  </columnBy>
                  <layer type="Overtime" boolean:visible="true" boolean:scaleGroupStart="true">
                    <drawBy>
                      <queryRef>/VCPULoad5ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad5ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/VCPULoad10ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad10ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/VCPULoad20ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad20ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false" boolean:scaleGroupEnd="true">
                    <drawBy>
                      <queryRef>/VCPULoad50ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/VCPULoad50ms</queryRef>
                    </tooltipBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:when>
            <xsl:otherwise>
              <area headerMode="rich" boolean:showYScale="true" boolean:visible="false" id="cpu_load">
                <rowSet displayName="%CPULoadObject">
                  <rowBy boolean:useGridQuery="false">
                    <queryRef>/HWCore</queryRef>
                  </rowBy>
                  <layer type="Overtime" boolean:visible="true" boolean:scaleGroupStart="true">
                    <drawBy>
                      <queryRef>/CPULoad5ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad5ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/CPULoad10ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad10ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false">
                    <drawBy>
                      <queryRef>/CPULoad20ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad20ms</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="Overtime" boolean:visible="false" boolean:scaleGroupEnd="true">
                    <drawBy>
                      <queryRef>/CPULoad50ms</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CPULoad50ms</queryRef>
                    </tooltipBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('hwModuleExists', 'none') = 'true'">
              <area headerMode="rich" id="core_package">
                <rowSet>
                  <rowBy>
                    <queryRef>/PowerPackage/PowerModule/Core</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CStateTime</queryRef>
                    <queryRef>/ModuleCStateTime</queryRef>
                    <queryRef>/PackageCStateTime</queryRef>
                  </columnBy>
                  <layer visibleOnLevels="Package,CorePackage,CorePackage">
                    <drawBy>
                      <queryRef>/PackageCStateTime/PackageCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="HWModule,HWCoreModule">
                    <drawBy>
                      <queryRef>/ModuleCStateTime/ModuleCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateTime/CState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpCount</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateTransitionCause</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                      <queryRef>/CState</queryRef>
                    </tooltipBy>
                    <diveBy>
                      <queryRef>/CStateWakeUpDive</queryRef>
                    </diveBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                    </tooltipBy>
                    <colorBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                    </colorBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:when>
            <xsl:otherwise>
              <area headerMode="rich" id="core_package">
                <rowSet>
                  <rowBy>
                    <queryRef>/PowerPackage/Core</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CStateTime</queryRef>
                    <queryRef>/PackageCStateTime</queryRef>
                  </columnBy>
                  <layer visibleOnLevels="Package,CorePackage,CorePackage">
                    <drawBy>
                      <queryRef>/PackageCStateTime/PackageCState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateTime/CState</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpCount</queryRef>
                    </drawBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUp/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateTransitionCause</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                      <queryRef>/CState</queryRef>
                    </tooltipBy>
                    <diveBy>
                      <queryRef>/CStateWakeUpDive</queryRef>
                    </diveBy>
                  </layer>
                  <layer visibleOnLevels="Core">
                    <drawBy>
                      <queryRef>/CStateWakeUpObjectName/CState[!CC0]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                      <queryRef>/CStateProcessName</queryRef>
                    </tooltipBy>
                    <colorBy>
                      <queryRef>/CStateWakeUpObjectName</queryRef>
                    </colorBy>
                  </layer>
                </rowSet>
              </area>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <area headerMode="rich" id="hw_c_state">
        <rowSet displayName="Hardware C-State">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/HWCore</queryRef>
          </rowBy>
          <layer>
            <drawBy>
              <queryRef>/HwCStateTime/HwCState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/HwCState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <xsl:choose>
        <xsl:when test="exsl:ctx('ModulePState', 'none') = 'true'">
          <area headerMode="rich" boolean:showYScale="true" id="module_p_states">
            <rowSet displayName="%PStates">
              <rowBy boolean:useGridQuery="false">
                <queryRef>/ModuleFrequency</queryRef>
              </rowBy>
              <layer type="Overtime" boolean:allowToHideSeries="true">
                <drawBy>
                  <queryRef>/ModulePStateFreq/ModulePStateType</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/ModulePStateType</queryRef>
                </colorBy>
              </layer>
              <xsl:choose>
                <xsl:when test="exsl:ctx('MinMaxRequest', 'none') = 'true' or exsl:ctx('PStateRequest', 'none') = 'true'">
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/ModulePStateMinRequester/ModulePStateType[%MinPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/ModulePStateMinRequester</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/ModulePStateMaxRequester/ModulePStateType[%MaxPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/ModulePStateMaxRequester</queryRef>
                    </tooltipBy>
                  </layer>
                </xsl:when>
              </xsl:choose>
            </rowSet>
          </area>
        </xsl:when>
        <xsl:otherwise>
          <area headerMode="rich" boolean:showYScale="true" id="p_states">
            <rowSet displayName="%PStates">
              <rowBy boolean:useGridQuery="false">
                <queryRef>/CoreFrequency</queryRef>
              </rowBy>
              <layer type="Overtime" boolean:allowToHideSeries="true">
                <drawBy>
                  <queryRef>/PStateFreq/PStateType</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/PStateType</queryRef>
                </colorBy>
              </layer>
              <xsl:choose>
                <xsl:when test="exsl:ctx('MinMaxRequest', 'none') = 'true' or exsl:ctx('PStateRequest', 'none') = 'true'">
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/PStateMinRequester/PStateType[%MinPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/PStateMinRequester</queryRef>
                    </tooltipBy>
                  </layer>
                  <layer type="EventMarker">
                    <drawBy>
                      <queryRef>/PStateMaxRequester/PStateType[%MaxPolicy]</queryRef>
                    </drawBy>
                    <tooltipBy>
                      <queryRef>/PStateMaxRequester</queryRef>
                    </tooltipBy>
                  </layer>
                </xsl:when>
              </xsl:choose>
            </rowSet>
          </area>
        </xsl:otherwise>
      </xsl:choose>
      <area headerMode="rich" id="s_state">
        <rowSet displayName="%Machine">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/Machine</queryRef>
          </rowBy>
          <layer>
            <drawBy>
              <queryRef>/SStateTime/SState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/SState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" boolean:visible="false" id="sc_d_state">
        <rowSet displayName="%SCDStateDevice">
          <rowBy>
            <queryRef>/DStateDevice</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DStateTime/DState</queryRef>
          </columnBy>
          <layer>
            <drawBy>
              <queryRef>/DStateTime/DState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/DState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" id="nc_d_state">
        <rowSet displayName="%DStateDevice">
          <rowBy>
            <queryRef>/NCDStateDevice/NCDState</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/NCDStateCount/NCDState</queryRef>
          </columnBy>
          <layer boolean:allowToHideSeries="true">
            <drawBy>
              <queryRef>/NCDStateCount/NCDState</queryRef>
              <displayAttributes>
                <timelineFormat>dot</timelineFormat>
              </displayAttributes>
            </drawBy>
          </layer>
        </rowSet>
      </area>
      <xsl:choose>
        <xsl:when test="exsl:ctx('OS', 'none') = 'Linux'">
          <area headerMode="rich" boolean:visible="false">
            <rowSet displayName="%WakelockCount">
              <layer type="InstanceCountOverTime" boolean:scaleGroupStart="true">
                <drawBy>
                  <queryRef>/KernelWakelockCount</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/KernelWakelockCount</queryRef>
                </tooltipBy>
              </layer>
              <layer type="InstanceCountOverTime" boolean:scaleGroupEnd="true">
                <drawBy>
                  <queryRef>/UserWakelockCount</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/UserWakelockCount</queryRef>
                </tooltipBy>
              </layer>
              <layer>
                <drawBy>
                  <queryRef>/S3Time</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/S3Time</queryRef>
                </tooltipBy>
              </layer>
            </rowSet>
          </area>
          <area sizeMode="rowLimit" boolean:visible="false" id="user_wakelock_name">
            <rowSet displayName="%UserWakelockUIDName">
              <rowBy>
                <queryRef>/UserWakelockUIDName</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/UserWakelockTime</queryRef>
              </columnBy>
              <layer type="RowInterval">
                <drawBy>
                  <queryRef>/UserWakelock</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/UserWakelockLockProcess</queryRef>
                  <queryRef>/UserWakelockUnlockProcess</queryRef>
                  <queryRef>/UserWakelockFlag</queryRef>
                  <queryRef>/UserWakelockTag</queryRef>
                </tooltipBy>
              </layer>
            </rowSet>
          </area>
          <area sizeMode="rowLimit" boolean:visible="false" id="wakelock_object">
            <rowSet displayName="%WakelockObject">
              <rowBy>
                <queryRef>/KernelWakelockObjectBand</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/KernelWakelockTime</queryRef>
              </columnBy>
              <layer type="RowInterval">
                <drawBy>
                  <queryRef>/KernelWakelock</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/KernelWakelockLockProcess</queryRef>
                  <queryRef>/KernelWakelockLockReason</queryRef>
                  <queryRef>/KernelWakelockUnlockReason</queryRef>
                  <queryRef>/KernelWakelockUnlockProcess</queryRef>
                </tooltipBy>
              </layer>
            </rowSet>
          </area>
        </xsl:when>
      </xsl:choose>
      <area headerMode="rich" boolean:showYScale="true" id="bw">
        <rowSet displayName="%BandwidthMBytesPerSecond">
          <rowBy>
            <queryRef>/DeviceBWName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/BandwidthMBytesPerSecond</queryRef>
          </columnBy>
          <layer type="Overtime" boolean:scaleGroupStart="true">
            <drawBy>
              <queryRef>/BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadWrite32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadWrite64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadWritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/READ32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/READ64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0R32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0R64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1R32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1R64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Read32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Read64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/WRITE32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/WRITE64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0W32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0W64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1W32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1W64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR0Rank1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Write32BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank0Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DDR1Rank1Write64BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/ReadPartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/WritePartialBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod0EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module0EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Mod1EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/Module1EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/GfxBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/GfxEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DisplayBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DisplayEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IspBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IspEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel0BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel0EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel1BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel1EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel2BandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IoChannel2EventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/VedBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/VedEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/PUnitBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/PUnitEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/IaBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime" boolean:scaleGroupEnd="true">
            <drawBy>
              <queryRef>/IaEventBandwidthMBytesPerSecond</queryRef>
            </drawBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/BandwidthInstance</queryRef>
            </drawBy>
            <colorBy>
              <queryRef>/BandwidthInstance</queryRef>
            </colorBy>
            <tooltipBy>
              <queryRef>/BandwidthInstance</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" id="power">
        <rowSet displayName="%PowerMilliWatt">
          <rowBy>
            <queryRef>/DevicePowerName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/PowerMilliWatt</queryRef>
          </columnBy>
          <layer type="Overtime" boolean:scaleGroupStart="true">
            <drawBy>
              <queryRef>/PackagePowerMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/CpuPowerMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/GpuPowerMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DramMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="Overtime" boolean:scaleGroupEnd="true">
            <drawBy>
              <queryRef>/SoCMilliWatt</queryRef>
            </drawBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/PowerInstance</queryRef>
            </drawBy>
            <colorBy>
              <queryRef>/PowerInstance</queryRef>
            </colorBy>
            <tooltipBy>
              <queryRef>/PowerInstance</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" boolean:showYScale="true" id="temperature">
        <rowSet displayName="%Temperature">
          <rowBy>
            <queryRef>/DeviceTempName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DeviceThermalTime</queryRef>
          </columnBy>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DeviceTemperature</queryRef>
            </drawBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" boolean:maxLabels="true" id="graphics_p_states">
        <rowSet displayName="%GfxPStates">
          <rowBy>
            <queryRef>/DeviceGFXPStateName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DevicePStateTime</queryRef>
          </columnBy>
          <layer>
            <drawBy>
              <queryRef>/ActiveGfxCStateTime/DeviceCStateName[RC0]</queryRef>
              <displayAttributes>
                <timelineFormat>heatmap</timelineFormat>
              </displayAttributes>
            </drawBy>
          </layer>
          <layer>
            <drawBy>
              <queryRef>/DevicePStateFreq</queryRef>
              <displayAttributes>
                <timelineFormat>dot</timelineFormat>
                <boolean:timelineShowZeroValues>true</boolean:timelineShowZeroValues>
              </displayAttributes>
            </drawBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" id="graphics_c_states">
        <rowSet displayName="%GfxCStates">
          <rowBy>
            <queryRef>/DeviceGFXCStateName/DeviceCStateName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/GfxCStateTime</queryRef>
          </columnBy>
          <layer visibleOnLevels="DeviceGFXCStateName" boolean:allowToHideSeries="true">
            <drawBy>
              <queryRef>/GfxCStateTime/DeviceCStateName</queryRef>
              <displayAttributes>
                <timelineFormat>area</timelineFormat>
              </displayAttributes>
            </drawBy>
            <tooltipBy>
              <queryRef>/DeviceCState</queryRef>
            </tooltipBy>
          </layer>
          <layer visibleOnLevels="DeviceCStateName">
            <drawBy>
              <queryRef>/GfxCStateTime/DeviceCStateName</queryRef>
              <displayAttributes>
                <timelineFormat>heatmap</timelineFormat>
              </displayAttributes>
            </drawBy>
            <tooltipBy>
              <queryRef>/DeviceCState</queryRef>
            </tooltipBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/DeviceCState</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/DeviceCState</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" id="dram_srr">
        <rowSet displayName="%DramSRR">
          <rowBy>
            <queryRef>/DeviceName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/DramEventTime/DramEventType</queryRef>
          </columnBy>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/DramEventTime/DramEventType</queryRef>
            </drawBy>
          </layer>
          <layer type="EventMarker">
            <drawBy>
              <queryRef>/DramEventInstance</queryRef>
            </drawBy>
            <colorBy>
              <queryRef>/DramEventInstance</queryRef>
            </colorBy>
            <tooltipBy>
              <queryRef>/DramEventInstance</queryRef>
            </tooltipBy>
          </layer>
        </rowSet>
      </area>
      <area headerMode="rich" id="machine">
        <rowSet displayName="%Machine">
          <rowBy boolean:useGridQuery="false">
            <queryRef>/Machine</queryRef>
          </rowBy>
          <layer type="Overtime">
            <drawBy>
              <queryRef>/TimerResolutionInfo</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/TimerResolutionInfo</queryRef>
            </tooltipBy>
          </layer>
          <layer>
            <drawBy>
              <queryRef>/TimerResolutionName</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/TimerResolutionName</queryRef>
            </tooltipBy>
            <colorBy>
              <queryRef>/TimerResolutionName</queryRef>
            </colorBy>
          </layer>
        </rowSet>
      </area>
      <area sizeMode="rowLimit" id="timer_resolution_request">
        <rowSet displayName="%TimerResolutionRequest">
          <rowBy>
            <queryRef>/TimerResolutionRequestAppName</queryRef>
          </rowBy>
          <columnBy>
            <queryRef>/TimerResolutionRequestTime</queryRef>
          </columnBy>
          <layer type="RowInterval">
            <drawBy>
              <queryRef>/TimerResolutionRequest</queryRef>
            </drawBy>
            <tooltipBy>
              <queryRef>/TimerResolutionRequestAppName</queryRef>
              <queryRef>/TimerResolutionRequest</queryRef>
            </tooltipBy>
            <colorBy>
              <queryRef>/TimerResolutionRequest</queryRef>
            </colorBy>
          </layer>
        </rowSet>
      </area>
      <xsl:copy-of select="$timelineblocks//bag/config[@id='globalCounters']/*"/>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="correlateTimelinePane" displayName="%CorrelateTimelineWindow">
        <xsl:copy-of select="$correlateTimelinePaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <config>
          <xsl:copy-of select="$correlateTimelinePaneConfig"/>
        </config>
      </html>
    </xsl:if>
  </paneLibrary>
  <queryLibrary  xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <vectorQuery id="PowerCoreSorting">
      <queryRef>/Core</queryRef>
    </vectorQuery>
    <vectorQuery id="SStateSorting">
      <queryRef>/SState</queryRef>
    </vectorQuery>
    <vectorQuery id="DStateSorting">
      <queryRef>/DStateDevice</queryRef>
    </vectorQuery>
    <vectorQuery id="NCDStateSorting">
      <queryRef>/NCDStateDevice</queryRef>
    </vectorQuery>
    <vectorQuery id="WakeUpsSorting">
      <queryRef>/CStateCount</queryRef>
    </vectorQuery>
    <vectorQuery id="WLSorting">
      <queryRef>/KernelWakelockCount</queryRef>
    </vectorQuery>
    <vectorQuery id="ThermalSorting">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="PowerBwSorting">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="PowerPwrSorting">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="GfxSorting">
      <queryRef>/DevicePStateTime</queryRef>
    </vectorQuery>
    <vectorQuery id="DramSRRSorting">
      <queryRef>/DramEventTime</queryRef>
    </vectorQuery>
    <vectorQuery id="TimerResolutionSorting">
      <queryRef>/Machine</queryRef>
    </vectorQuery>
    <vectorQuery id="CStateAndWakeUpsDataOfInterest">
      <queryRef>/CStateTime</queryRef>
      <queryRef>/CStateCount</queryRef>
    </vectorQuery>
    <timeQuery id="SStateDataOfInterest">
      <queryInherit>/SStateTime</queryInherit>
    </timeQuery>
    <timeQuery id="DStateDataOfInterest">
      <queryInherit>/DStateTime</queryInherit>
    </timeQuery>
    <timeQuery id="NCDStateDataOfInterest">
      <queryInherit>/NCDStateTime</queryInherit>
    </timeQuery>
    <timeQuery id="TimerResolutionDataOfInterest">
      <queryInherit>/TimerResolutionTime</queryInherit>
    </timeQuery>
    <instanceCountQuery id="WLDataOfInterest">
      <queryInherit>/KernelWakelockCount</queryInherit>
    </instanceCountQuery>
    <timeQuery id="ThermalDataOfInterest">
      <queryInherit>/DeviceThermalTime</queryInherit>
    </timeQuery>
    <derivedQuery id="BwDataOfInterest">
      <queryInherit>/BandwidthMBytesPerSecond</queryInherit>
    </derivedQuery>
    <countQuery id="PwrDataOfInterest">
      <queryInherit>/PowerMilliWatt</queryInherit>
    </countQuery>
    <timeQuery id="DramSRRDataOfInterest">
      <queryInherit>/DramEventTime</queryInherit>
    </timeQuery>
    <vectorQuery id="DeviceDataOfInterest">
      <queryRef>/DevicePStateTime</queryRef>
      <vectorQueryInsert>/ThermalColumns</vectorQueryInsert>
      <vectorQueryInsert>/PowerPwrColumns</vectorQueryInsert>
    </vectorQuery>
    <derivedQuery id="S3Time" displayName="%S3Time">
      <instanceBandTable>dd_hw_node</instanceBandTable>
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/SStateTime/SState[S3]") ]]></valueEval>
      <displayAttributes>
        <selfFormat>time</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
        <timelineFormat>area</timelineFormat>
        <timelineGraphColor>1,150,0,255</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <vectorQuery id="MySummaryColumns">
      <queryRef>/AvailableCoreTime</queryRef>
    </vectorQuery>
    <vectorQuery id="CPGridRowBy">
      <xsl:choose>
        <xsl:when test="exsl:ctx('hwSofiaExists', 'none') = 'true'">
          <queryRef>/HWModule</queryRef>
          <queryRef>/Core</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/Package</queryRef>
          <xsl:choose>
            <xsl:when test="exsl:ctx('hwModuleExists', 'none') = 'true'">
              <queryRef>/HWModule</queryRef>
            </xsl:when>
          </xsl:choose>
          <queryRef>/Core</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="CGridRowBy">
      <xsl:choose>
        <xsl:when test="exsl:ctx('hwSofiaExists', 'none') = 'true'">
          <queryRef>/CStateWakeUpObject/Core</queryRef>
          <queryRef>/CStateWakeUpObject/CStateTimerCallStack</queryRef>
          <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/Core</queryRef>
          <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/CStateTimerCallStack</queryRef>
          <queryRef>/Core/CStateWakeUpReasonObjectType/CStateWakeUp/CStateTimerCallStack</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('hwModuleExists', 'none') = 'true'">
              <queryRef>/CStateWakeUpObject/Core</queryRef>
              <queryRef>/CStateWakeUpObject/CorePackage/Core</queryRef>
              <queryRef>/CStateWakeUpObject/CorePackage/HWCoreModule/Core</queryRef>
              <queryRef>/CStateWakeUpObject/CStateTimerCallStack</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/Core</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/CorePackage/Core</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/CorePackage/HWCoreModule/Core</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/CStateTimerCallStack</queryRef>
              <queryRef>/Core/CStateWakeUpReasonObjectType/CStateWakeUp/CStateTimerCallStack</queryRef>
            </xsl:when>
            <xsl:otherwise>
              <queryRef>/CStateWakeUpObject/Core</queryRef>
              <queryRef>/CStateWakeUpObject/CorePackage/Core</queryRef>
              <queryRef>/CStateWakeUpObject/CStateTimerCallStack</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/Core</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/CorePackage/Core</queryRef>
              <queryRef>/CStateWakeUpReasonObjectType/CStateWakeUp/CStateTimerCallStack</queryRef>
              <queryRef>/Core/CStateWakeUpReasonObjectType/CStateWakeUp/CStateTimerCallStack</queryRef>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="SGridRowBy">
      <queryRef>/SState</queryRef>
    </vectorQuery>
    <vectorQuery id="DSGridRowBy">
      <queryRef>/DStateDevice</queryRef>
      <queryRef>/DStateComplex/DStateDevice</queryRef>
    </vectorQuery>
    <vectorQuery id="NCDSGridRowBy">
      <queryRef>/NCDStateDevice</queryRef>
      <queryRef>/NCDStateComplex/NCDStateDevice</queryRef>
    </vectorQuery>
    <vectorQuery id="TermalGridRowBy">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="GfxGridRowBy">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="BwGridRowBy">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="PwrGridRowBy">
      <queryRef>/PowerEventType</queryRef>
    </vectorQuery>
    <vectorQuery id="WLGridRowBy">
      <queryRef>/KernelWakelockObject</queryRef>
      <queryRef>/KernelWakelockObject/KernelWakelockLockProcess/KernelWakelockUnlockProcess</queryRef>
      <queryRef>/KernelWakelockLockProcess/KernelWakelockObject</queryRef>
      <queryRef>/KernelWakelockLockProcess/KernelWakelockUnlockProcess/KernelWakelockObject</queryRef>
      <queryRef>/KernelWakelockObject/KernelWakelockLockProcess/KernelWakelockLockThread</queryRef>
      <queryRef>/KernelWakelockObject/KernelWakelockUnlockProcess/KernelWakelockUnlockThread</queryRef>
      <queryRef>/KernelWakelockObject/KernelWakelockLockProcess/KernelWakelockLockThread</queryRef>
      <queryRef>/KernelWakelockObject/KernelWakelockUnlockProcess/KernelWakelockUnlockThread</queryRef>
      <queryRef>/UserWakelockUIDName</queryRef>
      <queryRef>/UserWakelockUIDName/UserWakelockTag</queryRef>
      <queryRef>/UserWakelockUIDName/UserWakelockLockProcess/UserWakelockTag</queryRef>
      <queryRef>/UserWakelockLockProcess/UserWakelockTag</queryRef>
      <queryRef>/UserWakelockLockProcess/UserWakelockUnlockProcess/UserWakelockTag</queryRef>
      <queryRef>/UserWakelockTag</queryRef>
    </vectorQuery>
    <vectorQuery id="DramSRRGridRowBy">
      <queryRef>/DeviceName</queryRef>
    </vectorQuery>
    <vectorQuery id="TimerResolutionGridRowBy">
      <queryRef>/Machine</queryRef>
    </vectorQuery>
  </queryLibrary>
</bag>
