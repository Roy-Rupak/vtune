<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt">
  <internal
    name='%GraphicsRenderingViewpointName'
    description='%GraphicsRenderingViewpointDescription'
    shortName='%GraphicsRenderingViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>10</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <queryRef>/GPUDXTime</queryRef>
      <queryRef>/GPUQueue</queryRef>
      <queryRef>/GPUEventCount</queryRef>
      <queryRef>/GPUCoreFrequency</queryRef>
      <queryRef>/CPUGPUConcurrency</queryRef>
      <queryRef>/GPUElapsedTime</queryRef>
      <queryRef>/QueueDMAPacket</queryRef>
      <queryRef>/FrameTime/FrameDomain[%OpenGL_ES]</queryRef>
      <queryRef>/FrameTime/FrameDomain[%EGL]</queryRef>
      <queryRef>/TaskTime/TaskDomain[%OpenGL_ES]</queryRef>
      <queryRef>/TaskTime/TaskDomain[%EGL]</queryRef>
      <xsl:if test="exsl:IsNonEmptyTableExist('dd_vm_info') and exsl:IsNonEmptyTableExist('sched_data')">
        <queryRef>/RefTime</queryRef>
      </xsl:if>
      <xsl:if test="exsl:IsNonEmptyTableExist('sched_data')">
        <queryRef>/TaskTime</queryRef>
      </xsl:if>
      <queryRef>/CPUUsageByCS</queryRef>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="bottomUpPane" placeId="bottomArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="gpuTimelinePane" placeId="resultsArea"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <tab id="bottomUpPane">
        <displayName>%PlatformTimelineWindow</displayName>
        <paneToShow id="bottomUpPane"/>
        <paneToShow id="quickFilterPane"/>
        <xsl:if test="not(exsl:is_compare_mode())">
          <masterPane id="gpuTimelinePane"/>
        </xsl:if>
      </tab>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea"/>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="summaryPane">
      <params description="LightweightHotspotsSummaryWindowDescription"
              querySuffix="PMU"
              showCPUUsage="true"
              showGPUUsage="true"
              showEUArrayMetrics="true"
              showCPUGPUUsage="false"
              showCPUHotspots="true"
              packetsType="false"
              helpKeyWord="configs.summary_hs"
              summaryInfoMaxLevelsToShow="2"/>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              metrics="DataOfInterest"
              groupings="/GenericProcess/GenericThread"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="bottomUpPaneDefaultGrouping">
      <xsl:choose>
        <xsl:when test="exsl:IsNonEmptyTableExist('dd_vm_info')">
          <xsl:text>/GenericVirtualMachine/GenericProcess/GenericThread/Function</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>/Function/ParentCallStack</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpPane">
      <xsl:choose>
        <xsl:when test="exsl:ctx('connectionType', '') = 'ghs'">
          <params groupings="GraphicsRenderingRowBy"
              defaultGrouping="/GenericProcess/GenericThread"
              sorting="MySorting"
              errorMessage="ErrorNoDataHotspots"/>
        </xsl:when>
         <xsl:otherwise>
           <params groupings="GPUGridRowBy"
              defaultGrouping="{$bottomUpPaneDefaultGrouping}"
              sorting="MySorting"
              errorMessage="ErrorNoDataHotspots"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="gpuTimelinePane">
      <params
        id="gpuTimelinePane"
        displayName="GPUTimelineWindow"
        description="HotspotsAndGPUTimelineWindowDescription"
        helpKeyword="configs.graphics_f1337"
        cpuDataByThreadQuery="CPUUsageByCS"
        gpu="true"
        gpuCounters="{$gpuCounters}"
        cpuUsageByCS="true"
        threadsLifetime="false"
        globalEventAreaName="RefTime"
        rowByPrefix="GraphicsRendering"
        packetsColorByVM="true"
        platform="true"
        packetsType="false"/>
      <xsl:choose>
        <xsl:when test="exsl:ctx('connectionType', '') != 'ghs'">
          <params
            cpuDataQuery="RefTime"
            samplePointsQuery="PMUSample/RefTimeEvent"
            samplePointsTooltipQuery="PMUFunctionFull"
            samplePointsLayerName="ClkSample"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"/>
        </xsl:when>
        <xsl:otherwise>
          <params
            cpuDataQuery="CPUUsageByCS"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="gpuTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($gpuTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($gpuTimelinePaneFileName)"/>
    <xsl:variable name="srcAsmPane">
      <params
        family="PMU"
        queryMode="bottomUp"
      />
    </xsl:variable>
    <xsl:variable name="srcAsmPaneFileName">
      <xsl:text>config://viewpoint/include/srcasm.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($srcAsmPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($srcAsmPaneFileName)"/>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <vectorQuery id="GraphicsRenderingTimelineRowBy">
       <queryRef>/GenericThread</queryRef>
       <queryRef>/GenericProcess/GenericThread</queryRef>
       <queryRef>/HWContext/GenericThread</queryRef>
    </vectorQuery>
    <vectorQuery id="GraphicsRenderingRowBy">
      <queryRef>/GenericThread</queryRef>
      <queryRef>/GenericProcess/GenericThread</queryRef>
      <queryRef>/TaskDomain/TaskType</queryRef>
      <queryRef>/TaskType</queryRef>
      <queryRef>/GenericThread/TaskDomain/TaskType</queryRef>
      <queryRef>/GenericThread/TaskType</queryRef>
      <queryRef>/GenericProcess/GenericThread/TaskDomain/TaskType</queryRef>
      <queryRef>/GenericProcess/GenericThread/TaskType</queryRef>
      <queryRef>/FrameDomain/Frame</queryRef>
      <queryRef>/CSGenericPackage/CSGenericCpu</queryRef>
    </vectorQuery>
    <vectorQuery id="MyDataColumns">
      <xsl:choose>
        <xsl:when test="exsl:ctx('connectionType', '') = 'ghs'">
          <queryRef>/CPUUsageByCS</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/CPUTime</queryRef>
        </xsl:otherwise>
     </xsl:choose>
    </vectorQuery>
    <vectorQuery id="MySrcAsmColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySrcColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MyAsmColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySummaryColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <vectorQueryInsert>/MySummaryColumns</vectorQueryInsert>
      <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
      <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
      <queryRef>/QuantumWaitAndInactiveTimeExpanded</queryRef>
      <queryRef>/ContextSwitchCountByReason</queryRef>
      <queryRef>/QuantumSync</queryRef>
      <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
      <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumnsGPU">
          <queryRef>/GPUComputeGlobalDim</queryRef>
          <queryRef>/GPUComputeLocalDim</queryRef>
          <queryRef>/GPUComputeTaskTime</queryRef>
          <queryRef>/GPUComputeTaskDuration</queryRef>
          <queryRef>/GPUComputeTaskCount</queryRef>
          <queryRef>/GPUComputeSimdWidth</queryRef>
          <queryRef>/GPUEUActive</queryRef>
          <queryRef>/GPUEUStalled</queryRef>
          <queryRef>/GPUEUIdle</queryRef>
          <queryRef>/GPUEuThreadOccupancy</queryRef>
          <queryRef>/GPUEuAvgIpcRate</queryRef>
          <queryRef>/GPUEuFpuBothActive</queryRef>
          <queryRef>/GPUEuSendActive</queryRef>
          <queryRef>/GPUL3ShaderBandwidth</queryRef>
          <queryRef>/GPUL3SamplerBandwidth</queryRef>
          <queryRef>/GPUUntypedReadCoalRatio</queryRef>
          <queryRef>/GPUUntypedWriteCoalRatio</queryRef>
          <queryRef>/GPUTypedReadCoalRatio</queryRef>
          <queryRef>/GPUTypedWriteCoalRatio</queryRef>
          <queryRef>/GPUUntypedMemoryReadBandwidth</queryRef>
          <queryRef>/GPUUntypedMemoryWriteBandwidth</queryRef>
          <queryRef>/GPUSharedLocalMemoryReadBandwidth</queryRef>
          <queryRef>/GPUSharedLocalMemoryWriteBandwidth</queryRef>
          <queryRef>/GPUTypedMemoryReadBandwidth</queryRef>
          <queryRef>/GPUTypedMemoryWriteBandwidth</queryRef>
          <queryRef>/GPUMemoryReadBandwidth</queryRef>
          <queryRef>/GPUMemoryWriteBandwidth</queryRef>
          <queryRef>/GPUSamplerBusy</queryRef>
          <queryRef>/GPUSamplerBottleneck</queryRef>
          <queryRef>/GPUL3MissCount</queryRef>
          <queryRef>/GPUCSThreadIssuedCount</queryRef>
          <queryRef>/GPUShaderBarriers</queryRef>
          <queryRef>/GPUShaderAtomics</queryRef>
          <queryRef>/GPUComputeSVMUsageType</queryRef>
	</vectorQuery>
    <vectorQuery id="MySorting">
      <queryRef>/DataOfInterest</queryRef>
    </vectorQuery>
    <vectorQuery id="DataOfInterest">
      <xsl:choose>
        <xsl:when test="exsl:ctx('connectionType', '') = 'ghs'">
          <queryRef>/CPUUsageByCS</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/CPUTime</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
  </queryLibrary>
</bag>
