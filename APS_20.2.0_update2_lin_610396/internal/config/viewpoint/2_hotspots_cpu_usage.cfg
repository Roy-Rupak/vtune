<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%HotspotsByCPUUsageViewpointName'
    shortName='%HotspotsByCPUUsageViewpointShortName'
    description='%HotspotsByCPUUsageViewpointDescription'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>39</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryRef>/RefTime</queryRef>
          <queryRef>/PreciseClockticks</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/CPUTime</queryRef>
          <queryRef>/CPUUsage</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="bottomUpPane" placeId="resultsArea"/>
    <pane id="topDownPane" placeId="resultsArea"/>
    <pane id="callerCalleePane" placeId="resultsArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="timelinePane" placeId="bottomArea"/>
    <pane id="gpuTimelinePane" placeId="bottomArea"/>
    <pane id="taskTimelinePane" placeId="resultsArea"/>
    <pane id="gpuDiagramPane" placeId="bottomArea"/>
    <pane id="deviceTopDownPane" placeId="resultsArea"/>
    <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
    <xsl:variable name="isRunssMode" select="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <xsl:if test="$isRunssMode or not(exsl:ctx('useCountingMode', 0) or exsl:ctx('useAggregatedCounting', 0))">
        <tab id="bottomUp">
          <masterPane id="bottomUpPane"/>
          <paneToShow id="quickFilterPane"/>
          <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
          <paneToShow id="timelinePane"/>
        </tab>
        <tab id="flatProfile">
          <masterPane id="callerCalleePane"/>
          <paneToShow id="quickFilterPane"/>
        </tab>
        <tab id='topDown'>
          <masterPane id="topDownPane"/>
          <paneToShow id="quickFilterPane"/>
          <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
          <paneToShow id="timelinePane"/>
        </tab>
        <tab id='deviceCounters'>
          <requiredData groupOperation="or">
            <queryRef>/DeviceCounterCount</queryRef>
            <queryRef>/DeviceTaskCount</queryRef>
          </requiredData>
          <masterPane id="deviceTopDownPane"/>
          <paneToShow id="quickFilterPane"/>
          <paneToShow id="timelinePane"/>
        </tab>
        <xsl:if test="not(exsl:is_compare_mode())">
          <tab id="tasks">
            <masterPane id="taskTimelinePane"/>
            <paneToShow id="quickFilterPane"/>
            <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
          </tab>
        </xsl:if>
      </xsl:if>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
      <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="isRunssMode" select="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))"/>
    <xsl:variable name="quickFilterPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params id="quickFilterPane"
                  groupings="/Process/Thread/Module/CPUUsageUtilization"/>
        </xsl:when>
        <xsl:otherwise>
          <params id="quickFilterPane"
                  groupings="/Process/Thread/Module/CPUUsageUtilization"
                  metrics="ViewpointGUIandCLIColumns"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="stackPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params layers="CPU/Wait"
                  metrics="CPUTime"/>
        </xsl:when>
        <xsl:otherwise>
          <params layers="PMU/ContextSwitch"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="bottomUpPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params groupings="CPUGridRowBy"
                  sorting="MySorting"
                  errorMessage="ErrorNoDataHotspots"
                  stateVersion="2"/>
        </xsl:when>
        <xsl:otherwise>
          <params description="LightweightHotspotsBottomUpWindowDescription"
                  errorMessage="ErrorNoDataEBS"
                  groupings="PMUGridRowBy"
                  sorting="MySorting"
                  stateVersion="2"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="callerCalleePane">
      <params description="HotspotsCallerCalleeWindowDescription"
              stateVersion="2"/>
    </xsl:variable>
    <xsl:variable name="callerCalleeFileName">
      <xsl:text>config://viewpoint/include/caller-callee.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($callerCalleePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($callerCalleeFileName)/root/*"/>
    <xsl:variable name="topDownPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params groupings="TopDownGridRowBy"
                  sorting="MySorting"
                  errorMessage="ErrorNoDataHotspots"
                  id="topDownPane"
                  displayName="TopDownTreeWindow"
                  description="HotspotsTopDownTreeWindowDescription"
                  helpKeyword="configs.interpret_calltree_f1030"
                  queryType="topDown"
                  groupingItems="no"
                  stateVersion="2"/>
        </xsl:when>
        <xsl:otherwise>
          <params groupings="TopDownGridRowBy"
                  sorting="MySorting"
                  errorMessage="ErrorNoDataEBS"
                  id="topDownPane"
                  displayName="TopDownTreeWindow"
                  description="PMUEventsTopDownTreeWindowDescription"
                  helpKeyword="configs.interpret_calltree_f1030"
                  queryType="topDown"
                  groupingItems="no"
                  stateVersion="2"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="topDownFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($topDownPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($topDownFileName)"/>
    <xsl:variable name="summaryPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params description="HotspotsSummaryWindowDescription"
                  resultSummaryColumns="MyDataColumns"
                  querySuffix="CPU"
                  showCPUHotspots="true"
                  showCPUUsage="true"
                  showCPUGPUUsage="true"
                  showOpenMP="true"
                  helpKeyWord="configs.summary_hs_by_cpu_usage_f1243"
                  showFrames="true"
                  applicationFile="summary"
                  applicationSubPage="unihotspots2">
          </params>
        </xsl:when>
        <xsl:otherwise>
          <params description="LightweightHotspotsSummaryWindowDescription"
                  querySuffix="PMU"
                  showOpenMP="true"
                  showCPUGPUUsage="true"
                  showCPUHotspots="true"
                  showCPUUsage="true"
                  showBandwidth="true"
                  showInterrupts="true"
                  showFrames="true"
                  helpKeyWord="configs.summary_hs"
                  summaryInfoMaxLevelsToShow="2"
                  applicationFile="summary"
                  applicationSubPage="unihotspots2">
          </params>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="timelinePane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params
            id="timelinePane"
            displayName="TimelineWindow"
            globalEventAreaName="CPUUsageOverTime"
            description="HotspotsTimelineWindowDescription"
            cpuDataQuery="CPUTime"
            samplePointsQuery="CPUSample"
            samplePointsTooltipQuery="CPUFunctionFull"
            cpuDataCumulativeQuery="CPUTimeAllCoresCumulative"
            taskQuery="Task"
            helpKeyword="configs.timeline_f1106"
            contextSwitches="false"
            waits="true"
            cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative"
            rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params
            id="timelinePane"
            displayName="TimelineWindow"
            description="LightweightHotspotsTimelineWindowDescription"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            samplePointsQuery="PMUSample/RefTimeEvent"
            samplePointsTooltipQuery="PMUFunctionFull"
            samplePointsLayerName="ClkSample"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            helpKeyword="configs.timeline_f1106"
            cpuOverheadAndSpinTimeQuery="PMUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="PMUOverheadAndSpinTimeAllCoresCumulative"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="timelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($timelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($timelinePaneFileName)"/>
    <xsl:variable name="taskTimelinePane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params
            id="taskTimelinePane"
            displayName="TaskTimelineWithData"
            description="TaskTimelineWithDataDescription"
            tasksAndFrames="true"
            globalEventAreaName="CPUUsageOverTime"
            cpuDataQuery="CPUTime"
            cpuDataCumulativeQuery="CPUTimeAllCoresCumulative"
            contextSwitches="false"
            frameMode="frameDetailed"
            headerMode="rich"
            helpKeyword="configs.tasks_f1330"
            rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params
            id="taskTimelinePane"
            displayName="TaskTimelineWithData"
            description="TaskTimelineWithDataDescription"
            tasksAndFrames="true"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            contextSwitches="true"
            frameMode="frameDetailed"
            headerMode="rich"
            helpKeyword="configs.tasks_f1330"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="taskTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
    <xsl:variable name="gpuTimelinePane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params
            id="gpuTimelinePane"
            displayName="GPUTimelineWindow"
            globalEventAreaName="CPUUsageOverTime"
            description="HotspotsAndGPUTimelineWindowDescription"
            cpuDataQuery="CPUTime"
            samplePointsQuery="CPUSample"
            samplePointsTooltipQuery="CPUFunctionFull"
            cpuDataCumulativeQuery="CPUTimeAllCoresCumulative"
            taskQuery="Task"
            helpKeyword="configs.graphics_f1337"
            contextSwitches="false"
            gpu="true"
            gpuCounters="{$gpuCounters}"
            cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative"
            rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params
            id="gpuTimelinePane"
            displayName="GPUTimelineWindow"
            description="HotspotsAndGPUTimelineWindowDescription"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            samplePointsQuery="PMUSample/RefTimeEvent"
            samplePointsTooltipQuery="PMUFunctionFull"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            helpKeyword="configs.graphics_f1337"
            gpu="true"
            gpuCounters="{$gpuCounters}"
            cpuOverheadAndSpinTimeQuery="PMUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="PMUOverheadAndSpinTimeAllCoresCumulative"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="gpuTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($gpuTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($gpuTimelinePaneFileName)"/>
    <xsl:variable name="deviceTopDownPane">
      <params groupings="DeiceTopDownGridRowBy"
              id="deviceTopDownPane"
              displayName="DeviceCountersPane"
              description="DeviceCountersPaneDescription"
              columns="MyDeviceDataColumns"
              queryType="topDown"
              groupingItems="no"
              stateVersion="1"/>
    </xsl:variable>
    <xsl:variable name="deviceTopDownFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($deviceTopDownPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($deviceTopDownFileName)"/>
    <xsl:choose>
      <xsl:when test="$isRunssMode">
        <xsl:variable name="srcAsmPaneFileName">
          <xsl:text>config://viewpoint/include/srcasm.xsl?family=CPU&amp;gpu=true&amp;</xsl:text>
        </xsl:variable>
        <xsl:copy-of select="document($srcAsmPaneFileName)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="srcAsmQueryMode">
          <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
          <xsl:choose>
            <xsl:when test="$StacksCollected">
              flatProfile
            </xsl:when>
            <xsl:otherwise>
              bottomUp
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="srcAsmPane">
          <params
            family="PMU"
            gpu="true"
            queryMode="{$srcAsmQueryMode}"
          />
        </xsl:variable>
        <xsl:variable name="srcAsmPaneFileName">
          <xsl:text>config://viewpoint/include/srcasm.xsl?</xsl:text>
          <xsl:for-each select="exsl:node-set($srcAsmPane)//@*">
            <xsl:value-of select="concat(name(), '=', .)"/>
            <xsl:text>&amp;</xsl:text>
          </xsl:for-each>
        </xsl:variable>
        <xsl:copy-of select="document($srcAsmPaneFileName)"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:copy-of select="document('config://viewpoint/include/diagram.xsl')"/>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="isRunssMode" select="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))"/>
    <xsl:choose>
      <xsl:when test="$isRunssMode">
        <vectorQuery id="MyDataColumns">
          <queryRef>/CPUGPUUsageElapsedTime/CPUGPUUsageUtilization</queryRef>
          <xsl:choose>
            <xsl:when test="exsl:ctx('collectWaitsMode', 'off') = 'off'">
              <queryRef>/CPUTimeParent</queryRef>
            </xsl:when>
            <xsl:otherwise>
              <queryRef>/CPUTimeParentExpanded</queryRef>
            </xsl:otherwise>
          </xsl:choose>
          <queryRef>/WaitTime/CPUUsageUtilization</queryRef>
        </vectorQuery>
        <vectorQuery id="ViewpointGUIandCLIColumns">
          <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
          <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
          <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
          <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
          <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
          <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
        </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumnsGPU">
      <queryRef>/GPUComputeGlobalDim</queryRef>
      <queryRef>/GPUComputeLocalDim</queryRef>
      <queryRef>/GPUComputeTaskTime</queryRef>
      <queryRef>/GPUComputeTaskDuration</queryRef>
      <queryRef>/GPUComputeTaskCount</queryRef>
      <queryRef>/GPUComputeSimdWidth</queryRef>
      <queryRef>/GPUEUActive</queryRef>
      <queryRef>/GPUEUStalled</queryRef>
      <queryRef>/GPUEUIdle</queryRef>
      <queryRef>/GPUEuThreadOccupancy</queryRef>
      <queryRef>/GPUEuAvgIpcRate</queryRef>
      <queryRef>/GPUEuFpuBothActive</queryRef>
      <queryRef>/GPUEuSendActive</queryRef>
      <queryRef>/GPUL3ShaderBandwidth</queryRef>
      <queryRef>/GPUL3SamplerBandwidth</queryRef>
      <queryRef>/GPUUntypedReadCoalRatio</queryRef>
      <queryRef>/GPUUntypedWriteCoalRatio</queryRef>
      <queryRef>/GPUTypedReadCoalRatio</queryRef>
      <queryRef>/GPUTypedWriteCoalRatio</queryRef>
      <queryRef>/GPUUntypedMemoryReadBandwidth</queryRef>
      <queryRef>/GPUUntypedMemoryWriteBandwidth</queryRef>
      <queryRef>/GPUSharedLocalMemoryReadBandwidth</queryRef>
      <queryRef>/GPUSharedLocalMemoryWriteBandwidth</queryRef>
      <queryRef>/GPUTypedMemoryReadBandwidth</queryRef>
      <queryRef>/GPUTypedMemoryWriteBandwidth</queryRef>
      <queryRef>/GPUMemoryReadBandwidth</queryRef>
      <queryRef>/GPUMemoryWriteBandwidth</queryRef>
      <queryRef>/GPUSamplerBusy</queryRef>
      <queryRef>/GPUSamplerBottleneck</queryRef>
      <queryRef>/GPUL3MissCount</queryRef>
      <queryRef>/GPUCSThreadIssuedCount</queryRef>
      <queryRef>/GPUShaderBarriers</queryRef>
      <queryRef>/GPUShaderAtomics</queryRef>
      <queryRef>/GPUComputeSVMUsageType</queryRef>
    </vectorQuery>
        <vectorQuery id="MySorting">
          <queryRef>/DataOfInterest</queryRef>
        </vectorQuery>
        <vectorQuery id="DataOfInterest">
          <queryRef>/CPUTime</queryRef>
        </vectorQuery>
        <vectorQuery id="MySrcAsmColumns">
          <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
        </vectorQuery>
        <vectorQuery id="MySrcColumns">
          <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
        </vectorQuery>
        <vectorQuery id="MyAsmColumns">
          <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
        </vectorQuery>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="preciseClockticsCollected" select="exsl:ctx('collectPreciseClockticks', 0)"/>
        <vectorQuery id="MyDataColumns">
          <xsl:choose>
            <xsl:when test="$preciseClockticsCollected">
              <queryRef>/PreciseClockticks</queryRef>
            </xsl:when>
            <xsl:otherwise>
              <queryRef>/CPUGPUUsageElapsedTime/CPUGPUUsageUtilization</queryRef>
              <queryRef>/RefTimeParent</queryRef>
              <queryRef>/InstructionsRetired</queryRef>
            </xsl:otherwise>
          </xsl:choose>
        </vectorQuery>
        <vectorQuery id="MySrcAsmColumns">
          <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
          <xsl:if test="exsl:ctx('analyzeFPU')">
            <queryRef>/FPUUsage</queryRef>
            <queryRef>/SingleFPOperationsPerCycle</queryRef>
            <queryRef>/DoubleFPOperationsPerCycle</queryRef>
            <queryRef>/x87FPOperationsPerCycle</queryRef>
          </xsl:if>
          <queryRef>/QuantumWaitTime</queryRef>
          <queryRef>/QuantumInactiveTime</queryRef>
        </vectorQuery>
        <vectorQuery id="MySrcColumns">
          <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
        </vectorQuery>
        <vectorQuery id="MyAsmColumns">
          <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
        </vectorQuery>
        <vectorQuery id="MySummaryColumnsTail">
          <queryRef>/QuantumSync</queryRef>
          <queryRef>/QuantumWaitAndInactiveTimeExpanded</queryRef>
        </vectorQuery>
        <vectorQuery id="MySummaryColumns">
          <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
          <xsl:if test="not($preciseClockticsCollected)">
            <xsl:choose>
              <xsl:when test="exsl:ctx('isUArchUsageAvailable', 0)">
                <queryRef>/MicroarchitectureUsageExpandedSummary</queryRef>
              </xsl:when>
              <xsl:otherwise>
                <queryRef>/CPI</queryRef>
              </xsl:otherwise>
            </xsl:choose>
            <vectorQueryInsert>/MySummaryColumnsTail</vectorQueryInsert>
          </xsl:if>
        </vectorQuery>
        <vectorQuery id="ViewpointGUIandCLIColumns">
          <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
          <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
          <xsl:if test="not($preciseClockticsCollected)">
            <xsl:choose>
              <xsl:when test="exsl:ctx('isUArchUsageAvailable', 0)">
                <queryRef>/MicroarchitectureUsageExpanded</queryRef>
              </xsl:when>
              <xsl:otherwise>
                <queryRef>/CPI</queryRef>
              </xsl:otherwise>
            </xsl:choose>
            <vectorQueryInsert>/MySummaryColumnsTail</vectorQueryInsert>
          </xsl:if>
          <xsl:if test="exsl:ctx('analyzeFPU')">
            <queryRef>/FPUUsage</queryRef>
            <queryRef>/SingleFPOperationsPerCycle</queryRef>
            <queryRef>/DoubleFPOperationsPerCycle</queryRef>
            <queryRef>/x87FPOperationsPerCycle</queryRef>
          </xsl:if>
          <xsl:if test="exsl:ctx('advancedLoopAnalysis')">
            <queryRef>/IssuedPMUVectInstSet</queryRef>
            <xsl:if test="exsl:IsNonEmptyTableExist('dd_opt_info')">
              <queryRef>/IssuedPMULoopCharacterization</queryRef>
            </xsl:if>
          </xsl:if>
          <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
          <queryRef>/ContextSwitchCountByReason</queryRef>
          <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
          <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
          <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
        </vectorQuery>
        <vectorQuery id="MySorting">
          <queryRef>/DataOfInterest</queryRef>
        </vectorQuery>
        <derivedQuery id="DataOfInterest">
          <queryInherit>/RefTime</queryInherit>
        </derivedQuery>
        <infoQuery id="PMUEventTimeline" displayName="%PMUEventTimeline">
          <queryInherit>/PMUEventType</queryInherit>
        </infoQuery>
        <vectorQuery id="MyDeviceDataColumns">
          <queryRef>/DeviceTimeCounter/DeviceTimeCounterType</queryRef>
          <queryRef>/DeviceCounterCount/DeviceCounterType</queryRef>
          <queryRef>/DeviceTaskTime/DeviceTaskType</queryRef>
          <queryRef>/DeviceTaskCount/DeviceTaskType</queryRef>
        </vectorQuery>
      </xsl:otherwise>
    </xsl:choose>
  </queryLibrary>
</bag>
