<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt">
  <internal
    name='%SystemOverviewViewpointName'
    description='%SystemOverviewViewpointDescription'
    shortName='%SystemOverviewViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <xsl:choose>
        <xsl:when test="exsl:ctx('samplingMode', 'hw')='sw'">
          <queryRef>/NotApplicableQuery</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/RefTime</queryRef>
          <queryRef>/IPTModuleTaskTime</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="bottomUpPane" placeId="bottomArea">
      <xsl:if test="exsl:is_compare_mode()">
        <xsl:attribute name="placeId">resultsArea</xsl:attribute>
      </xsl:if>
    </pane>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="platformTimelinePane" placeId="resultsArea"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <tab id="bottomBottomUpAndPlatformMetrics">
        <displayName>%PlatformTimelineWindow</displayName>
        <masterPane id="bottomUpPane"/>
        <paneToShow id="quickFilterPane"/>
        <xsl:if test="not(exsl:is_compare_mode())">
          <paneToShow id="platformTimelinePane"/>
        </xsl:if>
      </tab>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea"/>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="summaryBlocksParams">
      <params
        querySuffix="PMU"
        contextMode="false"
        packetsType="false"
        cpuHotspotsHrefActivateTabId="bottomBottomUpAndPlatformMetrics"
        resultSummaryHrefActivateTabId="bottomBottomUpAndPlatformMetrics"
        averageBandwidthHrefActivateTabId="bottomBottomUpAndPlatformMetrics"
          />
    </xsl:variable>
    <xsl:variable name="summaryBlocksFileName">
      <xsl:text>config://viewpoint/include/summaryblocks.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryBlocksParams)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="summaryBlocks" select="document($summaryBlocksFileName)"/>
    <html id="summaryPane" displayName="%SummaryWindow">
      <filter boolean:manageGlobalFilter="false"/>
      <event handleList="KnobChangedEvent"/>
      <application name="summary"/>
      <helpKeywordF1>configs.summary_hs</helpKeywordF1>
      <description>%SystemOverviewSummaryWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_summary"/>
      <config>
        <recommendations>
          <recommendation>
            <header>
              <column>/GpuUsageRecommendation</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/IOWaitTimeRecommendation</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/NetworkDevicesPCIETrafficRecommendation</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/AcceleratorsPCIETrafficRecommendation</column>
            </header>
          </recommendation>
        </recommendations>
        <sections>
          <xsl:copy-of select="$summaryBlocks//root/resultSummary/*"/>
          <xsl:choose>
            <xsl:when test="exsl:ctx('collectingMode', 'hwSampling')='hwSampling'">
              <xsl:copy-of select="$summaryBlocks//root/cpuHotspots/*"/>
            </xsl:when>
            <xsl:otherwise>
              <section type="grid" expanded="true" id="TopModuleTasks">
                <header displayName="%TopModuleTasks"/>
                <description displayName="%TopModuleTasksDescription" />
                <grid limit="5">
                  <columns>
                    <column>/IPTModuleTaskTime</column>
                  </columns>
                  <grouping>/IPTModuleModule</grouping>
                  <sorting>/IPTModuleTaskTime</sorting>
                </grid>
              </section>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:copy-of select="$summaryBlocks//root/cpuUsageChart/*"/>
          <xsl:if test="exsl:IsNonEmptyTableExist('dd_gpu_node')">
            <xsl:copy-of select="$summaryBlocks//root/gpuEnginesUsage/*"/>
          </xsl:if>
          <xsl:copy-of select="$summaryBlocks//root/averageBandwidth/*"/>
          <xsl:copy-of select="$summaryBlocks//root/bandwidthUtilizationStatistic/*"/>
          <xsl:copy-of select="$summaryBlocks//root/bandwidthUtilizationChart/*"/>
          <xsl:copy-of select="$summaryBlocks//root/interrupts/*"/>
          <xsl:copy-of select="$summaryBlocks//root/resultInfo/*"/>
        </sections>
        <xsl:copy-of select="$summaryBlocks//root/messages"/>
      </config>
    </html>
    <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              metrics="DataOfInterest"
              groupings="/GenericProcess/GenericThread/Module"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="gridRowBy">
      <xsl:choose>
        <xsl:when test="exsl:ctx('collectingMode', 'hwSampling')='hwSampling'">
          <xsl:text>GPUGridRowBy</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>HWTracingRowBy</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="gridDefaultRowBy">
      <xsl:choose>
        <xsl:when test="exsl:ctx('collectingMode', 'hwSampling')='hwTracing'">
          <xsl:text>/GenericProcess/Module/ModuleTaskFunction</xsl:text>
        </xsl:when>
        <xsl:when test="exsl:IsNonEmptyTableExist('dd_vm_info')">
          <xsl:text>/GenericVirtualMachine/GenericProcess/GenericThread/Function</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>/Function/ParentCallStack</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpPane">
      <params groupings="{$gridRowBy}"
         defaultGrouping="{$gridDefaultRowBy}"
         groupingItems="SOGroupingItems"
         sorting="MySorting"
         errorMessage="ErrorNoDataHotspots"/>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:if test="not(exsl:is_compare_mode())">
      <xsl:variable name="timelineBlocksParams">
        <params
          packetsType="false"
          packetsColorByVM="true"
          showIODevice="false"
            />
      </xsl:variable>
      <xsl:variable name="timelineBlocksFileName">
        <xsl:text>config://viewpoint/include/timelineblocks.xsl?</xsl:text>
        <xsl:for-each select="exsl:node-set($timelineBlocksParams)//@*">
          <xsl:value-of select="concat(name(), '=', .)"/>
          <xsl:text>&amp;</xsl:text>
        </xsl:for-each>
      </xsl:variable>
      <xsl:variable name="timelineblocks" select="document($timelineBlocksFileName)"/>
      <xsl:variable name="gpuCfg" select="document('config://viewpoint/include/gpu.cfg')"/>
      <html id="platformTimelinePane">
        <xsl:attribute name="displayName">%PlatformTimelineWindow</xsl:attribute>
        <helpKeywordF1>intel.phe.configs.platform_view_f1179</helpKeywordF1>
        <description>%PlatformTimelineWindowDescription</description>
        <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <additionalParams boolean:showInDiff="false"/>
        <config>
          <ruler>
            <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
            <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configRulerLayers/*"/>
          </ruler>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configAreas/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='GPUQueueArea']/*"/>
          <xsl:copy-of select="$gpuCfg//graphicsTimelineBottom/area[@id='computing_queue']"/>
          <area headerMode="rich" id="metrics_by_object">
            <rowSet>
              <rowBy>
                <vectorQueryInsert>/PMUTimelineRowBy</vectorQueryInsert>
                <sort>
                  <vectorQueryInsert>/DataOfInterest</vectorQueryInsert>
                </sort>
              </rowBy>
              <columnBy>
                <queryRef>/RefTime</queryRef>
                <queryRef>/PreciseClockticks</queryRef>
                <queryRef>/CPUUserTime</queryRef>
                <queryRef>/TaskTime</queryRef>
                <queryRef>/IPTModuleTaskTime</queryRef>
                <queryRef>/TIPSampleCount</queryRef>
                <queryRef>/CounterMetrics</queryRef>
                <queryRef>/GPUComputeTaskTimeGPUName</queryRef>
                <queryRef>/GPUDXTime</queryRef>
                <queryRef>/RegionTime</queryRef>
                <queryRef>/BarrierInstanceCount</queryRef>
                <queryRef>/SchedTime</queryRef>
                <queryRef>/ContextSwitchCount</queryRef>
                <queryRef>/InterruptCount</queryRef>
                <queryRef>/InterruptRaiseCount</queryRef>
              </columnBy>
              <queryMode>allRows</queryMode>
              <layer>
                <drawBy>
                  <queryRef>/ThreadLifeTime</queryRef>
                </drawBy>
              </layer>
              <layer type="RowInterval" visibleOnLevels="Thread" boolean:showColoringAsLegendItems="true">
                <drawBy>
                  <queryRef>/ContextSwitches</queryRef>
                </drawBy>
                <xsl:if test="not(exsl:ctx('hideContextSwitchesType',0))">
                  <colorBy>
                    <queryRef>/ContextSwitchReason</queryRef>
                  </colorBy>
                </xsl:if>
                <tooltipBy>
                  <queryRef>/ContextSwitchCpu</queryRef>
                  <xsl:if test="not(exsl:ctx('hideContextSwitchesType',0))">
                    <queryRef>/ContextSwitchReason</queryRef>
                  </xsl:if>
                  <queryRef>/ContextSwitchSourceFile</queryRef>
                  <queryRef>/ContextSwitchSourceLine</queryRef>
                </tooltipBy>
                <diveBy>
                  <queryRef>/ContextSwitchCS</queryRef>
                </diveBy>
              </layer>
              <layer>
                <drawBy>
                    <queryRef>/RefTimeByThread</queryRef>
                </drawBy>
              </layer>
              <layer>
                <drawBy>
                  <queryRef>/PMUKernelModeTime</queryRef>
                </drawBy>
              </layer>
              <layer boolean:showText="true" boolean:visible="false">
                <drawBy>
                  <queryRef>/InterruptDisplayDuration</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/Interrupt</queryRef>
                </colorBy>
                <tooltipBy>
                  <queryRef>/Interrupt</queryRef>
                  <queryRef>/InterruptType</queryRef>
                  <queryRef>/InterruptDurationType</queryRef>
                  <queryRef>/InterruptIRQ</queryRef>
                  <queryRef>/InterruptHWContext</queryRef>
                </tooltipBy>
              </layer>
              <xsl:if test="exsl:ctx('collectingMode', 'hwSampling')!='hwTracing'">
                <layer type="EventMarker" boolean:visible="false" displayName="%ClkSample">
                  <drawBy>
                    <queryRef>/PMUSample/RefTimeEvent</queryRef>
                  </drawBy>
                  <tooltipBy>
                    <queryRef>/PMUFunctionFull</queryRef>
                  </tooltipBy>
                </layer>
              </xsl:if>
              <xsl:if test="exsl:ctx('collectingMode', 'none')!='hwSampling'">
                <layer type="EventMarker" boolean:visible="true">
                  <drawBy>
                    <queryRef>/TIPSample</queryRef>
                  </drawBy>
                  <tooltipBy>
                    <queryRef>/IPTTIPModule</queryRef>
                    <queryRef>/IPTTIPFunctionFull</queryRef>
                    <queryRef>/IPTTIPSourceFileAndLine</queryRef>
                  </tooltipBy>
                  <colorBy>
                    <queryRef>/IPTTIPFunction</queryRef>
                  </colorBy>
                </layer>
              </xsl:if>
              <layer type="InstanceCountOverTime">
                <drawBy>
                  <instanceCountQuery>
                    <queryInherit>/GPUUsageForGridRow</queryInherit>
                    <maxEval>exsl:ctx('logicalGPUCount', 0) + 1</maxEval>
                  </instanceCountQuery>
                </drawBy>
              </layer>
              <xsl:copy-of select="$timelineblocks//bag/config[@id='counters']/*"/>
              <xsl:if test="exsl:ctx('collectingMode', 'hwSampling')!='hwTracing'">
                <layer visibleOnLevels="Thread" boolean:showText="true">
                  <drawBy>
                    <queryRef>/TaskHierarchical</queryRef>
                  </drawBy>
                  <tooltipBy>
                    <queryRef>/TaskType</queryRef>
                    <queryRef>/TaskDurationType</queryRef>
                    <queryRef>/TaskEndCallStack</queryRef>
                  </tooltipBy>
                  <colorBy>
                    <queryRef>/TaskType</queryRef>
                  </colorBy>
                  <highlightBy int:groupId="3">
                    <queryRef>/TaskGroupKey</queryRef>
                  </highlightBy>
                </layer>
              </xsl:if>
              <xsl:if test="exsl:ctx('collectingMode', 'none')!='hwSampling'">
                <layer boolean:showText="true">
                  <drawBy>
                    <queryRef>/ModuleTaskHierarchical</queryRef>
                  </drawBy>
                  <tooltipBy>
                    <queryRef>/IPTModuleModule</queryRef>
                    <queryRef>/ModuleTaskFunction</queryRef>
                    <queryRef>/IPTModuleSourceFileAndLine</queryRef>
                  </tooltipBy>
                  <colorBy>
                    <queryRef>/IPTModuleModule</queryRef>
                  </colorBy>
                </layer>
              </xsl:if>
              <layer visibleOnLevels="GPUComputeSubmitThread">
                <drawBy>
                  <queryRef>/GPUComputeTask</queryRef>
                </drawBy>
                <tooltipBy>
                  <queryRef>/GPUComputeTask</queryRef>
                  <queryRef>/GPUComputeTaskPurposeShortName</queryRef>
                  <queryRef>/GPUComputeGlobalDim</queryRef>
                  <queryRef>/GPUComputeLocalDim</queryRef>
                  <queryRef>/GPUComputeSimdWidth</queryRef>
                </tooltipBy>
                <highlightBy int:groupId="2">
                  <queryRef>/GPUComputeTask</queryRef>
                </highlightBy>
                <hatchBy>
                  <queryRef>/GPUComputeTaskPurpose</queryRef>
                </hatchBy>
              </layer>
            </rowSet>
          </area>
          <area headerMode="rich">
            <rowSet displayName="%ContextSwitchArea">
              <layer type="Overtime">
                <drawBy>
                  <queryRef>/ContextSwitchCount</queryRef>
                </drawBy>
              </layer>
            </rowSet>
          </area>
          <area headerMode="rich">
            <rowSet displayName="%KernelEntriesArea">
              <layer type="Overtime">
                <drawBy>
                  <queryRef>/KernelEntriesOvertime</queryRef>
                </drawBy>
              </layer>
            </rowSet>
          </area>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='PageFaultStatArea']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='IOBytesArea']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='cpuUsageByCSArea']/*"/>
          <xsl:copy-of select="$gpuCfg//graphicsTimelineCommonBasic/*"/>
          <xsl:copy-of select="$gpuCfg//cpugpuInteractionTimeline/*"/>
          <xsl:copy-of select="$gpuCfg//graphicsTimelineCommon/*"/>
          <xsl:copy-of select="$gpuCfg//graphicsTimelineOverview/*"/>
          <xsl:copy-of select="$gpuCfg//graphicsTimelineComputeBasic/*"/>
          <xsl:copy-of select="$gpuCfg//graphicsTimelineComputeExtended/*"/>
          <xsl:copy-of select="$gpuCfg//gpuCoreFrequency/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='InboundPCIeBandwidthArea']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='eDRAMBandwidthTimeline']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='bandwidthTimelineAreas']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='aperfMperfFreq']/*"/>
          <area>
            <rowSet displayName="%InterruptCount">
              <layer type="InstanceCountOverTime">
                <drawBy>
                  <queryRef>/InterruptCount</queryRef>
                </drawBy>
              </layer>
            </rowSet>
          </area>
          <area headerMode="rich" id="interrupts">
            <rowSet displayName="%Interrupt">
              <rowBy>
                <queryRef>/GenericInterruptHWContext</queryRef>
                <queryRef>/GenericInterrupt</queryRef>
                <queryRef>/GenericInterruptCore/GenericInterruptHWContext</queryRef>
                <queryRef>/GenericInterruptPackage/GenericInterruptCore/GenericInterruptHWContext</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/InterruptCount</queryRef>
                <queryRef>/InterruptRaiseCount</queryRef>
              </columnBy>
              <layer type="InstanceCountOverTime">
                <drawBy>
                  <queryRef>/InterruptCount</queryRef>
                </drawBy>
              </layer>
              <layer boolean:showText="true">
                <drawBy>
                  <queryRef>/Interrupt</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/Interrupt</queryRef>
                </colorBy>
                <tooltipBy>
                  <queryRef>/Interrupt</queryRef>
                  <queryRef>/InterruptType</queryRef>
                  <queryRef>/InterruptDurationType</queryRef>
                  <queryRef>/InterruptIRQ</queryRef>
                  <queryRef>/InterruptHWContext</queryRef>
                </tooltipBy>
              </layer>
              <layer type="EventMarker" boolean:visible="true">
                <drawBy>
                  <queryRef>/InterruptRaiseMarker</queryRef>
                </drawBy>
                <colorBy>
                  <queryRef>/InterruptRaiseMarker</queryRef>
                </colorBy>
                <tooltipBy>
                  <queryRef>/InterruptRaise</queryRef>
                  <queryRef>/InterruptRaiseType</queryRef>
                  <queryRef>/InterruptRaiseIRQ</queryRef>
                  <queryRef>/InterruptRaiseHwContext</queryRef>
                </tooltipBy>
              </layer>
              <layer type="EventMarker" boolean:visible="false">
                <drawBy>
                  <queryRef>/SlowInterruptMarker/InterruptDurationType[%SlowTask]</queryRef>
                </drawBy>
              </layer>
            </rowSet>
          </area>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='PStateArea']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='CStateArea']/*"/>
          <xsl:copy-of select="$timelineblocks//bag/config[@id='energyConsumption']/*"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="srcAsmPane">
      <params
        family="PMU"
        queryMode="bottomUp"
      />
    </xsl:variable>
    <xsl:variable name="srcAsmPaneFileName">
      <xsl:text>config://viewpoint/include/srcasm.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($srcAsmPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($srcAsmPaneFileName)"/>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <vectorQuery id="MyDataColumns">
      <queryRef>/PMUUKModeTimeParent</queryRef>
      <queryRef>/IPTModuleTaskTimeParent</queryRef>
      <queryRef>/IPTModuleKernelTaskMetrics</queryRef>
    </vectorQuery>
    <vectorQuery id="MySrcAsmColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <queryRef>/InactiveSyncWaitTime</queryRef>
      <queryRef>/PreemptionWaitTime</queryRef>
    </vectorQuery>
    <vectorQuery id="MySrcColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MyAsmColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySummaryColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
      <queryRef>/ContextSwitchCountByReason</queryRef>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
      <queryRef>/InactiveWaitCount/ContextSwitchReason</queryRef>
      <queryRef>/InactiveWaitTime/ContextSwitchReason</queryRef>
      <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
      <queryRef>/InterruptTime</queryRef>
      <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
    </vectorQuery>
    <infoQuery id="ModuleTaskFunction" displayName="%ModuleEntryPoint">
      <queryInherit>/IPTModuleSourceFunction</queryInherit>
    </infoQuery>
    <vectorQuery id="HWTracingRowBy">
      <queryRef>/Module</queryRef>
      <queryRef>/GenericProcess/GenericThread/ModuleTaskFunction</queryRef>
      <queryRef>/GenericProcess/Module/ModuleTaskFunction</queryRef>
      <queryRef>/GenericProcess/GenericThread/Module/ModuleTaskFunction</queryRef>
      <queryRef>/GenericThread/ModuleTaskFunction</queryRef>
      <queryRef>/GenericProcess/GenericThread/Interrupt</queryRef>
      <queryRef>/GenericProcess/Interrupt</queryRef>
      <queryRef>/InterruptType/InterruptDurationType/Interrupt</queryRef>
      <queryRef>/InterruptType/Interrupt</queryRef>
      <queryRef>/TaskDomain/TaskType/Module</queryRef>
      <queryRef>/TaskType/Module</queryRef>
      <queryRef>/FrameDomain/Frame/Module</queryRef>
      <queryRef>/FrameDomain/FrameType/Module</queryRef>
      <queryRef>/FrameDomain/Module</queryRef>
      <queryRef>/FrameDomain/FrameType/Frame/Module</queryRef>
      <queryRef>/FrameDomain/FrameType/Frame/GenericThread/Module</queryRef>
      <queryRef>/FrameDomain/FrameType/Frame/TaskDomain/TaskType/Module</queryRef>
    </vectorQuery>
    <vectorQuery id="SOGroupingItems">
      <queryRef>/HWContext</queryRef>
      <queryRef>/GenericCore</queryRef>
    </vectorQuery>
    <vectorQuery id="MySorting">
      <queryRef>/DataOfInterest</queryRef>
    </vectorQuery>
    <vectorQuery id="DataOfInterest">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
    </vectorQuery>
    <infoQuery id="ModuleTaskHierarchical" displayName="%Module">
      <dbPath>ipt_module_data::dd_sample</dbPath>
      <displayDbPathSuffix>callsite.bottom_user_cs.code_loc.mod_seg.mod_file.bin_name</displayDbPathSuffix>
      <displayAttributes>
        <timelineFormat>hierarchical</timelineFormat>
        <timelineIntervalType>hierarchical</timelineIntervalType>
        <timelineIconType>duration</timelineIconType>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="TIPSample" displayName="%CPUSample">
      <dbPath>ipt_tip_data::dd_sample</dbPath>
      <displayAttributes>
        <align>bottom</align>
        <marker>end</marker>
      </displayAttributes>
    </infoQuery>
    <instanceCountQuery id="TIPSampleCount" displayName="%CPUSampleCount">
      <instanceDbTable>ipt_tip_data::dd_sample</instanceDbTable>
      <instanceBandTable>sched_and_counter_metrics</instanceBandTable>
    </instanceCountQuery>
    <instanceCountQuery id="IPTModuleTaskCount">
      <instanceDbTable>ipt_module_data::dd_sample</instanceDbTable>
      <instanceBandTable>sched_and_counter_metrics</instanceBandTable>
    </instanceCountQuery>
    <derivedQuery id="IPTModuleUserTaskTime" displayName="%CPUUserModeTime">
      <description>%CPUUserModeTimeDescription</description>
      <valueType>time</valueType>
      <valueEval><![CDATA[ query("/IPTModuleTaskTime/IPTModuleModuleFileIsKernel[%False]") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="IPTModuleKernelTaskTime" displayName="%CPUKernelModeTime">
      <description>%CPUKernelModeTimeDescription</description>
      <valueType>time</valueType>
      <valueEval><![CDATA[ query("/IPTModuleTaskTime/IPTModuleModuleFileIsKernel[%True]") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="IPTModuleUnknownTaskTime" displayName="%CPUUnknownTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ query("/IPTModuleTaskTime") - query("/IPTModuleUserTaskTime") - query("/IPTModuleKernelTaskTime") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="IPTModuleTaskTimeParent" displayName="%RefTime">
      <valueEval><![CDATA[ query("/IPTModuleTaskTime") ]]></valueEval>
      <valueType>time</valueType>
      <description>%RefTimeDescription</description>
      <expand>
        <vectorQuery id="IPTModuleTaskTimeExpanded">
          <derivedQuery displayName ="%CPUUserModeTimeShort">
            <queryInherit>/IPTModuleUserTaskTime</queryInherit>
          </derivedQuery>
          <derivedQuery displayName ="%CPUKernelModeTimeShort">
            <queryInherit>/IPTModuleKernelTaskTime</queryInherit>
          </derivedQuery>
          <derivedQuery displayName ="%CPUUnknownTimeShort">
            <queryInherit>/IPTModuleUnknownTaskTime</queryInherit>
          </derivedQuery>
        </vectorQuery>
      </expand>
      <displayAttributes>
        <sortType>descending</sortType>
        <selfFormat>time</selfFormat>
        <boolean:expand>true</boolean:expand>
        <boolean:canBeDoi>true</boolean:canBeDoi>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="IPTModuleKernelTaskCount" displayName="%IPTModuleKernelTaskCount">
      <description>%IPTModuleKernelTaskCountDescription</description>
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/IPTModuleTaskCount/IPTModuleModuleFileIsKernel[%True]") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="KernelEntriesOvertime" displayName="%KernelEntriesOvertime">
      <queryInherit>/IPTModuleKernelTaskCount</queryInherit>
      <displayAttributes>
        <selfFormat>count</selfFormat>
        <timelineFormat>area</timelineFormat>
        <timelineGraphColor>237,28,36</timelineGraphColor>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="IPTModuleKernelTaskFrequency" displayName="%IPTModuleKernelTaskFrequency">
      <description>%IPTModuleKernelTaskFrequencyDescription</description>
      <valueType>double</valueType>
      <valueEval><![CDATA[ query("/IPTModuleKernelTaskCount") / query("/TotalElapsedTime") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="IPTModuleKernelTaskMetrics" displayName="%IPTModuleKernelTaskMetrics">
      <queryInherit>/IPTModuleKernelTaskCount</queryInherit>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
      </displayAttributes>
      <expand>
        <vectorQuery id="IPTModuleKernelTaskMetricsVector">
          <queryRef>/IPTModuleKernelTaskCount</queryRef>
          <queryRef>/IPTModuleKernelTaskFrequency</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
  </queryLibrary>
</bag>
