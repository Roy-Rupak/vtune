<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%SNBBandwidthViewpointName'
    description='%SNBBandwidthViewpointDescription'
    shortName='%SNBBandwidthViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>28</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU','') = 'sniper'">
          <queryRef>/SniperMemoryAccessDataColumns</queryRef>
          <xsl:if test="exsl:IsNonEmptyTableExist('memory_object_data') = 0">
            <xsl:value-of select="exsl:error('%ThisViewpointIsNotApplicable')"/>
          </xsl:if>
       </xsl:when>
        <xsl:otherwise>
          <queryRef>/OvertimeBandwidth</queryRef>
          <queryRef>/QPIBandwidthGB</queryRef>
          <queryRef>/AvgLatency</queryRef>
          <xsl:if test="exsl:IsNonEmptyTableExist('memory_object_data')">
            <queryRef>/PMULoads</queryRef>
            <queryRef>/LLCMissCount</queryRef>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="bottomUpPane" placeId="bottomArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="timelinePane" placeId="resultsArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="taskTimelinePane" placeId="resultsArea"/>
    <xsl:variable name="StacksCollected" select="(string($collectMemObjects) != 'false')"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <tab id="bottomUp">
        <paneToShow id="timelinePane"/>
        <masterPane id="bottomUpPane"/>
        <paneToShow id="quickFilterPane"/>
        <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
      </tab>
      <xsl:if test="not(exsl:is_compare_mode())">
        <tab id="tasks">
          <masterPane id="taskTimelinePane"/>
          <paneToShow id="quickFilterPane"/>
          <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
        </tab>
      </xsl:if>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="timelineblocks" select="document('config://viewpoint/include/timelineblocks.xsl')"/>
    <xsl:variable name="StacksCollected" select="(string($collectMemObjects) != 'false')"/>
      <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              groupings ="/Process/Thread/Module"
              showCalleeAttributionKnob="$StacksCollected"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="stackPane">
      <params layers="PMUMemoryObjectAlloc"/>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="gridDefaultGrouping">
      <xsl:choose>
        <xsl:when test="(string($collectMemObjects) != 'false')">
          <xsl:text>/Function/PMUMemoryObject/PMUMemoryObjectStack</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>no</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpPane">
      <params description="BandwidthBottomUpWindowDescription"
              errorMessage="ErrorNoDataEBS"
              groupings="PMUGridRowBy"
              defaultGrouping="{$gridDefaultGrouping}"
              sorting="MySorting"
              helpKeyword="intel.phe.configs.bottomup_pane_memory"/>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="summaryPane">
      <params description="BandwidthSummaryWindowDescription"
              resultSummaryColumns="MySummaryColumns"
              showBandwidthUtilization="true"
              showMemObjects="true"
              helpKeyWord="configs.summary_mem_usage_f1245"
              showLatencyChart="true"
              showRecommendations="true"/>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="timelinePaneAttributes">
      <helpKeywordF1>configs.timeline_f1106</helpKeywordF1>
      <description>%BandwidthTimelineWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_timeline"/>
    </xsl:variable>
    <xsl:variable name="timelinePaneConfig">
      <ruler>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='mark']/configRulerLayers/*"/>
        <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimpleNoRegions']/configRulerLayers/*"/>
      </ruler>
      <xsl:copy-of select="$timelineblocks//bag/config[@id='eDRAMBandwidthTimeline']/*"/>
      <xsl:copy-of select="$timelineblocks//bag/config[@id='bandwidthTimelineAreas']/*"/>
      <xsl:copy-of select="$timelineblocks//bag/config[@id='QPIBandwidthTimeline']/*"/>
      <xsl:copy-of select="$timelineblocks//bag/config[@id='frameSimple']/configAreas/*"/>
    </xsl:variable>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelinePane" displayName="%TimelineWindow">
        <xsl:copy-of select="$timelinePaneAttributes"/>
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timelinePaneConfig"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="taskTimelinePane">
      <params
        id="taskTimelinePane"
        displayName="TaskTimelineWithData"
        description="TaskTimelineWithDataDescription"
        tasksAndFrames="true"
        globalEventAreaName="RefTime"
        cpuDataQuery="RefTime"
        cpuDataByThreadQuery="RefTimeByThread"
        cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
        contextSwitches="true"
        cat="true"
        frameMode="frameDetailed"
        headerMode="rich"
        helpKeyword="configs.tasks_f1330"
      />
    </xsl:variable>
    <xsl:variable name="taskTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
    <srcAsm id="srcAsmPane" int:stateVersion="2">
      <asmWindow>
        <helpKeywordF1>configs.find_problem_asm_pane_f1041</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <vectorQueryInsert>/PMUAsmPaneRowBy</vectorQueryInsert>
              </rowBy>
              <columnBy>
                <queryRef>/PMUSourceLine</queryRef>
                <queryRef>/PMUAssemblyContent</queryRef>
                <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </asmWindow>
      <srcWindow>
        <helpKeywordF1>configs.find_problem_src_pane_f1040</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <queryRef>/PMUSourceLineFlat</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/PMUSourceContent</queryRef>
                <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </srcWindow>
      <fileSearchWindow>
        <helpKeywordF1>configs.find_file_type_f1072</helpKeywordF1>
      </fileSearchWindow>
      <doiBy>
        <queryRef>/DataOfInterest</queryRef>
      </doiBy>
    </srcAsm>
  </paneLibrary>
  <queryLibrary>
    <vectorQuery id="MySummaryColumns">
      <queryRef>/RefTime</queryRef>
      <vectorQueryInsert>/MemoryAccessSummaryColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MyDataColumns">
      <queryRef>/RefTime</queryRef>
      <vectorQueryInsert>/MemoryAccessDataColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
      <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
      <queryRef>/AvgL3CATPercentageAvailability</queryRef>
      <queryRef>/AvgL2CATPercentageAvailability</queryRef>
      <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySorting">
      <queryRef>/DataOfInterest</queryRef>
    </vectorQuery>
    <derivedQuery id="DataOfInterest">
       <queryInherit>/RefTime</queryInherit>
    </derivedQuery>
  </queryLibrary>
</bag>
