<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%PerfSnapshotViewpointName'
    description='%PerfSnapshotViewpointDescription'
    shortName='%PerfSnapshotViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>39</int:contentVersion>
  </internal>
 <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="summaryPane" placeId="resultsArea"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <defaultTab id="summary"/>
    </displayLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="summaryBlocksParams">
      <params
        querySuffix="PMU"
        contextMode="false"
        packetsType="false"
          />
    </xsl:variable>
    <xsl:variable name="summaryBlocksFileName">
      <xsl:text>config://viewpoint/include/summaryblocks.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryBlocksParams)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="summaryBlocks" select="document($summaryBlocksFileName)"/>
    <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
    <xsl:variable name="isFlopsAvailable" select="$pmuCommon//variables/isFlopsAvailable"/>
    <html id="summaryPane" displayName="%SummaryWindow">
      <filter boolean:manageGlobalFilter="false"/>
      <event handleList="KnobChangedEvent"/>
      <application name="summary"/>
      <subPage href="summary-survey"/>
      <helpKeywordF1>configs.summary_hs</helpKeywordF1>
      <description>%SystemOverviewSummaryWindowDescription</description>
      <icon file="client.dat#zip:images.xrc" image="tab_summary"/>
      <config>
        <survey
          Hs="%HotspotsAtypeName"
          MemCons="%MemoryConsumptionATypeName"
          Thr="%ThreadingAtypeName"
          SO="%SystemOverviewAtypeName"
          PP="%VPPpreviewAtypeName"
          UE="%MicroarchitectureExplorationAtypeName"
          MA="%MemoryAccessAtypeName"
          InOut="%IOAtypeName"
          GPUHS="%GpuComputeMediaHotspotsAtypeName"
          GPUOffload="%GpuOffloadAtypeName"
          HPC="%HPCPerfCharAtypeName"
          FPGA="%FPGAInteractionAtypeName"
          >
          <xsl:choose>
            <xsl:when test="exsl:ctx('shortCollectionMux', 0)">
              <shortCollection>true</shortCollection>
            </xsl:when>
            <xsl:otherwise>
              <shortCollection>false</shortCollection>
            </xsl:otherwise>
          </xsl:choose>
        </survey>
        <recommendations sort="true">
          <recommendation>
            <header>
              <column>/shortCollectionMuxRecommendation</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationHs</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationUE</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationMA</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationThr</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationHPC</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationGPUHS</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationGPUOffload</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationInOut</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationSO</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationPP</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationFPGA</column>
            </header>
          </recommendation>
          <recommendation>
            <header>
              <column>/SurveyRecommendationMemCons</column>
            </header>
          </recommendation>
        </recommendations>
        <sections>
          <section type="tree" id="GeneralSurvey">
            <header>
              <column>/TotalElapsedTime</column>
            </header>
            <tree valueAlign="left">
              <columns>
                <column>/IPC</column>
                <xsl:if test="$isFlopsAvailable = 'true'">
                  <column>/GSPFLOPS</column>
                  <column>/GDPFLOPS</column>
                  <column>/GX87FLOPS</column>
                </xsl:if>
                <column>/AverageFrequency</column>
              </columns>
            </tree>
          </section>
          <section type="tree" expanded="true" id="ParallelizationSurvey">
            <header>
              <column>/AverageCPUUtilizationOpenMPBigCoresSummaryString</column>
            </header>
            <tree valueAlign="right">
              <columns>
                <column>/AveragePhysicalCPUUtilizationOpenMPSummaryString</column>
              </columns>
            </tree>
          </section>
          <section type="tree" expanded="true" id="MicroarchitectureSurvey">
            <header>
              <column>/UArchEfficiency</column>
            </header>
            <tree valueAlign="right">
              <columns>
                <column>/RetiredPipelineSlots</column>
                <column>/FrontendBoundPipelineSlots</column>
                <column>/BackendBoundGroupExpandedSurvey</column>
                <column>/CancelledPipelineSlots</column>
              </columns>
            </tree>
          </section>
          <section type="tree" expanded="true" id="MemorySurvey">
            <header>
              <column>/MemBound</column>
            </header>
            <tree valueAlign="right">
              <columns>
                <column>/L1BoundNonGE</column>
                <column>/L2Bound</column>
                <column>/L3Bound</column>
                <column>/DRAMBoundGroupMABigCoresSummary</column>
                <column>/StoresBound</column>
                <column>/RemoteToLocalPercent</column>
                <xsl:if test="exsl:ctx('collectMemBandwidth', 0)">
                  <xsl:choose>
                    <xsl:when test="(exsl:ctx('PMU') = 'snbep') or (exsl:ctx('PMU') = 'ivytown') or
                                    (exsl:ctx('PMU') = 'haswell_server') or (exsl:ctx('PMU') = 'broadwell_server')">
                      <column>/QPIBandwidthBoundUncore</column>
                    </xsl:when>
                    <xsl:otherwise>
                      <column>/UPIUtilizationBound</column>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:if>
              </columns>
            </tree>
          </section>
          <section type="tree" id="VectorizationSurvey">
            <header>
              <column>/VectorizationSummary</column>
            </header>
            <tree valueAlign="left" boolean:highlightColumnsWithExpansion="false" boolean:takeExpansionFromHeaderColumn="true">
            </tree>
          </section>
          <section type="tree" expanded="true" id="IOSurvey">
            <header displayName="I/O"></header>
            <tree valueAlign="right">
              <columns>
                <column>/PCIeBandwidthBoundUncore</column>
              </columns>
            </tree>
          </section>
          <section type="tree" expanded="true" id="GPUSurvey">
            <header>
              <column>/GPUTimeWhenBusyCounting</column>
            </header>
            <tree valueAlign="right">
              <columns>
                <column>/GPUEUAvgUtilizationWhenBusyCounting</column>
                <column>/GPUHPCEuAvgIpcRate</column>
                <column>/GPUEUStateGridSection</column>
                <column>/GPUEuThreadOccupancyWhenBusyCounting</column>
              </columns>
            </tree>
          </section>
          <xsl:copy-of select="$summaryBlocks//root/resultInfo/*"/>
        </sections>
      </config>
    </html>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
    <xsl:variable name="isFlopsAvailable" select="$pmuCommon//variables/isFlopsAvailable"/>
    <vectorQuery id="BackendBoundGroupExpandedSurvey">
        <derivedQuery id="BackendBoundGroupSurvey">
            <queryInherit>/BackendBound</queryInherit>
            <displayAttributes>
                <boolean:expand>false</boolean:expand>
                <boolean:allowCollapse>true</boolean:allowCollapse>
            </displayAttributes>
            <expand>
                <vectorQuery id="BackendBoundSurvey">
                    <queryRef>/MemBound</queryRef>
                    <queryRef>/CoreBound</queryRef>
                </vectorQuery>
            </expand>
        </derivedQuery>
    </vectorQuery>
    <derivedQuery id="SurveyRecommendationHs">
      <queryInherit>/SurveyMetricHs</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceHs") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationMemCons">
      <queryInherit>/SurveyMetricMemCons</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceMemCons") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationUE">
      <queryInherit>/SurveyMetricUE</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceUE") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationMA">
      <queryInherit>/SurveyMetricMA</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceMA") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationThr">
      <queryInherit>/SurveyMetricThr</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceThr") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationHPC">
      <queryInherit>/SurveyMetricHPC</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceHPC") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationGPUHS">
      <queryInherit>/SurveyMetricGPUHS</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceGPUHS") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationGPUOffload">
      <queryInherit>/SurveyMetricGPUOffload</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceGPUOffload") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationInOut">
      <queryInherit>/SurveyMetricInOut</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceInOut") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationSO">
      <queryInherit>/SurveyMetricSO</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceSO") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationPP">
      <queryInherit>/SurveyMetricPP</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidencePP") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyRecommendationFPGA">
      <queryInherit>/SurveyMetricFPGA</queryInherit>
      <valueEval><![CDATA[ query("/SurveyConfidenceFPGA") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricHs" displayName="%HotspotsAtypeName">
      <xsl:choose>
        <xsl:when test="exsl:ctx('targetType', '') = 'launch'">
          <valueEval>1.0</valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>0.0</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>ratio</valueType>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityHs") ) ]]></issueEval>
      <issueText>%SurveyRecommendationHs</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageHs") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityHs">
      <valueEval><![CDATA[query("/SurveyMetricHs") > 0 ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceHs">
      <valueEval><![CDATA[ query("/SurveyMetricHs") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageHs">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageHs"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricMemCons" displayName="%MemoryConsumptionATypeName">
      <valueType>ratio</valueType>
      <valueEval>0</valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityMemCons") ) ]]></issueEval>
      <issueText>%SurveyMessageMemCons</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageMemCons") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceMemCons">
      <valueEval>0</valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityMemCons">
      <valueEval><![CDATA[$FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageMemCons">
      <valueType>string</valueType>
      <valueEval><![CDATA["%MemoryConsumptionATypeDescription"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricUE" displayName="%MicroarchitectureExplorationAtypeName">
      <queryInherit>/UArchEfficiency</queryInherit>
      <valueEval><![CDATA[queryOptional("/UArchEfficiency")]]></valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityUE") ) ]]></issueEval>
      <issueText>%SurveyRecommendationUE</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageUE") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityUE">
      <valueEval><![CDATA[( (query("/SurveyMemBoundOnly") < 1) && (query("/SurveyMetricUE") < 0.7) ) ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceUE">
      <queryInherit>/UArchEfficiency</queryInherit>
      <valueEval><![CDATA[query("/SurveyMetricUE") < 0.7 ? 0.7 - query("/SurveyMetricUE") : 0]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageUE">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageUEPart1" + "(" + %#(query("/SurveyMetricUE")) + ") " + "%SurveyMessageUEPart2"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricMA" displayName="%MemoryAccessAtypeName">
      <queryInherit>/MemBound</queryInherit>
      <valueEval><![CDATA[queryOptional("/MemBound")]]></valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityMA") ) ]]></issueEval>
      <issueText>%SurveyRecommendationMA</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageMA") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyMemBoundOnly">
      <valueType>bool</valueType>
      <valueEval><![CDATA[( (query("/SurveyMetricMA") > 0.1) && (query("/FrontendBoundPipelineSlots") <= 0.15) && (query("/CancelledPipelineSlots") <= 0.1) && (query("/CoreBound") <= 0.1) ) ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityMA">
      <valueEval><![CDATA[query("/SurveyMetricMA") > 0.1 ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceMA">
      <queryInherit>/MemBoundForHPCPC</queryInherit>
      <valueEval><![CDATA[query("/SurveyMemBoundOnly") ? (1 : (query("/SurveyMetricMA") > 0.1 ? query("/SurveyMetricMA") - 0.1 : 0))]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageMA">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageMAPart1" + " (" + %#(query("/SurveyMetricMA")) + "). " + "%SurveyMessageMAPart2"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricThr" displayName="%ThreadingAtypeName">
      <queryInherit>/ParallelEfficiency</queryInherit>
      <valueEval><![CDATA[query("/AverageCPUUtilizationOpenMP")]]></valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityThr") ) ]]></issueEval>
      <issueText>%ParallelEfficiencyRecommendation</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageThr") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityThr">
      <valueEval><![CDATA[query("/SurveyMetricThr") < 0.8 ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceThr">
      <queryInherit>/ParallelEfficiency</queryInherit>
      <valueEval><![CDATA[query("/SurveyMetricThr") < 0.8 ? 0.8 - query("/SurveyMetricThr") : 0]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageThr">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageThrPart1" + "(" + %#(query("/SurveyMetricThr")) + ") " + "%SurveyMessageThrPart2"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricHPC" displayName="%HPCPerfCharAtypeName">
      <queryInherit>/Vectorization</queryInherit>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('mpiRank', -1)) > -1">
          <valueEval>1.0</valueEval>
        </xsl:when>
        <xsl:when test="$isFlopsAvailable != 'true'">
          <valueEval>0.0</valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[query("/Vectorization")]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityHPC") ) ]]></issueEval>
      <issueText>%SurveyRecommendationHPC</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageHPC") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityHPC">
      <xsl:choose>
        <xsl:when test="(exsl:ctx('mpiRank', -1)) > -1">
          <valueEval><![CDATA[$TRUE]]></valueEval>
        </xsl:when>
        <xsl:when test="$isFlopsAvailable = 'true'">
          <valueEval><![CDATA[((query("/SPFLOPSOfTotal") + query("/DPFLOPSOfTotal")) > 0.25) && (query("/SurveyMetricHPC") < 0.5) ? $TRUE : $FALSE]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[$FALSE]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceHPC">
      <queryInherit>/Vectorization</queryInherit>
      <valueEval><![CDATA[query("/SurveyApplicabilityHPC") ? 0.5 - query("/SurveyMetricHPC") : 0]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageHPC">
      <valueType>string</valueType>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('mpiRank', -1)) > -1">
          <valueEval><![CDATA["%SurveyMessageHPCMPI"]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA["%SurveyMessageHPCPart1" + "("+ %#(query("/SurveyMetricHPC")) + ") " + "%SurveyMessageHPCPart2"]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="SurveyMetricInOut" displayName="%IOAtypeName">
      <valueType>ratio</valueType>
      <valueEval>0</valueEval>
      <issueEval><![CDATA[query("/SurveyApplicabilityInOut")]]></issueEval>
      <issueText>%SurveyRecommendationInOut</issueText>
      <displayEval><![CDATA[query("/SurveyMessageInOut")]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityInOut">
      <valueEval><![CDATA[$FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceInOut">
      <valueEval>0</valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageInOut">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageInOutPart1" + " ("+ %#(query("/SurveyMetricInOut")) + ") " + "%SurveyMessageInOutPart2"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricSO" displayName="%SystemOverviewAtypeName">
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('targetType', '') = 'system'">
          <valueEval>1.0</valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>0.0</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilitySO") ) ]]></issueEval>
      <issueText>%SurveyRecommendationSO</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageSO") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilitySO">
      <valueEval><![CDATA[query("/SurveyMetricSO") > 0 ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceSO">
      <valueEval><![CDATA[query("/SurveyMetricSO")]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageSO">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageSO"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricPP" displayName="%VPPpreviewAtypeName">
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('targetType', '') = 'system'">
          <valueEval>1.0</valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>0.0</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityPP") ) ]]></issueEval>
      <issueText>%SurveyRecommendationPP</issueText>
      <displayEval><![CDATA[ query("/SurveyMessagePP") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityPP">
      <valueEval><![CDATA[query("/SurveyMetricPP") > 0 ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidencePP">
      <valueEval><![CDATA[query("/SurveyMetricPP")]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessagePP">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessagePP"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricGPUHS" displayName="%GpuProfilingExpHotspotsAtypeName">
      <queryInherit>/GPUEUAvgUtilization</queryInherit>
      <valueEval><![CDATA[queryOptional("/GPUEUAvgUtilizationWhenBusyCounting")]]></valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityGPUHS") ) ]]></issueEval>
      <issueText>%SurveyRecommendationGPUHS</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageGPUHS") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityGPUHS">
      <valueEval><![CDATA[query("/SurveyMetricGPUOffload") > 0.8 ? (query("/SurveyMetricGPUHS") < 0.7 ? $TRUE : $FALSE) : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceGPUHS">
      <valueEval><![CDATA[query("/SurveyApplicabilityGPUHS") ? 0.7 - query("/SurveyMetricGPUHS") : 0]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageGPUHS">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageGPUHSPart1" + "(" + %#(query("/SurveyMetricGPUHS")) + "). " + "%SurveyMessageGPUHSPart2"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricGPUOffload" displayName="%CpuGpuInteractionAtypeName">
      <queryInherit>/GPUUsageForHPCPC</queryInherit>
      <valueEval><![CDATA[queryOptional("/GPUTimeWhenBusyCounting")]]></valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityGPUOffload") ) ]]></issueEval>
      <issueText>%SurveyRecommendationGPUOffload</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageGPUOffload") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityGPUOffload">
      <valueEval><![CDATA[((query("/SurveyMetricGPUOffload") > 0.5) && (query("/SurveyMetricGPUOffload") < 0.8)) ? $TRUE : $FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceGPUOffload">
      <valueEval><![CDATA[query("/SurveyApplicabilityGPUOffload") ? 0.8 - query("/SurveyMetricGPUOffload") : 0]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageGPUOffload">
      <valueType>string</valueType>
      <valueEval><![CDATA["%SurveyMessageGPUOffloadPart1" + "(" + %#(query("/SurveyMetricGPUHS")) + ") " + "%SurveyMessageGPUOffloadPart2"]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMetricFPGA" displayName="%FPGAInteractionAtypeName">
      <valueType>ratio</valueType>
      <valueEval>0</valueEval>
      <issueEval><![CDATA[ ( query("/SurveyApplicabilityFPGA") ) ]]></issueEval>
      <issueText>%SurveyMessageFPGA</issueText>
      <displayEval><![CDATA[ query("/SurveyMessageFPGA") ]]></displayEval>
    </derivedQuery>
    <derivedQuery id="SurveyApplicabilityFPGA">
      <valueEval><![CDATA[$FALSE]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyConfidenceFPGA">
      <valueEval><![CDATA[query("/SurveyMetricFPGA")]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SurveyMessageFPGA">
      <valueType>string</valueType>
      <valueEval><![CDATA["%FPGAInteractionAtypeDescription"]]></valueEval>
    </derivedQuery>
  </queryLibrary>
</bag>
