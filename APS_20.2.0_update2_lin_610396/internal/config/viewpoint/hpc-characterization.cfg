<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%OpenMPHotspotsViewpointName'
    description='%OpenMPHotspotsViewpointDescription'
    shortName='%OpenMPHotspotsViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>12</int:contentVersion>
  </internal>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData>
      <queryRef>/RefTime</queryRef>
    </requiredData>
    <pane id="bottomUpPane" placeId="resultsArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="timelinePane" placeId="bottomArea"/>
    <pane id="histogramPane" placeId="sideArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="topDownPane" placeId="resultsArea"/>
    <pane id="callerCalleePane" placeId="resultsArea"/>
    <xsl:variable name="stacksCollected" select="(string(exsl:ctx('enableStackCollection')) != 'false') or (string(exsl:ctx('enableVTSSCollection')) != 'false') or (string(exsl:ctx('collectSamplesMode')) = 'stack') or (string(exsl:ctx('collectWaitsMode')) = 'stack')"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <xsl:if test="not(exsl:ctx('useCountingMode', 0) or exsl:ctx('useAggregatedCounting', 0))">
        <tab id="bottomUp">
          <masterPane id="bottomUpPane"/>
          <paneToShow id="timelinePane"/>
          <paneToShow id="histogramPane"/>
          <paneToShow id="quickFilterPane"/>
          <xsl:if test="$stacksCollected"><paneToShow id="stackPane"/></xsl:if>
        </tab>
        <xsl:if test="$stacksCollected">
          <tab id="flatProfile">
            <masterPane id="callerCalleePane"/>
            <paneToShow id="quickFilterPane"/>
          </tab>
        </xsl:if>
        <xsl:if test="$stacksCollected">
          <tab id="topDown">
            <masterPane id="topDownPane"/>
            <paneToShow id="timelinePane"/>
            <paneToShow id="histogramPane"/>
            <paneToShow id="quickFilterPane"/>
            <paneToShow id="stackPane"/>
          </tab>
        </xsl:if>
      </xsl:if>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
       <xsl:if test="$stacksCollected"><paneToShow id="stackPane"/></xsl:if>
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              metrics="PMUUserTime"
              groupings ="/Process/Module"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="stackPane">
      <params layers="PMU/ContextSwitch"/>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="bottomUpPane">
      <params description="LightweightHotspotsBottomUpWindowDescription"
              errorMessage="ErrorNoDataEBS"
              groupings="MyRowBy"
              sorting="MySorting"
              stateVersion="2"/>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="callerCalleePane">
      <params description="LightweightHotspotsCallerCalleeWindowDescription"/>
    </xsl:variable>
    <xsl:variable name="callerCalleeFileName">
      <xsl:text>config://viewpoint/include/caller-callee.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($callerCalleePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($callerCalleeFileName)/root/*"/>
    <xsl:variable name="topDownPane">
      <params groupings="TopDownGridRowBy"
              sorting="MySorting"
              errorMessage="ErrorNoDataEBS"
              id="topDownPane"
              displayName="TopDownTreeWindow"
              description="PMUEventsTopDownTreeWindowDescription"
              helpKeyword="configs.interpret_calltree_f1030"
              queryType="topDown"
              groupingItems="no"
              stateVersion="2"/>
    </xsl:variable>
    <xsl:variable name="topDownFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($topDownPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($topDownFileName)"/>
    <xsl:variable name="summaryPane">
      <params description="LightweightHotspotsSummaryWindowDescription"
              querySuffix="PMU"
              cpuColumns="SummaryCPUColumns"
              helpKeyWord="configs.summary_hpc"
              />
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summaryhpc.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="histogramPane">
      <params id="histogramPane"
              contextMode="true"
              displayName="HistogramWindow"
              description="HistogramWindowDescription"
              querySuffix="PMU"
              cpuColumns="PropertyCPUColumns"
              showResultInfo="false"/>
    </xsl:variable>
    <xsl:variable name="histogramFileName">
      <xsl:text>config://viewpoint/include/summaryhpc.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($histogramPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($histogramFileName)"/>
    <xsl:variable name="timelinePane">
      <params
        id="timelinePane"
        displayName="TimelineWindow"
        description="LightweightHotspotsTimelineWindowDescription"
        globalEventAreaName="RefTime"
        cpuDataQuery="RefTime"
        samplePointsQuery="PMUSample/RefTimeEvent"
        samplePointsTooltipQuery="PMUFunctionFull"
        samplePointsLayerName="ClkSample"
        cpuDataByThreadQuery="RefTimeByThread"
        cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
        helpKeyword="configs.timeline_f1106"
        cpuOverheadAndSpinTimeQuery="PMUOverheadAndSpinTimeCapped"
        cpuOverheadAndSpinTimeCumulativeQuery="PMUOverheadAndSpinTimeAllCoresCumulative"
        openmpAnalysis="true"
        headerMode="super_tiny"
      />
    </xsl:variable>
    <xsl:variable name="timelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($timelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($timelinePaneFileName)"/>
    <srcAsm id="srcAsmPane" int:stateVersion="3">
      <asmWindow>
        <helpKeywordF1>configs.find_problem_asm_pane_f1041</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <vectorQueryInsert>/PMUAsmPaneRowBy</vectorQueryInsert>
              </rowBy>
              <columnBy>
                <queryRef>/PMUSourceLine</queryRef>
                <queryRef>/PMUAssemblyContent</queryRef>
                <vectorQueryInsert>/MyAsmColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </asmWindow>
      <srcWindow>
        <helpKeywordF1>configs.find_problem_src_pane_f1040</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <queryRef>/PMUSourceLineFlat</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/PMUSourceContent</queryRef>
                <vectorQueryInsert>/MySrcColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </srcWindow>
      <fileSearchWindow>
        <helpKeywordF1>configs.find_file_type_f1072</helpKeywordF1>
      </fileSearchWindow>
      <doiBy>
        <queryRef>/DataOfInterest</queryRef>
      </doiBy>
    </srcAsm>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <vectorQuery id = "SummaryCPUColumns">
      <xsl:if test="(exsl:ctx('openmpProcessCount') = 1)">
        <derivedQuery id="ExpandedProcessSerialTimeAndPercentElapsedAsString">
          <queryInherit>/ProcessSerialTimeShort</queryInherit>
          <valueEval><![CDATA[ t#query("/ProcessSerialTime") + " (" + %#(query("/ProcessSerialTime") / query("/TotalElapsedTimeNoPause")) + ")" ]]></valueEval>
          <valueType>string</valueType>
          <displayAttributes>
            <boolean:expand>true</boolean:expand>
            <boolean:detailedFormulaDisplayRepresentation>false</boolean:detailedFormulaDisplayRepresentation>
          </displayAttributes>
          <expand>
            <vectorQuery id = "SerialExecutionWallTimeExpanded">
              <derivedQuery id="IdealSerialTimeAndPercentElapsedAsString">
                <queryInherit>/IdealSerialTime</queryInherit>
                <valueEval><![CDATA[ t#query("/IdealSerialTime") + " (" + %#(query("/IdealSerialTime") / query("/TotalElapsedTimeNoPause")) + ")" ]]></valueEval>
                <valueType>string</valueType>
              </derivedQuery>
              <derivedQuery id ="SerialSpinBusyWaitOnMPISpinningTimeAndPercentElapsedAsString">
                <queryInherit>/SerialSpinBusyWaitOnMPISpinningTime</queryInherit>
                <valueEval><![CDATA[ t#query("/SerialSpinBusyWaitOnMPISpinningTime") + " (" + %#(query("/SerialSpinBusyWaitOnMPISpinningTime") / query("/TotalElapsedTimeNoPause")) + ")" ]]></valueEval>
                <valueType>string</valueType>
              </derivedQuery>
            </vectorQuery>
          </expand>
        </derivedQuery>
        <derivedQuery id ="ParallelExecutionWallTimeAndPercentElapsedAsString" displayName ="%ParallelExecutionWallTime">
          <description>%ParallelExecutionWallTimePercentElapsedDescription</description>
          <valueEval><![CDATA[ t#query("/RegionTime") + " (" + %#(query("/RegionTime") / query("/TotalElapsedTimeNoPause")) + ")" ]]></valueEval>
          <valueType>string</valueType>
          <expand>
            <vectorQuery id = "ParallelExecutionWallTimeExpanded">
              <derivedQuery id="IdealRegionTimePMUAndPercentElapsedAsString">
                <queryInherit>/IdealRegionTimePMUSummary</queryInherit>
                <description>%IdealRegionTimePercentElapsedDescription</description>
                <valueEval><![CDATA[ t#query("/IdealRegionTimePMUSummary") + " (" + %#(query("/IdealRegionTimePMUSummary") / query("/TotalElapsedTimeNoPause")) + ")" ]]></valueEval>
                <valueType>string</valueType>
              </derivedQuery>
              <derivedQuery id="RegionPotentialGainPMUAndPercentElapsedAsStringForSummary">
                <queryInherit>/RegionPotentialGainPMUForSummary</queryInherit>
                <valueEval><![CDATA[ t#query("/RegionPotentialGainPMUForSummary") + " (" + %#(query("/RegionPotentialGainPMUForSummary") / query("/TotalElapsedTimeNoPause")) + ")" ]]></valueEval>
                <valueType>string</valueType>
              </derivedQuery>
            </vectorQuery>
          </expand>
        </derivedQuery>
      </xsl:if>
    </vectorQuery>
    <vectorQuery id = "PropertyCPUColumns">
      <xsl:if test="(exsl:ctx('openmpProcessCount') = 1)">
        <derivedQuery id="ExpandedProcessSerialTime">
          <queryInherit>/ProcessSerialTimeShort</queryInherit>
          <expand>
            <vectorQuery>
              <queryRef>/IdealSerialTime</queryRef>
              <queryRef>/SerialSpinBusyWaitOnMPISpinningTime</queryRef>
            </vectorQuery>
          </expand>
        </derivedQuery>
        <derivedQuery id="HPCRegionTime" displayName ="%ParallelExecutionWallTime">
          <description>%ParallelExecutionWallTimePercentElapsedDescription</description>
          <valueEval>query("/RegionTime")</valueEval>
          <valueType>time</valueType>
          <expand>
            <vectorQuery>
              <queryRef>/IdealRegionTimePMUSummary</queryRef>
              <queryRef>/RegionPotentialGainPMUForSummary</queryRef>
            </vectorQuery>
          </expand>
        </derivedQuery>
      </xsl:if>
    </vectorQuery>
    <vectorQuery id="MySrcAsmColumns">
      <queryRef>/RefTime</queryRef>
      <queryRef>/MemBound</queryRef>
      <queryRef>/FPUUtilizationGroupSourceView</queryRef>
      <queryRef>/ParallelFs</queryRef>
    </vectorQuery>
    <vectorQuery id="MySrcColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MyAsmColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <xsl:if test="(exsl:ctx('openmpProcessCount') > 0)">
        <queryRef>/ProcessElapsedTime</queryRef>
      </xsl:if>
      <queryRef>/GFLOPSPerProcessTime</queryRef>
      <xsl:if test="(exsl:ctx('openmpProcessCount') > 0)">
        <queryRef>/RegionPotentialGainExpanded</queryRef>
      </xsl:if>
      <queryRef>/RefTimeParentExpanded</queryRef>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('openmpProcessCount') = 1)">
          <queryRef>/SerialCPUTime</queryRef>
        </xsl:when>
        <xsl:when test="(exsl:ctx('openmpProcessCount') > 1)">
          <queryRef>/SerialCPUTimeWithExpansion</queryRef>
        </xsl:when>
      </xsl:choose>
      <queryRef>/MemBoundForHPCPC</queryRef>
      <xsl:if test="exsl:ctx('PMU') != 'knl'">
        <queryRef>/RemoteToLocalPercent</queryRef>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('PMU') = 'knl')">
          <queryRef>/FPUUtilizationGrid</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/VectorizationGrid</queryRef>
        </xsl:otherwise>
      </xsl:choose>
      <queryRef>/DerivedInstructionsRetired</queryRef>
      <queryRef>/CPI</queryRef>
      <queryRef>/AverageFrequency</queryRef>
      <xsl:if test="(exsl:ctx('openmpProcessCount') > 0)">
        <queryRef>/OpenMPThreadCount</queryRef>
        <queryRef>/RegionInstanceCount</queryRef>
        <queryRef>/BarrierChunk</queryRef>
        <queryRef>/BarrierScheduleType</queryRef>
        <queryRef>/DerivedBarrierIterationsCountAvg</queryRef>
        <queryRef>/DerivedBarrierIterationsCountMax</queryRef>
        <queryRef>/DerivedBarrierIterationsCountMin</queryRef>
      </xsl:if>
      <queryRef>/ParallelFsReadWriteBytes/ParallelFsReadWriteExpand</queryRef>
      <queryRef>/ParallelFsSumWaittime/ParallelFsWaittimeExpand</queryRef>
      <queryRef>/ParallelFsSumSamplesCount/ParallelFsSamplesCountExpand</queryRef>
    </vectorQuery>
    <vectorQuery id="AffinityReportColumns">
      <queryRef>/CPUTime</queryRef>
      <queryRef>/ThreadAffinity</queryRef>
    </vectorQuery>
    <vectorQuery id="MyDataColumns">
        <vectorQueryInsert>/ViewpointGUIandCLIColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySorting">
      <xsl:choose>
        <xsl:when test="(exsl:ctx('openmpProcessCount') > 0)">
            <queryRef>/ProcessElapsedTime</queryRef>
        </xsl:when>
        <xsl:otherwise>
            <queryRef>/GFLOPsPerOpenMPProcess</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <derivedQuery id="DataOfInterest">
      <queryInherit>/RefTime</queryInherit>
    </derivedQuery>
    <vectorQuery id="MyRowBy">
      <xsl:if test="(exsl:ctx('openmpProcessCount') > 0)">
        <vectorQueryInsert>/OpenMPGridRowBy</vectorQueryInsert>
      </xsl:if>
      <vectorQueryInsert>/PMUGridRowBy</vectorQueryInsert>
      <queryRef>/ParallelFsObject</queryRef>
    </vectorQuery>
    <infoQuery id="PMUEventTimeline" displayName="%PMUEventTimeline">
      <queryInherit>/PMUEventType</queryInherit>
    </infoQuery>
  </queryLibrary>
</bag>
