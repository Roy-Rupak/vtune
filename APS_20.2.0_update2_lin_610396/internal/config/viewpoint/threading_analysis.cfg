<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%ThreadingEfficiencyViewpointName'
    shortName='%ThreadingEfficiencyViewpointShortName'
    description='%ThreadingEfficiencyViewpointDescription'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryRef>/RefTime</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/CPUTime</queryRef>
        </xsl:otherwise>
      </xsl:choose>
      <queryRef>/ConcurrencyUtilization</queryRef>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="bottomUpPane" placeId="resultsArea"/>
    <pane id="topDownPane" placeId="resultsArea"/>
    <pane id="callerCalleePane" placeId="resultsArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="timelinePane" placeId="bottomArea"/>
    <pane id="taskTimelinePane" placeId="resultsArea"/>
    <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <tab id="bottomUp">
        <masterPane id="bottomUpPane"/>
        <paneToShow id="quickFilterPane"/>
        <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
        <paneToShow id="timelinePane"/>
      </tab>
      <tab id="flatProfile">
        <masterPane id="callerCalleePane"/>
        <paneToShow id="quickFilterPane"/>
      </tab>
      <tab id='topDown'>
        <masterPane id="topDownPane"/>
        <paneToShow id="quickFilterPane"/>
        <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
        <paneToShow id="timelinePane"/>
      </tab>
      <xsl:if test="not(exsl:is_compare_mode())">
        <tab id="tasks">
          <masterPane id="taskTimelinePane"/>
          <paneToShow id="quickFilterPane"/>
          <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
        </tab>
      </xsl:if>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
       <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="isRunssMode" select="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))"/>
    <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              groupings ="/Process/Thread/Module"
              metrics="MyCPUWaitDataColumns"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="stackPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params layers="CPU/Wait/Signal/WaitSyncObjCreation"/>
        </xsl:when>
        <xsl:otherwise>
          <params layers="PMU/ContextSwitch"
                  contextSwitchMetrics = "InactiveSyncWaitDataMetrics"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="bottomUpPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params groupings="WaitGridRowBy"
                  sorting="MySorting"
                  errorMessage="ErrorNoDataConcurrency"
                  stateVersion="2"/>
        </xsl:when>
        <xsl:otherwise>
          <params groupings="PMUGridRowBy"
                  sorting="MySorting"
                  errorMessage="ErrorNoDataConcurrency"
                  stateVersion="2"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="callerCalleePane">
      <params description="HotspotsCallerCalleeWindowDescription"
              errorMessage="ErrorNoDataConcurrency"
              callerCalleeColumns="MyCPUWaitDataColumns"
              stateVersion="2"/>
    </xsl:variable>
    <xsl:variable name="callerCalleeFileName">
      <xsl:text>config://viewpoint/include/caller-callee.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($callerCalleePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($callerCalleeFileName)/root/*"/>
    <xsl:variable name="topDownPane">
      <params groupings="TopDownGridRowBy"
              sorting="MySorting"
              errorMessage="ErrorNoDataConcurrency"
              id="topDownPane"
              displayName="TopDownTreeWindow"
              description="HotspotsTopDownTreeWindowDescription"
              helpKeyword="configs.interpret_calltree_f1030"
              queryType="topDown"
              groupingItems="no"
              stateVersion="2"/>
    </xsl:variable>
    <xsl:variable name="topDownFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($topDownPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($topDownFileName)"/>
    <xsl:variable name="summaryPane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params description="HotspotsSummaryWindowDescription"
                  helpKeyWord="configs.summary_thread_cc_f1247"
                  querySuffix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params description="HotspotsSummaryWindowDescription"
                  helpKeyWord="configs.summary_thread_cc_f1247"
                  querySuffix="PMU"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summarythreading.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="timelinePane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params
            id="timelinePane"
            displayName="TimelineWindow"
            globalEventAreaName="CPUUsageOverTime"
            description="ParallelismTimelineWindowDescription"
            cpuDataQuery="CPUTime"
            samplePointsQuery="CPUSample"
            samplePointsTooltipQuery="CPUFunctionFull"
            cpuDataCumulativeQuery="CPUTimeAllCoresCumulative"
            taskQuery="Task"
            helpKeyword="configs.timeline_f1106"
            contextSwitches="true"
            waits="true"
            cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative"
            rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params
            id="timelinePane"
            displayName="TimelineWindow"
            description="ParallelismTimelineWindowDescription"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            samplePointsQuery="PMUSample/RefTimeEvent"
            samplePointsTooltipQuery="PMUFunctionFull"
            samplePointsLayerName="ClkSample"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            helpKeyword="configs.timeline_f1106"
            cpuOverheadAndSpinTimeQuery="PMUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="PMUOverheadAndSpinTimeAllCoresCumulative"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="timelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($timelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($timelinePaneFileName)"/>
    <xsl:variable name="taskTimelinePane">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <params
            id="taskTimelinePane"
            displayName="TaskTimelineWithData"
            description="TaskTimelineWithDataDescription"
            tasksAndFrames="true"
            globalEventAreaName="CPUUsageOverTime"
            cpuDataQuery="CPUTime"
            cpuDataCumulativeQuery="CPUTimeAllCoresCumulative"
            contextSwitches="false"
            waits="true"
            frameMode="frameDetailed"
            headerMode="rich"
            helpKeyword="configs.tasks_f1330"
            rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params
            id="taskTimelinePane"
            displayName="TaskTimelineWithData"
            description="TaskTimelineWithDataDescription"
            tasksAndFrames="true"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            contextSwitches="true"
            frameMode="frameDetailed"
            headerMode="rich"
            helpKeyword="configs.tasks_f1330"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="taskTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
    <srcAsm id="srcAsmPane" int:stateVersion="3">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <asmWindow>
            <helpKeywordF1>configs.find_problem_asm_pane_f1041</helpKeywordF1>
            <gridRules>
              <gridRule>
                <configuration>
                  <rowBy>
                    <vectorQueryInsert>/AsmPaneRowBy</vectorQueryInsert>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CPUSourceLine</queryRef>
                    <queryRef>/CPUAssemblyContent</queryRef>
                    <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
                    <vectorQueryInsert>/MyWaitDataColumns</vectorQueryInsert>
                  </columnBy>
                  <queryMode>flatProfile</queryMode>
                </configuration>
              </gridRule>
            </gridRules>
          </asmWindow>
          <srcWindow>
            <helpKeywordF1>configs.find_problem_src_pane_f1040</helpKeywordF1>
            <gridRules>
              <gridRule>
                <configuration>
                  <rowBy>
                    <queryRef>/SourceLineFlat</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/CPUSourceContent</queryRef>
                    <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
                    <vectorQueryInsert>/MyWaitDataColumns</vectorQueryInsert>
                  </columnBy>
                  <queryMode>flatProfile</queryMode>
                </configuration>
              </gridRule>
            </gridRules>
          </srcWindow>
        </xsl:when>
        <xsl:otherwise>
          <asmWindow>
            <helpKeywordF1>configs.find_problem_asm_pane_f1041</helpKeywordF1>
            <gridRules>
              <gridRule>
                <configuration>
                  <rowBy>
                    <vectorQueryInsert>/AsmPaneRowBy</vectorQueryInsert>
                  </rowBy>
                  <columnBy>
                    <queryRef>/PMUSourceLine</queryRef>
                    <queryRef>/PMUAssemblyContent</queryRef>
                    <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
                    <vectorQueryInsert>/MyWaitDataColumns</vectorQueryInsert>
                  </columnBy>
                  <queryMode>flatProfile</queryMode>
                </configuration>
              </gridRule>
            </gridRules>
          </asmWindow>
          <srcWindow>
            <helpKeywordF1>configs.find_problem_src_pane_f1040</helpKeywordF1>
            <gridRules>
              <gridRule>
                <configuration>
                  <rowBy>
                    <queryRef>/SourceLineFlat</queryRef>
                  </rowBy>
                  <columnBy>
                    <queryRef>/PMUSourceContent</queryRef>
                    <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
                    <vectorQueryInsert>/MyWaitDataColumns</vectorQueryInsert>
                  </columnBy>
                  <queryMode>flatProfile</queryMode>
                </configuration>
              </gridRule>
            </gridRules>
          </srcWindow>
        </xsl:otherwise>
      </xsl:choose>
      <fileSearchWindow>
        <helpKeywordF1>configs.find_file_type_f1072</helpKeywordF1>
      </fileSearchWindow>
      <doiBy>
        <queryRef>/DataOfInterest</queryRef>
      </doiBy>
    </srcAsm>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <xsl:variable name="isRunssMode" select="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))"/>
    <derivedQuery id="InactiveWaitTimeWithReasonsParent">
      <queryInherit>/InactiveWaitTime</queryInherit>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
        <boolean:synchronizeChildrenFormats>false</boolean:synchronizeChildrenFormats>
      </displayAttributes>
      <expand>
        <vectorQuery id="InactiveWaitTimeWithReasonsExpanded">
          <queryRef>/InactiveSyncWaitTime/CPUUsageUtilization</queryRef>
          <queryRef>/PreemptionWaitTime/CPUUsageUtilization</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="InactiveWaitCountWithReasonsParent">
      <queryInherit>/InactiveWaitCount</queryInherit>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
        <boolean:synchronizeChildrenFormats>false</boolean:synchronizeChildrenFormats>
      </displayAttributes>
      <expand>
        <vectorQuery id="InactiveWaitCountWithReasonsExpanded">
          <queryRef>/InactiveSyncWaitCount/CPUUsageUtilization</queryRef>
          <queryRef>/PreemptionWaitCount/CPUUsageUtilization</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <vectorQuery id="MyDataColumns">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <queryRef>/CPUTimeParentExpanded</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/RefTimeParentExpanded</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="MyWaitDataColumns">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <queryRef>/WaitTime/CPUUsageUtilization</queryRef>
          <queryRef>/WaitCount</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="not(exsl:ctx('hideContextSwitchesType',0))">
              <queryRef>/InactiveWaitTimeWithReasonsParent</queryRef>
              <queryRef>/InactiveWaitCountWithReasonsParent</queryRef>
            </xsl:when>
            <xsl:otherwise>
              <queryRef>/InactiveWaitTime/CPUUsageUtilization</queryRef>
              <queryRef>/InactiveWaitCount/CPUUsageUtilization</queryRef>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="MyCPUWaitDataColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <vectorQueryInsert>/MyWaitDataColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MyWaitInfoColumns">
      <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
      <xsl:if test="$isRunssMode">
        <queryRef>/WaitSyncObjType</queryRef>
        <queryRef>/WaitSyncObjCreationModuleFunction</queryRef>
        <queryRef>/WaitSyncObjCreationSourceFileLine</queryRef>
      </xsl:if>
    </vectorQuery>
    <vectorQuery id="OpenMPColumns1">
      <xsl:if test="exsl:ctx('openmpProcessCount') > 0">
        <queryRef>/ProcessElapsedTime</queryRef>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('openmpProcessCount') = 1)">
          <queryRef>/SerialCPUTime</queryRef>
          <queryRef>/RegionPotentialGainExpanded</queryRef>
        </xsl:when>
        <xsl:when test="(exsl:ctx('openmpProcessCount') > 1)">
          <queryRef>/SerialCPUTimeWithExpansion</queryRef>
          <queryRef>/RegionPotentialGainExpanded</queryRef>
        </xsl:when>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="OpenMPColumns2">
      <xsl:if test="(exsl:ctx('openmpProcessCount') > 0)">
        <queryRef>/OpenMPThreadCount</queryRef>
        <queryRef>/RegionInstanceCount</queryRef>
        <queryRef>/BarrierChunk</queryRef>
        <queryRef>/BarrierScheduleType</queryRef>
        <queryRef>/DerivedBarrierIterationsCountAvg</queryRef>
        <queryRef>/DerivedBarrierIterationsCountMax</queryRef>
        <queryRef>/DerivedBarrierIterationsCountMin</queryRef>
      </xsl:if>
    </vectorQuery>
    <vectorQuery id="InactiveSyncWaitDataMetrics">
      <xsl:choose>
        <xsl:when test="not(exsl:ctx('hideContextSwitchesType',0))">
          <queryRef>/InactiveSyncWaitTime</queryRef>
          <queryRef>/PreemptionWaitTime</queryRef>
          <queryRef>/InactiveSyncWaitCount</queryRef>
          <queryRef>/PreemptionWaitCount</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/InactiveWaitTime</queryRef>
          <queryRef>/InactiveWaitCount</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <vectorQueryInsert>/OpenMPColumns1</vectorQueryInsert>
      <vectorQueryInsert>/MyCPUWaitDataColumns</vectorQueryInsert>
      <vectorQueryInsert>/MyWaitInfoColumns</vectorQueryInsert>
      <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
      <vectorQueryInsert>/OpenMPColumns2</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySorting">
      <queryRef>/DataOfInterest</queryRef>
    </vectorQuery>
    <vectorQuery id="DataOfInterest">
      <xsl:choose>
        <xsl:when test="$isRunssMode">
          <queryRef>/WaitTime/CPUUsageUtilization[%Poor]</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/InactiveWaitTimeWithPoorCPUUtilization</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <infoQuery id="SimultaneouslyRunningThreads" displayName="%SimultaneouslyRunningThreads">
      <queryInherit>/Concurrency</queryInherit>
    </infoQuery>
  </queryLibrary>
</bag>
