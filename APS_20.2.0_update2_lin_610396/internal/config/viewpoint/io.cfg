<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%DiskIOViewpointName'
    description='%DiskIOViewpointDescription'
    shortName='%DiskIOViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>13</int:contentVersion>
  </internal>
  <prerequisites syntax="norules">
    <requiredData groupOperation="or">
      <queryRef>/IOQueueCount</queryRef>
      <queryRef>/IOTotalCount</queryRef>
      <queryRef>/IOBytesCount</queryRef>
      <queryRef>/SpdkIoCount</queryRef>
      <queryRef>/InboundPCIeBandwidth</queryRef>
      <queryRef>/OutboundPCIeBandwidth</queryRef>
      <queryRef>/DpdkRxSpinTime</queryRef>
      <queryRef>/DpdkDequeueSpinTime</queryRef>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="bottomUpPane" placeId="resultsArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="ioSummaryPane" placeId="sideArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="taskTimelinePane" placeId="resultsArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="ioTimelinePane" placeId="bottomArea"/>
    <xsl:variable name="StacksCollected">
      <xsl:choose>
        <xsl:when test="exsl:ctx('collectIoMode') = 'stack'">true</xsl:when>
        <xsl:otherwise>false</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <tab id="bottomUp">
        <requiredData groupOperation="or">
          <queryRef>/IOQueueCount</queryRef>
          <queryRef>/SpdkIoCount</queryRef>
          <queryRef>/InboundPCIeBandwidth</queryRef>
          <queryRef>/OutboundPCIeBandwidth</queryRef>
          <queryRef>/DpdkRxSpinTime</queryRef>
          <queryRef>/DpdkDequeueSpinTime</queryRef>
        </requiredData>
        <masterPane id="bottomUpPane"/>
        <paneToShow id="ioTimelinePane"/>
        <paneToShow id="quickFilterPane"/>
        <xsl:if test="$systemWideDiskIO">
          <paneToShow id="ioSummaryPane"/>
          <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
        </xsl:if>
      </tab>
      <xsl:if test="not(exsl:is_compare_mode())">
        <tab id="tasks">
          <masterPane id="taskTimelinePane"/>
          <paneToShow id="quickFilterPane"/>
          <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
        </tab>
      </xsl:if>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
       <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="quickFilterPane">
      <params id="quickFilterPane"
              groupings ="/Process/Thread/Module"/>
    </xsl:variable>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="stackPane">
      <params layers="UserTask"/>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="bottomUpPane">
      <params description="LightweightHotspotsBottomUpWindowDescription"
              errorMessage="ErrorNoDataEBS"
              groupings="IOGridRowBy"
              sorting="MySorting"
              stateVersion="2"/>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="summaryPane">
      <xsl:choose>
        <xsl:when test="exsl:ctx('dpdkStack', 0)">
          <xsl:choose>
            <xsl:when test="(exsl:ctx('systemWideDiskIO', 0) and exsl:ctx('spdkStack', 'undefined') = 'undefined') or exsl:ctx('spdkStack', 'undefined') = 0">
              <params description="LightweightHotspotsSummaryWindowDescription"
                      querySuffix="PMU"
                      showCPUHotspots="true"
                      showCPUUsage="true"
                      showPcieTraffic="true"
                      showIO="true"
                      showSpdkIO="false"
                      showDpdkIO="true"
                      showTasks="false"
                      showBandwidth="false"
                      showBandwidthUtilization="true"
                      showInterrupts="true"
                      helpKeyWord="intel.phe.configs.io_analysis"/>
            </xsl:when>
            <xsl:otherwise>
              <params description="LightweightHotspotsSummaryWindowDescription"
                      querySuffix="PMU"
                      showCPUHotspots="false"
                      showCPUUsage="false"
                      showPcieTraffic="true"
                      showIO="false"
                      showSpdkIO="true"
                      showDpdkIO="true"
                      showTasks="false"
                      showBandwidth="false"
                      showBandwidthUtilization="true"
                      showInterrupts="true"
                      helpKeyWord="intel.phe.configs.io_analysis"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="(exsl:ctx('systemWideDiskIO', 0) and exsl:ctx('spdkStack', 'undefined') = 'undefined') or exsl:ctx('spdkStack', 'undefined') = 0">
              <params description="LightweightHotspotsSummaryWindowDescription"
                      querySuffix="PMU"
                      showCPUHotspots="true"
                      showCPUUsage="true"
                      showPcieTraffic="true"
                      showIO="true"
                      showSpdkIO="false"
                      showDpdkIO="false"
                      showTasks="false"
                      showBandwidth="false"
                      showBandwidthUtilization="true"
                      showInterrupts="true"
                      helpKeyWord="intel.phe.configs.io_analysis"/>
            </xsl:when>
            <xsl:otherwise>
              <params description="LightweightHotspotsSummaryWindowDescription"
                      querySuffix="PMU"
                      showCPUHotspots="false"
                      showCPUUsage="false"
                      showPcieTraffic="true"
                      showIO="false"
                      showSpdkIO="true"
                      showDpdkIO="false"
                      showTasks="false"
                      showBandwidth="false"
                      showBandwidthUtilization="true"
                      showInterrupts="true"
                      helpKeyWord="intel.phe.configs.io_analysis"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="ioSummaryPane">
      <params description="LightweightHotspotsSummaryWindowDescription"
          id="ioSummaryPane"
          contextMode="true"
          querySuffix="PMU"
          showIO="true"
          showCPUHotspots="false"
          showTasks="false"
          enableMPIAnalysis="false"
          showCPUUsage="false"
          showBandwidth="false"
          showInterrupts="false"
          showResultInfo="false"
          showSummaryInfo="false"
          helpKeyWord="intel.phe.configs.io_analysis"
          />
    </xsl:variable>
    <xsl:variable name="ioSummaryPaneFileName">
        <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
        <xsl:for-each select="exsl:node-set($ioSummaryPane)//@*">
            <xsl:value-of select="concat(name(), '=', .)"/>
            <xsl:text>&amp;</xsl:text>
        </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($ioSummaryPaneFileName)"/>
    <xsl:variable name="taskTimelinePane">
      <xsl:choose>
        <xsl:when test="exsl:ctx('dpdkStack', 0)">
          <params
            id="taskTimelinePane"
            displayName="TaskTimelineWithData"
            description="TaskTimelineWithDataDescription"
            tasksAndFrames="true"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            contextSwitches="true"
            frameMode="frameDetailed"
            headerMode="rich"
            helpKeyword="configs.tasks_f1330"
            io="true"
            spdkio="true"
            dpdkio="true"
            pcie="true"
            taskQuery="IOFunction"
          />
        </xsl:when>
        <xsl:otherwise>
          <params
            id="taskTimelinePane"
            displayName="TaskTimelineWithData"
            description="TaskTimelineWithDataDescription"
            tasksAndFrames="true"
            globalEventAreaName="RefTime"
            cpuDataQuery="RefTime"
            cpuDataByThreadQuery="RefTimeByThread"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            contextSwitches="true"
            frameMode="frameDetailed"
            headerMode="rich"
            helpKeyword="configs.tasks_f1330"
            io="true"
            spdkio="true"
            dpdkio="false"
            pcie="true"
            taskQuery="IOFunction"
          />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="taskTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
    <xsl:variable name="ioTimelinePane">
      <xsl:choose>
        <xsl:when test="exsl:ctx('dpdkStack', 0)">
          <params
            id="ioTimelinePane"
            displayName="IOTimelineWindow"
            globalEventAreaName="RefTime"
            description="HotspotsAndIOTimelineWindowDescription"
            cpuDataQuery="RefTime"
            samplePointsQuery="CPUSample"
            samplePointsTooltipQuery="CPUFunctionFull"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            contextSwitches="true"
            cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative"
            rowByPrefix="PMU"
            io="true"
            spdkio="true"
            dpdkio="true"
            pcie="true"
            taskQuery="IOFunction"
          />
        </xsl:when>
        <xsl:otherwise>
          <params
            id="ioTimelinePane"
            displayName="IOTimelineWindow"
            globalEventAreaName="RefTime"
            description="HotspotsAndIOTimelineWindowDescription"
            cpuDataQuery="RefTime"
            samplePointsQuery="CPUSample"
            samplePointsTooltipQuery="CPUFunctionFull"
            cpuDataCumulativeQuery="RefTimeAllCoresCumulative"
            contextSwitches="true"
            cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped"
            cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative"
            rowByPrefix="PMU"
            io="true"
            spdkio="true"
            dpdkio="false"
            pcie="true"
            taskQuery="IOFunction"
          />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="ioTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($ioTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($ioTimelinePaneFileName)"/>
    <srcAsm id="srcAsmPane" int:stateVersion="3">
      <asmWindow>
        <helpKeywordF1>configs.find_problem_asm_pane_f1041</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <vectorQueryInsert>/PMUAsmPaneRowBy</vectorQueryInsert>
              </rowBy>
              <columnBy>
                <queryRef>/PMUSourceLine</queryRef>
                <queryRef>/PMUAssemblyContent</queryRef>
                <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </asmWindow>
      <srcWindow>
        <helpKeywordF1>configs.find_problem_src_pane_f1040</helpKeywordF1>
        <gridRules>
          <gridRule>
            <configuration>
              <rowBy>
                <queryRef>/PMUSourceLineFlat</queryRef>
              </rowBy>
              <columnBy>
                <queryRef>/PMUSourceContent</queryRef>
                <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
              </columnBy>
              <queryMode>flatProfile</queryMode>
            </configuration>
          </gridRule>
        </gridRules>
      </srcWindow>
      <fileSearchWindow>
        <helpKeywordF1>configs.find_file_type_f1072</helpKeywordF1>
      </fileSearchWindow>
      <doiBy>
        <queryRef>/DataOfInterest</queryRef>
      </doiBy>
    </srcAsm>
    <xsl:copy-of select="document('config://viewpoint/include/diagram.xsl')"/>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <vectorQuery id="MyDataColumns">
      <queryRef>/CPUGPUUsageElapsedTime/CPUGPUUsageUtilization</queryRef>
      <queryRef>/RefTimeParent</queryRef>
      <queryRef>/InstructionsRetired</queryRef>
    </vectorQuery>
    <vectorQuery id="MySrcAsmColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <xsl:if test="exsl:ctx('analyzeFPU')">
        <queryRef>/FPUUsage</queryRef>
        <queryRef>/SingleFPOperationsPerCycle</queryRef>
        <queryRef>/DoubleFPOperationsPerCycle</queryRef>
        <queryRef>/x87FPOperationsPerCycle</queryRef>
      </xsl:if>
      <queryRef>/QuantumWaitTime</queryRef>
      <queryRef>/QuantumInactiveTime</queryRef>
    </vectorQuery>
    <vectorQuery id="MySrcColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MyAsmColumns">
      <vectorQueryInsert>/MySrcAsmColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySummaryColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
      <queryRef>/CPI</queryRef>
      <queryRef>/QuantumSync</queryRef>
      <queryRef>/QuantumWaitAndInactiveTimeExpanded</queryRef>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <queryRef>/SpdkIoReadCount</queryRef>
      <queryRef>/SpdkIoReadBytesStr</queryRef>
      <queryRef>/SpdkIoWriteCount</queryRef>
      <queryRef>/SpdkIoWriteBytesStr</queryRef>
      <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
      <vectorQueryInsert>/MySummaryColumns</vectorQueryInsert>
      <xsl:if test="exsl:ctx('analyzeFPU')">
        <queryRef>/FPUUsage</queryRef>
        <queryRef>/SingleFPOperationsPerCycle</queryRef>
        <queryRef>/DoubleFPOperationsPerCycle</queryRef>
        <queryRef>/x87FPOperationsPerCycle</queryRef>
      </xsl:if>
      <xsl:if test="exsl:ctx('advancedLoopAnalysis')">
        <queryRef>/IssuedPMUVectInstSet</queryRef>
      </xsl:if>
      <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
      <queryRef>/ContextSwitchCountByReason</queryRef>
      <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
      <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
      <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
      <queryRef>/IOQueueCount/IOOperationQueueType/IOBinDurationType</queryRef>
      <queryRef>/PageFaultCount/PageFaultInfo</queryRef>
      <queryRef>/InboundPCIeReadSummary</queryRef>
      <queryRef>/InboundPCIeWriteSummary</queryRef>
      <queryRef>/OutboundPCIeReadSummary</queryRef>
      <queryRef>/OutboundPCIeWriteSummary</queryRef>
      <queryRef>/UncacheableReadsPerSecond</queryRef>
    </vectorQuery>
    <vectorQuery id="MySorting">
      <queryRef>/DataOfInterest</queryRef>
    </vectorQuery>
    <derivedQuery id="DataOfInterest">
      <queryInherit>/RefTime</queryInherit>
    </derivedQuery>
    <infoQuery id="PMUEventTimeline" displayName="%PMUEventTimeline">
      <queryInherit>/PMUEventType</queryInherit>
    </infoQuery>
    <vectorQuery id="IOGridRowBy">
      <vectorQueryInsert>/PMUGridRowBy</vectorQueryInsert>
      <xsl:if test="exsl:ctx('systemWideDiskIO', 0)">
        <queryRef>/IODevice/IOPartition</queryRef>
      </xsl:if>
      <xsl:if test="(not(exsl:ctx('systemWideDiskIO', 0)) and exsl:ctx('spdkStack', 'undefined') = 'undefined') or exsl:ctx('spdkStack', 'undefined') = 1">
        <queryRef>/SpdkIoDevice/Thread</queryRef>
      </xsl:if>
      <xsl:if test="exsl:ctx('targetOS') = 'Android' or exsl:ctx('targetOS') = 'Linux'">
        <queryRef>/Thread/PageFaultInfo</queryRef>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU') = 'haswell_server' or exsl:ctx('PMU') = 'broadwell_server'">
          <queryRef>/UncorePackage</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <xsl:if test="exsl:is_value_exist('dd_uncore_event_type', 'name', 'UNC_IIO_DATA_REQ_BY_CPU.MEM') or exsl:is_value_exist('dd_uncore_event_type', 'name', 'UNC_IIO_DATA_REQ_OF_CPU.MEM')">
            <queryRef>/UncorePackage/M2PCIe</queryRef>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
  </queryLibrary>
</bag>
