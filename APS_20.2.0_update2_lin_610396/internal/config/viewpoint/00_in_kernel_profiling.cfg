<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  >
  <internal
    name='%InKernelProfilingViewpointName'
    description='%InKernelProfilingViewpointDescription'
    shortName='%%InKernelProfilingViewpointShortName'>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>7</int:contentVersion>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <requiredData groupOperation="or" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
      <xsl:choose>
        <xsl:when test="(exsl:IsNonEmptyTableExist('dma_packet_data') or exsl:IsNonEmptyTableExist('gpu_compute_task_data'))">
      <queryRef>/GPUDXTime</queryRef>
      <queryRef>/GPUQueue</queryRef>
      <queryRef>/GPUComputeTask</queryRef>
      <queryRef>/ComputeQueue</queryRef>
      <queryRef>/GPUEventCount</queryRef>
      <queryRef>/GPUCoreFrequency</queryRef>
      <queryRef>/CPUGPUConcurrency</queryRef>
      <queryRef>/GPUElapsedTime</queryRef>
      <queryRef>/QueueDMAPacket</queryRef>
      <queryRef>/GPUGTPinEventCount</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/NotApplicableQuery</queryRef>
        </xsl:otherwise>
      </xsl:choose>
    </requiredData>
  </prerequisites>
  <viewpoint xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <pane id="gpuDiagramPane" placeId="resultsArea"/>
    <pane id="bottomUpPane" placeId="bottomArea"/>
    <pane id="summaryPane" placeId="resultsArea"/>
    <pane id="quickFilterPane" placeId="filterArea"/>
    <pane id="timelinePane" placeId="resultsArea"/>
    <pane id="gpuContextSummaryPane" placeId="sideArea"/>
    <pane id="taskTimelinePane" placeId="resultsArea"/>
    <pane id="stackPane" placeId="sideArea"/>
    <pane id="gpuTimelinePane" placeId="resultsArea"/>
    <pane id="timelineExecute" placeId="resultsArea"/>
    <pane id="timelineHDC" placeId="resultsArea"/>
    <pane id="timelineL3" placeId="resultsArea"/>
    <pane id="timelineMemory" placeId="resultsArea"/>
    <pane id="timelineSampler" placeId="resultsArea"/>
    <pane id="timelineThreads" placeId="resultsArea"/>
    <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
    <xsl:variable name="GPUGTPinDataCollected" select="exsl:IsNonEmptyTableExist('gpu_gtpin_data')"/>
    <xsl:variable name="GPUGSimDataCollected" select="exsl:ctx('gsimClockDuration', 0) > 0"/>
    <displayLayout>
      <tab id="summary">
        <masterPane id="summaryPane"/>
      </tab>
      <xsl:if test="not(exsl:is_compare_mode())">
        <tab id="bottomBottomUpAndGPUMetrics">
          <displayName>%GraphicsTabName</displayName>
          <xsl:if test="not($GPUGTPinDataCollected) or $GPUGSimDataCollected">
            <paneToShow id="gpuDiagramPane"/>
          </xsl:if>
          <paneToShow id="bottomUpPane"/>
          <paneToShow id="quickFilterPane"/>
          <masterPane id="gpuTimelinePane"/>
          <xsl:choose>
            <xsl:when test="$GPUGSimDataCollected">
                <paneToShow id="timelineExecute"/>
                <paneToShow id="timelineHDC"/>
                <paneToShow id="timelineL3"/>
                <paneToShow id="timelineMemory"/>
                <paneToShow id="timelineSampler"/>
                <paneToShow id="timelineThreads"/>
            </xsl:when>
            <xsl:otherwise>
              <paneToShow id="gpuTimelinePane"/>
            </xsl:otherwise>
          </xsl:choose>
        </tab>
      </xsl:if>
      <defaultTab id="summary"/>
    </displayLayout>
    <diveLayout id="srcAsmPane" placeId="resultsArea">
       <xsl:if test="$StacksCollected"><paneToShow id="stackPane"/></xsl:if>
    </diveLayout>
  </viewpoint>
  <paneLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="quickFilterPane">
      <xsl:choose>
        <xsl:when test="(exsl:is_non_empty_table_exist('gpu_gtpin_data')) or (exsl:ctx('gsimClockDuration', 0) > 0)">
          <params id="quickFilterPane"
                  metrics="CPUTime"
                  showLoopKnob="false"
                  showInlineKnob="true"
                  showCalleeAttributionKnob="false"/>
        </xsl:when>
        <xsl:otherwise>
          <params id="quickFilterPane"
                  metrics="CPUTime"
                  showLoopKnob="false"
                  showInlineKnob="false"
                  showCalleeAttributionKnob="false"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:copy-of select="document('config://viewpoint/include/diagram.xsl')"/>
    <xsl:variable name="timeline_gsim" select="document('config://viewpoint/include/timelinegsim.xsl')"/>
    <xsl:if test="not(exsl:is_compare_mode())">
      <html id="timelineExecute" displayName="Execute">
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timeline_gsim//bag//config[@id='gSimTimelineExecute']/configAreas/*"/>
        </config>
      </html>
      <html id="timelineHDC" displayName="HDC">
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timeline_gsim//bag//config[@id='gSimTimelineHDC']/configAreas/*"/>
        </config>
      </html>
      <html id="timelineL3" displayName="L3">
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timeline_gsim//bag//config[@id='gSimTimelineL3']/configAreas/*"/>
        </config>
      </html>
      <html id="timelineMemory" displayName="Memory">
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timeline_gsim//bag//config[@id='gSimTimelineMemory']/configAreas/*"/>
        </config>
      </html>
      <html id="timelineSampler" displayName="Sampler">
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timeline_gsim//bag//config[@id='gSimTimelineSampler']/configAreas/*"/>
        </config>
      </html>
      <html id="timelineThreads" displayName="Threads">
        <application name="timeline"/>
        <filter handleList="selection,global"/>
        <event handleList="KnobChangedEvent"/>
        <config>
          <xsl:copy-of select="$timeline_gsim//bag//config[@id='gSimTimelineThreads']/configAreas/*"/>
        </config>
      </html>
    </xsl:if>
    <xsl:variable name="qfilterFileName">
      <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($qfilterFileName)"/>
    <xsl:variable name="gpuContextSummaryPane">
      <params id="gpuContextSummaryPane"
              contextMode="true"
              displayName="gpuContextSummaryWindow"
              description="gpuContextSummaryWindowDescription"
              showBandwidthUtilization="true"
              showBandwidth="true"/>
    </xsl:variable>
    <xsl:variable name="gpuContextSummaryFileName">
      <xsl:text>config://viewpoint/include/summarygpu.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($gpuContextSummaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($gpuContextSummaryFileName)"/>
    <xsl:variable name="stackPane">
        <xsl:choose>
        <xsl:when test="exsl:ctx('runss:enable')='true'">
          <params layers="CPU"/>
        </xsl:when>
        <xsl:otherwise>
          <params layers="PMU/ContextSwitch"/>
        </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="stackFileName">
      <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($stackPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($stackFileName)"/>
    <xsl:variable name="defaultGridGrouping">
      <xsl:choose>
        <xsl:when test="exsl:ctx('collectGpuOpenCl', 0)">
          <xsl:choose>
            <xsl:when test="exsl:IsNonEmptyTableExist('gpu_gtpin_data')">
              /GPUComputeTaskTypeVector/GPUFunction/GPUParentCallStack
            </xsl:when>
            <xsl:otherwise>
              /GPUComputeTaskTypeVector
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>/GPUDMAPacketPerfTagType</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpPane">
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <params groupings="GSIMGridRowBy"
          description="LightweightHotspotsBottomUpWindowDescription"
          groupingItems="no"
          errorMessage="ErrorNoDataEBS"/>
        </xsl:when>
        <xsl:otherwise>
          <params groupings="inKernelProfilingGridRowBy"
          defaultGrouping="{$defaultGridGrouping}"
          sorting="MySorting"
          errorMessage="ErrorNoDataHotspots"/>
        </xsl:otherwise>
    </xsl:choose>
    </xsl:variable>
    <xsl:variable name="bottomUpFileName">
      <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($bottomUpFileName)"/>
    <xsl:variable name="summaryPane">
    <xsl:choose>
        <xsl:when test="exsl:ctx('runss:enable')='true'">
              <params description="HotspotsSummaryWindowDescription"
              resultSummaryColumns="MyDataColumns"
              querySuffix="CPU"
              showOpenMP="false"
              showCPUGPUUsage="false"
              showGPUHotspots="true"
              showBandwidthUtilization="true"
              showFrames="true"
              showFpuUtilization="true"
              showStalledIdle="true"
              showHottestTasks="true"
              helpKeyWord="intel.phe.configs.summary_gpu_hotspots"
              inKernelProfiling="true"
              showGPUUsage="true"
              summaryInfoMaxLevelsToShow="2"/>
        </xsl:when>
        <xsl:otherwise>
              <params description="LightweightHotspotsSummaryWindowDescription"
              querySuffix="PMU"
              showOpenMP="false"
              showCPUGPUUsage="true"
              showGPUHotspots="true"
              showBandwidth="false"
              showBandwidthUtilization="true"
              showInterrupts="false"
              showFrames="true"
              showFpuUtilization="true"
              showStalledIdle="true"
              showHottestTasks="true"
              showComputeTransfer="false"
              helpKeyWord="intel.phe.configs.summary_gpu_hotspots"
              inKernelProfiling="true"
              showGPUUsage="true"
              summaryInfoMaxLevelsToShow="2"/>
        </xsl:otherwise>
    </xsl:choose>
    </xsl:variable>
    <xsl:variable name="summaryFileName">
      <xsl:text>config://viewpoint/include/summarygpu.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($summaryPane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($summaryFileName)"/>
    <xsl:variable name="timelinePane">
    <xsl:choose>
        <xsl:when test="exsl:ctx('runss:enable')='true'">
              <params
              id="timelinePane"
              displayName="TimelineWindow"
              description="HotspotsTimelineWindowDescription"
              taskQuery="Task"
              helpKeyword="configs.timeline_f1106"
              contextSwitches="true"
              showOnlyGPUThreads="true"
              inKernelProfiling="true"
              rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
              <params
              id="timelinePane"
              displayName="TimelineWindow"
              description="LightweightHotspotsTimelineWindowDescription"
              helpKeyword="configs.timeline_f1106"
              showOnlyGPUThreads="true"
              inKernelProfiling="true"/>
        </xsl:otherwise>
    </xsl:choose>
    </xsl:variable>
    <xsl:variable name="timelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($timelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($timelinePaneFileName)"/>
    <xsl:variable name="taskTimelinePane">
    <xsl:choose>
        <xsl:when test="exsl:ctx('runss:enable')='true'">
              <params
              id="taskTimelinePane"
              displayName="TaskTimelineWithData"
              description="TaskTimelineWithDataDescription"
              tasksAndFrames="true"
              contextSwitches="false"
              frameMode="frameDetailed"
              headerMode="rich"
              helpKeyword="configs.tasks_f1330"
              showOnlyGPUThreads="true"
              inKernelProfiling="true"
              rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
              <params
              id="taskTimelinePane"
              displayName="TaskTimelineWithData"
              description="TaskTimelineWithDataDescription"
              tasksAndFrames="true"
              contextSwitches="true"
              frameMode="frameDetailed"
              headerMode="rich"
              pcie="true"
              showOnlyGPUThreads="true"
              inKernelProfiling="true"
              helpKeyword="configs.tasks_f1330"/>
        </xsl:otherwise>
    </xsl:choose>
    </xsl:variable>
    <xsl:variable name="taskTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
    <xsl:variable name="gpuTimelinePane">
    <xsl:choose>
        <xsl:when test="exsl:ctx('runss:enable')='true'">
              <params
              id="gpuTimelinePane"
              displayName="GPUTimelineWindow"
              description="HotspotsAndGPUTimelineWindowDescription"
              taskQuery="Task"
              helpKeyword="configs.graphics_f1337"
              contextSwitches="false"
              gpu="true"
              gpuCounters="{$gpuCounters}"
              showOnlyGPUThreads="true"
              inKernelProfiling="true"
              rowByPrefix="CPU"/>
        </xsl:when>
        <xsl:otherwise>
              <params
              id="gpuTimelinePane"
              displayName="GPUTimelineWindow"
              description="HotspotsAndGPUTimelineWindowDescription"
              helpKeyword="configs.graphics_f1337"
              gpu="true"
              pcie="true"
              gpuCounters="{$gpuCounters}"
              showOnlyGPUThreads="true"
              inKernelProfiling="true"/>
        </xsl:otherwise>
    </xsl:choose>
    </xsl:variable>
    <xsl:variable name="gpuTimelinePaneFileName">
      <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
      <xsl:for-each select="exsl:node-set($gpuTimelinePane)//@*">
        <xsl:value-of select="concat(name(), '=', .)"/>
        <xsl:text>&amp;</xsl:text>
      </xsl:for-each>
    </xsl:variable>
    <xsl:copy-of select="document($gpuTimelinePaneFileName)"/>
    <xsl:variable name="srcAsmPaneFileName">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runss:enable')='true'">
          <xsl:text>config://viewpoint/include/srcasm.xsl?family=CPU&amp;gpu=true&amp;queryMode=bottomUp&amp;</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>config://viewpoint/include/srcasm.xsl?family=PMU&amp;gpu=true&amp;queryMode=bottomUp&amp;</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:copy-of select="document($srcAsmPaneFileName)"/>
  </paneLibrary>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <vectorQuery id="gSimColumns">
      <queryRef>/gSimStallEventCount/gSimStallEventType</queryRef>
      <queryRef>/GPUGTPinInstructionMix</queryRef>
      <queryRef>/gSim16bitGOPsPerClkExpanded</queryRef>
      <queryRef>/gSim32bitGOPsPerClkExpanded</queryRef>
      <queryRef>/gSim64bitGOPsPerClkExpanded</queryRef>
    </vectorQuery>
    <vectorQuery id="MyDataColumns">
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <vectorQueryInsert>/gSimColumns</vectorQueryInsert>
        </xsl:when>
        <xsl:otherwise>
          <queryRef>/CPUGPUUsageElapsedTime/CPUGPUUsageUtilization</queryRef>
            <xsl:choose>
              <xsl:when test="exsl:IsNonEmptyTableExist('packet_stage_data')">
                <queryRef>/GpuCpuTime</queryRef>
            </xsl:when>
            <xsl:otherwise>
              <queryRef>/CPUTime</queryRef>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </vectorQuery>
    <vectorQuery id="MyAsmColumns">
      <queryRef>/GPUGTPinInstructionCount</queryRef>
      <queryRef>/GPUGTPinInstLatency</queryRef>
      <queryRef>/GPUGTPinCycles</queryRef>
      <queryRef>/gSimStallEventCount/gSimStallEventType</queryRef>
      <queryRef>/GPUGTPinInstructionSimdUtilization</queryRef>
    </vectorQuery>
    <vectorQuery id="MySrcColumns">
      <queryRef>/gSimStallEventCount/gSimStallEventType</queryRef>
      <xsl:choose>
        <xsl:when test="exsl:IsNonEmptyTableExist('gpu_gtpin_data')">
          <queryRef>/GPUGTPinInstLatency</queryRef>
          <queryRef>/GPUGTPinCyclesInPercentFormat</queryRef>
          <queryRef>/GPUGTPinInstructionMix</queryRef>
        </xsl:when>
        <xsl:otherwise>
          <vectorQueryInsert>/ViewpointGpuGUIandCLIColumns</vectorQueryInsert>
        </xsl:otherwise>
       </xsl:choose>
    </vectorQuery>
    <vectorQuery id="MySummaryColumns">
      <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="ViewpointGUIandCLIColumns">
      <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
      <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
      <queryRef>/ContextSwitchCountByReason</queryRef>
      <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
      <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
      <vectorQueryInsert>/MySummaryColumns</vectorQueryInsert>
      <queryRef>/GPUGTPinInstLatencyExpanded</queryRef>
      <queryRef>/GPUGTPinCyclesInPercentFormat</queryRef>
      <xsl:if test="exsl:ctx('gsimClockDuration', 0) = 0">
        <queryRef>/GPUGTPinInstructionMix</queryRef>
      </xsl:if>
      <queryRef>/GPUGTPinInstructionSimdUtilization</queryRef>
      <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="MySorting">
      <queryRef>/DataOfInterest</queryRef>
    </vectorQuery>
    <vectorQuery id="DataOfInterest">
      <queryRef>/CPUTime</queryRef>
    </vectorQuery>
    <infoQuery id="PMUEventTimeline" displayName="%PMUEventTimeline">
      <queryInherit>/PMUEventType</queryInherit>
    </infoQuery>
  </queryLibrary>
</bag>
