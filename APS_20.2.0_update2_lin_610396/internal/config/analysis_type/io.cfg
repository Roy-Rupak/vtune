<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  >
  <internal xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <xsl:variable name="previewSuffix">
      <xsl:if test="exsl:ctx('targetOS') = 'Windows'">Preview</xsl:if>
    </xsl:variable>
    <name>
      <xsl:copy-of select="concat('%IOAtypeName',$previewSuffix)"/>
    </name>
    <shortName>
      <xsl:copy-of select="concat('%IOAtypeShortName',$previewSuffix)"/>
    </shortName>
    <description>
      <xsl:copy-of select="concat('%IOAtypeDescription',$previewSuffix)"/>
    </description>
    <abbreviation>io</abbreviation>
    <alias>io</alias>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
    <iconClass>analysis-io solid</iconClass>
    <property name="helpId">intel.phe.configs.io_analysis</property>
  </internal>
  <prerequisites xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="" syntax="norules">
    <xsl:if test="not (exsl:ctx('targetOS') = 'Linux' or exsl:ctx('targetOS') = 'Windows' or exsl:ctx('targetOS') = 'FreeBSD' or exsl:ctx('targetOS') = 'Android')">
      <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsOnlyForWindowsAndLinux')"/>
    </xsl:if>
    <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic')"/>
  </prerequisites>
  <knobs xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="commonKnobs" select="document('config://analysis_type/include/knobs.xsl?defaultMemoryBandwidth=true')"/>
    <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
      <defaultValue>%DiskIOViewpointName</defaultValue>
    </stringKnob>
    <groupKnob id="groupForCustomControl1">
      <description>%diskIoStak</description>
      <knobs>
        <booleanKnob id="kernelStack" displayName="%KernelStack" boolean:visible="true" cliName="kernel-stack">
          <description>%KernelStackDescription</description>
          <boolean:defaultValue>true</boolean:defaultValue>
        </booleanKnob>
        <xsl:choose>
          <xsl:when test="exsl:ctx('targetOS') = 'Linux'">
            <booleanKnob id="spdkStack" displayName="%SpdkStack" boolean:visible="true" cliName="spdk">
              <description>%SpdkStackDescription</description>
              <boolean:defaultValue>false</boolean:defaultValue>
            </booleanKnob>
            <booleanKnob id="dpdkStack" displayName="%DpdkStack" boolean:visible="true" cliName="dpdk">
              <description>%DpdkStackDescription</description>
              <boolean:defaultValue>false</boolean:defaultValue>
            </booleanKnob>
          </xsl:when>
          <xsl:otherwise>
            <booleanKnob id="spdkStack" displayName="%SpdkStack" boolean:visible="false" cliName="spdk">
              <description>%SpdkStackDescription</description>
              <boolean:defaultValue>false</boolean:defaultValue>
            </booleanKnob>
            <booleanKnob id="dpdkStack" displayName="%DpdkStack" boolean:visible="false" cliName="dpdk">
              <description>%DpdkStackDescription</description>
              <boolean:defaultValue>false</boolean:defaultValue>
            </booleanKnob>
          </xsl:otherwise>
        </xsl:choose>
      </knobs>
    </groupKnob>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectPCIeBW']"/>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
    <xsl:if test="not (exsl:ctx('targetOS', '') = 'QNX' or exsl:ctx('targetOS', '') = 'INTEGRITY')">
      <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='dramBandwidthLimitsAT']"/>
    </xsl:if>
  </knobs>
  <analysis xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <collector id="runsa">
      <xsl:choose>
        <xsl:when test="exsl:ctx('targetOS') = 'Windows'">
          <xsl:choose>
            <xsl:when test="exsl:ctx('ETW', '') != 'OK'">
              <xsl:value-of select="exsl:error('%UnsupportedDiskIOETW')"/>
            </xsl:when>
          </xsl:choose>
        </xsl:when>
        <xsl:when test="exsl:ctx('targetOS') = 'Android' or exsl:ctx('targetOS') = 'Linux'">
          <xsl:choose>
            <xsl:when test="exsl:ctx('isFunctionTracingAvailable', 'no')!='yes'">
              <xsl:value-of select="exsl:warning('%FunctionTracingNotAvailableIowaitApproximate')"/>
            </xsl:when>
            <xsl:when test="exsl:ctx('isFunctionTracingAvailable', 'no')='yes' and exsl:ctx('isIowaitTracingAvailable', 'no')!='yes'">
              <xsl:value-of select="exsl:warning('%UnsupportedKernelIowaitApproximate')"/>
            </xsl:when>
          </xsl:choose>
        </xsl:when>
      </xsl:choose>
      <collectorKnob knob="cswitchMode">both</collectorKnob>
      <xsl:choose>
        <xsl:when test="exsl:ctx('targetOS') = 'Android' or exsl:ctx('targetOS') = 'Linux'">
          <boolean:collectorKnob knob="usePerf">false</boolean:collectorKnob>
        </xsl:when>
      </xsl:choose>
      <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
      <xsl:variable name="showInboundPCIeRequestsL3MissWarning" select="$pmuCommon//variables/ShowInboundPCIeRequestsL3MissWarning"/>
      <xsl:if test="exsl:ctx('collectPCIeBW', 0)">
        <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
        <xsl:if test = "not(exsl:ctx('isSEPDriverAvailable', 0))">
          <collectorKnob knob="uncoreSamplingInterval">100</collectorKnob>
        </xsl:if>
        <xsl:if test="$showInboundPCIeRequestsL3MissWarning='true'">
          <xsl:value-of select="exsl:warning('%InboundPCIeRequestMissesCanBeCollectedOnlyWithSep')"/>
        </xsl:if>
      </xsl:if>
      <boolean:collectorKnob knob="enablePEBSCollection">false</boolean:collectorKnob>
      <xsl:if test="exsl:ctx('collectMemoryBW', 0)">
        <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
        <boolean:collectorKnob knob="enableDramBandwidthLimitsWarning">true</boolean:collectorKnob>
        <xsl:if test="exsl:ctx('PMU') != 'knl' and exsl:ctx('dramBandwidthLimitsAT', 0)">
          <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
        </xsl:if>
      </xsl:if>
      <xsl:if test="exsl:ctx('kernelStack', 1) and exsl:ctx('spdkStack', 0)">
        <xsl:value-of select="exsl:error('%UnsupportedKernelAndSpdkProfiling')"/>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="exsl:ctx('kernelStack', 1)">
          <boolean:collectorKnob knob="cpuByIoWaits">true</boolean:collectorKnob>
          <boolean:collectorKnob knob="collectIoWaits">true</boolean:collectorKnob>
          <boolean:collectorKnob knob="systemWideDiskIO">true</boolean:collectorKnob>
          <boolean:collectorKnob knob="collectFramesMode">false</boolean:collectorKnob>
        </xsl:when>
        <xsl:otherwise>
          <xsl:if test="exsl:ctx('spdkStack', 0)">
            <boolean:collectorKnob knob="cpuByIoWaits">true</boolean:collectorKnob>
            <boolean:collectorKnob knob="collectIoWaits">false</boolean:collectorKnob>
            <boolean:collectorKnob knob="systemWideDiskIO">false</boolean:collectorKnob>
            <boolean:collectorKnob knob="collectFramesMode">true</boolean:collectorKnob>
            <xsl:if test="exsl:is_experimental('spdk_memory_pools')">
              <boolean:collectorKnob knob="collectUserTasksEventsCountersMode">true</boolean:collectorKnob>
            </xsl:if>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:if test="exsl:ctx('targetOS') != 'FreeBSD'">
        <collectorKnob knob="collectIoMode">stack</collectorKnob>
      </xsl:if>
      <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
      <xsl:variable name="memBandwidthEvents" select="$pmuCommon//variables/memBandwidthEvents"/>
      <xsl:variable name="isBandwidthAvailable" select="$pmuCommon//variables/isDRAMBWAvailable"/>
      <xsl:variable name="isInterSocketBandwidthAvailable" select="$pmuCommon//variables/isInterSocketBWAvailable"/>
      <xsl:variable name="qpiBandwidthEvents" select="$pmuCommon//variables/qpiBandwidthEvents"/>
      <xsl:variable name="PCIeBandwidthEvents" select="$pmuCommon//variables/PCIeBandwidthEvents"/>
      <xsl:variable name="allEvents">
        <xsl:value-of select="$events//events/cpi"/>
        <xsl:if test="exsl:ctx('collectPCIeBW', 0) and $PCIeBandwidthEvents and $PCIeBandwidthEvents != ''">
          <xsl:text>,</xsl:text>
          <xsl:value-of select="$PCIeBandwidthEvents"/>
        </xsl:if>
        <xsl:if test="exsl:ctx('collectMemoryBW', 0) and $isBandwidthAvailable = 'true' and $memBandwidthEvents != ''">
          <xsl:text>,</xsl:text>
          <xsl:value-of select="$memBandwidthEvents"/>
          <xsl:if test="$isInterSocketBandwidthAvailable = 'true' and $qpiBandwidthEvents != ''">
            <xsl:text>,</xsl:text>
            <xsl:value-of select="$qpiBandwidthEvents"/>
          </xsl:if>
        </xsl:if>
      </xsl:variable>
      <collectorKnob knob="pmuEventConfig">
        <xsl:value-of select="exsl:merge_pmu_events($allEvents)"/>
      </collectorKnob>
      <boolean:collectorKnob knob="explicitUncoreEventsConfig">true</boolean:collectorKnob>
    </collector>
  </analysis>
</bag>
