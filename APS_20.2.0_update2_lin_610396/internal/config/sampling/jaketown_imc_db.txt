# Performance Monitoring Events for Intel(R) Xeon(R) processor E5 family Based on the Sandy Bridge-EP Microarchitecture - V20
# 9/16/2016 11:34:57 AM
# Copyright (c) 2007 - 2016 Intel Corporation. All rights reserved.
UNIT	CODE	UMASK	NAME	DESCRIPTION	COUNTER	OTHER	FILTER	INTERNAL
iMC	0x1	0x0	UNC_M_ACT_COUNT	Counts the number of DRAM Activate commands sent on this channel.  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS.  One can calculate the number of Page Misses by subtracting the number of Page Miss precharges from the number of Activates.	0,1,2,3	0x0	null	0
iMC	0x4	0xf	UNC_M_CAS_COUNT.ALL	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x4	0x3	UNC_M_CAS_COUNT.RD	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x4	0x1	UNC_M_CAS_COUNT.RD_REG	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x4	0x2	UNC_M_CAS_COUNT.RD_UNDERFILL	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x4	0xc	UNC_M_CAS_COUNT.WR	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x4	0x8	UNC_M_CAS_COUNT.WR_RMM	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x4	0x4	UNC_M_CAS_COUNT.WR_WMM	DRAM RD_CAS and WR_CAS Commands	0,1,2,3	0x0	null	0
iMC	0x6	0x0	UNC_M_DRAM_PRE_ALL	Counts the number of times that the precharge all command was sent.	0,1,2,3	0x0	null	0
iMC	0x5	0x4	UNC_M_DRAM_REFRESH.HIGH	Counts the number of refreshes issued.	0,1,2,3	0x0	null	0
iMC	0x5	0x2	UNC_M_DRAM_REFRESH.PANIC	Counts the number of refreshes issued.	0,1,2,3	0x0	null	0
iMC	0x9	0x0	UNC_M_ECC_CORRECTABLE_ERRORS	Counts the number of ECC errors detected and corrected by the iMC on this channel.  This counter is only useful with ECC DRAM devices.  This count will increment one time for each correction regardless of the number of bits corrected.  The iMC can correct up to 4 bit errors in independent channel mode and 8 bit erros in lockstep mode.	0,1,2,3	0x0	null	0
iMC	0x7	0x8	UNC_M_MAJOR_MODES.ISOCH	Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.	0,1,2,3	0x0	null	0
iMC	0x7	0x4	UNC_M_MAJOR_MODES.PARTIAL	Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.	0,1,2,3	0x0	null	0
iMC	0x7	0x1	UNC_M_MAJOR_MODES.READ	Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.	0,1,2,3	0x0	null	0
iMC	0x7	0x2	UNC_M_MAJOR_MODES.WRITE	Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.	0,1,2,3	0x0	null	0
iMC	0x84	0x0	UNC_M_POWER_CHANNEL_DLLOFF	Number of cycles when all the ranks in the channel are in CKE Slow (DLLOFF) mode.	0,1,2,3	0x0	null	0
iMC	0x85	0x0	UNC_M_POWER_CHANNEL_PPD	Number of cycles when all the ranks in the channel are in PPD mode.  If IBT=off is enabled, then this can be used to count those cycles.  If it is not enabled, then this can count the number of cycles when that could have been taken advantage of.	0,1,2,3	0x0	null	0
iMC	0x83	0x1	UNC_M_POWER_CKE_CYCLES.RANK0	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x2	UNC_M_POWER_CKE_CYCLES.RANK1	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x4	UNC_M_POWER_CKE_CYCLES.RANK2	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x8	UNC_M_POWER_CKE_CYCLES.RANK3	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x10	UNC_M_POWER_CKE_CYCLES.RANK4	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x20	UNC_M_POWER_CKE_CYCLES.RANK5	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x40	UNC_M_POWER_CKE_CYCLES.RANK6	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x83	0x80	UNC_M_POWER_CKE_CYCLES.RANK7	Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).	0,1,2,3	0x0	null	0
iMC	0x86	0x0	UNC_M_POWER_CRITICAL_THROTTLE_CYCLES	Counts the number of cycles when the iMC is in critical thermal throttling.  When this happens, all traffic is blocked.  This should be rare unless something bad is going on in the platform.  There is no filtering by rank for this event.	0,1,2,3	0x0	null	0
iMC	0x43	0x0	UNC_M_POWER_SELF_REFRESH	Counts the number of cycles when the iMC is in self-refresh and the iMC still has a clock.  This happens in some package C-states.  For example, the PCU may ask the iMC to enter self-refresh even though some of the cores are still processing.  One use of this is for Monroe technology.  Self-refresh is required during package C3 and C6, but there is no clock in the iMC at this time, so it is not possible to count these cases.	0,1,2,3	0x0	null	0
iMC	0x41	0x1	UNC_M_POWER_THROTTLE_CYCLES.RANK0	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x2	UNC_M_POWER_THROTTLE_CYCLES.RANK1	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x4	UNC_M_POWER_THROTTLE_CYCLES.RANK2	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x8	UNC_M_POWER_THROTTLE_CYCLES.RANK3	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x10	UNC_M_POWER_THROTTLE_CYCLES.RANK4	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x20	UNC_M_POWER_THROTTLE_CYCLES.RANK5	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x40	UNC_M_POWER_THROTTLE_CYCLES.RANK6	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x41	0x80	UNC_M_POWER_THROTTLE_CYCLES.RANK7	Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.	0,1,2,3	0x0	null	0
iMC	0x8	0x1	UNC_M_PREEMPTION.RD_PREEMPT_RD	Counts the number of times a read in the iMC preempts another read or write.  Generally reads to an open page are issued ahead of requests to closed pages.  This improves the page hit rate of the system.  However, high priority requests can cause pages of active requests to be closed in order to get them out.  This will reduce the latency of the high-priority request at the expense of lower bandwidth and increased overall average latency.	0,1,2,3	0x0	null	0
iMC	0x8	0x2	UNC_M_PREEMPTION.RD_PREEMPT_WR	Counts the number of times a read in the iMC preempts another read or write.  Generally reads to an open page are issued ahead of requests to closed pages.  This improves the page hit rate of the system.  However, high priority requests can cause pages of active requests to be closed in order to get them out.  This will reduce the latency of the high-priority request at the expense of lower bandwidth and increased overall average latency.	0,1,2,3	0x0	null	0
iMC	0x2	0x2	UNC_M_PRE_COUNT.PAGE_CLOSE	Counts the number of DRAM Precharge commands sent on this channel.	0,1,2,3	0x0	null	0
iMC	0x2	0x1	UNC_M_PRE_COUNT.PAGE_MISS	Counts the number of DRAM Precharge commands sent on this channel.	0,1,2,3	0x0	null	0
iMC	0x12	0x0	UNC_M_RPQ_CYCLES_FULL	Counts the number of cycles when the Read Pending Queue is full.  When the RPQ is full, the HA will not be able to issue any additional read requests into the iMC.  This count should be similar count in the HA which tracks the number of cycles that the HA has no RPQ credits, just somewhat smaller to account for the credit return overhead.  We generally do not expect to see RPQ become full except for potentially during Write Major Mode or while running with slow DRAM.  This event only tracks non-ISOC queue entries.	0,1,2,3	0x0	null	0
iMC	0x11	0x0	UNC_M_RPQ_CYCLES_NE	Counts the number of cycles that the Read Pending Queue is not empty.  This can then be used to calculate the average occupancy (in conjunction with the Read Pending Queue Occupancy count).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This filter is to be used in conjunction with the occupancy filter so that one can correctly track the average occupancies for schedulable entries and scheduled requests.	0,1,2,3	0x0	null	0
iMC	0x10	0x0	UNC_M_RPQ_INSERTS	Counts the number of allocations into the Read Pending Queue.  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This includes both ISOCH and non-ISOCH requests.	0,1,2,3	0x0	null	0
iMC	0x80	0x0	UNC_M_RPQ_OCCUPANCY	Accumulates the occupancies of the Read Pending Queue each cycle.  This can then be used to calculate both the average occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC. They deallocate after the CAS command has been issued to memory.	0,1,2,3	0x0	null	0
iMC	0x22	0x0	UNC_M_WPQ_CYCLES_FULL	Counts the number of cycles when the Write Pending Queue is full.  When the WPQ is full, the HA will not be able to issue any additional read requests into the iMC.  This count should be similar count in the HA which tracks the number of cycles that the HA has no WPQ credits, just somewhat smaller to account for the credit return overhead.	0,1,2,3	0x0	null	0
iMC	0x21	0x0	UNC_M_WPQ_CYCLES_NE	Counts the number of cycles that the Write Pending Queue is not empty.  This can then be used to calculate the average queue occupancy (in conjunction with the WPQ Occupancy Accumulation count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.	0,1,2,3	0x0	null	0
iMC	0x20	0x0	UNC_M_WPQ_INSERTS	Counts the number of allocations into the Write Pending Queue.  This can then be used to calculate the average queuing latency (in conjunction with the WPQ occupancy count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.	0,1,2,3	0x0	null	0
iMC	0x81	0x0	UNC_M_WPQ_OCCUPANCY	Accumulates the occupancies of the Write Pending Queue each cycle.  This can then be used to calculate both the average queue occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.  So, we provide filtering based on if the request has posted or not.  By using the 'not posted' filter, we can track how long writes spent in the iMC before completions were sent to the HA.  The 'posted' filter, on the other hand, provides information about how much queueing is actually happenning in the iMC for writes before they are actually issued to memory.  High average occupancies will generally coincide with high write major mode counts.	0,1,2,3	0x0	null	0
iMC	0x23	0x0	UNC_M_WPQ_READ_HIT	Counts the number of times a request hits in the WPQ (write-pending queue).  The iMC allows writes and reads to pass up other writes to different addresses.  Before a read or a write is issued, it will first CAM the WPQ to see if there is a write pending to that address.  When reads hit, they are able to directly pull their data from the WPQ instead of going to memory.  Writes that hit will overwrite the existing data.  Partial writes that hit will not need to do underfill reads and will simply update their relevant sections.	0,1,2,3	0x0	null	0
iMC	0x24	0x0	UNC_M_WPQ_WRITE_HIT	Counts the number of times a request hits in the WPQ (write-pending queue).  The iMC allows writes and reads to pass up other writes to different addresses.  Before a read or a write is issued, it will first CAM the WPQ to see if there is a write pending to that address.  When reads hit, they are able to directly pull their data from the WPQ instead of going to memory.  Writes that hit will overwrite the existing data.  Partial writes that hit will not need to do underfill reads and will simply update their relevant sections.	0,1,2,3	0x0	null	0
iMC	0x0	0x0	UNC_M_CLOCKTICKS	Uncore Fixed Counter - uclks	0,1,2,3	0x0	null	0
