# Performance Monitoring Events for Intel(R) Xeon(R) processor E5 family Based on the Sandy Bridge-EP Microarchitecture - V20
# 9/16/2016 11:34:57 AM
# Copyright (c) 2007 - 2016 Intel Corporation. All rights reserved.
UNIT	CODE	UMASK	NAME	DESCRIPTION	COUNTER	OTHER	FILTER	INTERNAL
CBO	0x0	0x0	UNC_C_CLOCKTICKS	tbd	0,1,2,3	0x0	null	0
CBO	0x1f	0x0	UNC_C_COUNTER0_OCCUPANCY	Since occupancy counts can only be captured in the Cbo's 0 counter, this event allows a user to capture occupancy related information by filtering the Cb0 occupancy count captured in Counter 0.   The filtering available is found in the control register - threshold, invert and edge detect.   E.g. setting threshold to 1 can effectively monitor how many cycles the monitored queue has an entry.	1,2,3	0x0	null	0
CBO	0x21	0x0	UNC_C_ISMQ_DRD_MISS_OCC	tbd	0,1	0x0	null	0
CBO	0x34	0x3	UNC_C_LLC_LOOKUP.DATA_READ	Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.	0,1	0x0	CBoFilter[22:18]	0
CBO	0x34	0x41	UNC_C_LLC_LOOKUP.NID	Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.	0,1	0x0	CBoFilter[22:18], CBoFilter[17:10]	0
CBO	0x34	0x9	UNC_C_LLC_LOOKUP.REMOTE_SNOOP	Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.	0,1	0x0	CBoFilter[22:18]	0
CBO	0x34	0x5	UNC_C_LLC_LOOKUP.WRITE	Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.	0,1	0x0	CBoFilter[22:18]	0
CBO	0x37	0x2	UNC_C_LLC_VICTIMS.E_STATE	Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.	0,1	0x0	null	0
CBO	0x37	0x8	UNC_C_LLC_VICTIMS.MISS	Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.	0,1	0x0	null	0
CBO	0x37	0x1	UNC_C_LLC_VICTIMS.M_STATE	Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.	0,1	0x0	null	0
CBO	0x37	0x40	UNC_C_LLC_VICTIMS.NID	Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.	0,1	0x0	CBoFilter[17:10]	0
CBO	0x37	0x4	UNC_C_LLC_VICTIMS.S_STATE	Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.	0,1	0x0	null	0
CBO	0x39	0x8	UNC_C_MISC.RFO_HIT_S	Miscellaneous events in the Cbo.	0,1	0x0	null	0
CBO	0x39	0x1	UNC_C_MISC.RSPI_WAS_FSE	Miscellaneous events in the Cbo.	0,1	0x0	null	0
CBO	0x39	0x4	UNC_C_MISC.STARTED	Miscellaneous events in the Cbo.	0,1	0x0	null	0
CBO	0x39	0x2	UNC_C_MISC.WC_ALIASING	Miscellaneous events in the Cbo.	0,1	0x0	null	0
CBO	0x1b	0x4	UNC_C_RING_AD_USED.DOWN_EVEN	Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1b	0x8	UNC_C_RING_AD_USED.DOWN_ODD	Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1b	0x1	UNC_C_RING_AD_USED.UP_EVEN	Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1b	0x2	UNC_C_RING_AD_USED.UP_ODD	Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1c	0x4	UNC_C_RING_AK_USED.DOWN_EVEN	Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1c	0x8	UNC_C_RING_AK_USED.DOWN_ODD	Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1c	0x1	UNC_C_RING_AK_USED.UP_EVEN	Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1c	0x2	UNC_C_RING_AK_USED.UP_ODD	Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1d	0x4	UNC_C_RING_BL_USED.DOWN_EVEN	Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1d	0x8	UNC_C_RING_BL_USED.DOWN_ODD	Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1d	0x1	UNC_C_RING_BL_USED.UP_EVEN	Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x1d	0x2	UNC_C_RING_BL_USED.UP_ODD	Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.	2,3	0x0	null	0
CBO	0x5	0x2	UNC_C_RING_BOUNCES.AK_CORE	tbd	0,1	0x0	null	0
CBO	0x5	0x4	UNC_C_RING_BOUNCES.BL_CORE	tbd	0,1	0x0	null	0
CBO	0x5	0x8	UNC_C_RING_BOUNCES.IV_CORE	tbd	0,1	0x0	null	0
CBO	0x1e	0xf	UNC_C_RING_IV_USED.ANY	Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in JKT.  Therefore, if one wants to monitor the 'Even' ring, they should select both UP_EVEN and DN_EVEN.  To monitor the 'Odd' ring, they should select both UP_ODD and DN_ODD.	2,3	0x0	null	0
CBO	0x6	0x1	UNC_C_RING_SINK_STARVED.AD_CACHE	tbd	0,1	0x0	null	0
CBO	0x6	0x2	UNC_C_RING_SINK_STARVED.AK_CORE	tbd	0,1	0x0	null	0
CBO	0x6	0x4	UNC_C_RING_SINK_STARVED.BL_CORE	tbd	0,1	0x0	null	0
CBO	0x6	0x8	UNC_C_RING_SINK_STARVED.IV_CORE	tbd	0,1	0x0	null	0
CBO	0x7	0x0	UNC_C_RING_SRC_THRTL	tbd	0,1	0x0	null	0
CBO	0x12	0x2	UNC_C_RxR_EXT_STARVED.IPQ	Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.	0,1	0x0	null	0
CBO	0x12	0x1	UNC_C_RxR_EXT_STARVED.IRQ	Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.	0,1	0x0	null	0
CBO	0x12	0x4	UNC_C_RxR_EXT_STARVED.ISMQ	Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.	0,1	0x0	null	0
CBO	0x12	0x8	UNC_C_RxR_EXT_STARVED.ISMQ_BIDS	Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.	0,1	0x0	null	0
CBO	0x13	0x4	UNC_C_RxR_INSERTS.IPQ	Counts number of allocations per cycle into the specified Ingress queue.	0,1	0x0	null	0
CBO	0x13	0x1	UNC_C_RxR_INSERTS.IRQ	Counts number of allocations per cycle into the specified Ingress queue.	0,1	0x0	null	0
CBO	0x13	0x2	UNC_C_RxR_INSERTS.IRQ_REJECTED	Counts number of allocations per cycle into the specified Ingress queue.	0,1	0x0	null	0
CBO	0x13	0x10	UNC_C_RxR_INSERTS.VFIFO	Counts number of allocations per cycle into the specified Ingress queue.	0,1	0x0	null	0
CBO	0x14	0x4	UNC_C_RxR_INT_STARVED.IPQ	Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.	0,1	0x0	null	0
CBO	0x14	0x1	UNC_C_RxR_INT_STARVED.IRQ	Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.	0,1	0x0	null	0
CBO	0x14	0x8	UNC_C_RxR_INT_STARVED.ISMQ	Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.	0,1	0x0	null	0
CBO	0x31	0x4	UNC_C_RxR_IPQ_RETRY.ADDR_CONFLICT	Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.	0,1	0x0	null	0
CBO	0x31	0x1	UNC_C_RxR_IPQ_RETRY.ANY	Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.	0,1	0x0	null	0
CBO	0x31	0x2	UNC_C_RxR_IPQ_RETRY.FULL	Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.	0,1	0x0	null	0
CBO	0x31	0x10	UNC_C_RxR_IPQ_RETRY.QPI_CREDITS	Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.	0,1	0x0	null	0
CBO	0x32	0x4	UNC_C_RxR_IRQ_RETRY.ADDR_CONFLICT	tbd	0,1	0x0	null	0
CBO	0x32	0x1	UNC_C_RxR_IRQ_RETRY.ANY	tbd	0,1	0x0	null	0
CBO	0x32	0x2	UNC_C_RxR_IRQ_RETRY.FULL	tbd	0,1	0x0	null	0
CBO	0x32	0x10	UNC_C_RxR_IRQ_RETRY.QPI_CREDITS	tbd	0,1	0x0	null	0
CBO	0x32	0x8	UNC_C_RxR_IRQ_RETRY.RTID	tbd	0,1	0x0	null	0
CBO	0x33	0x1	UNC_C_RxR_ISMQ_RETRY.ANY	Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.	0,1	0x0	null	0
CBO	0x33	0x2	UNC_C_RxR_ISMQ_RETRY.FULL	Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.	0,1	0x0	null	0
CBO	0x33	0x20	UNC_C_RxR_ISMQ_RETRY.IIO_CREDITS	Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.	0,1	0x0	null	0
CBO	0x33	0x10	UNC_C_RxR_ISMQ_RETRY.QPI_CREDITS	Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.	0,1	0x0	null	0
CBO	0x33	0x8	UNC_C_RxR_ISMQ_RETRY.RTID	Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.	0,1	0x0	null	0
CBO	0x11	0x4	UNC_C_RxR_OCCUPANCY.IPQ	Counts number of entries in the specified Ingress queue in each cycle.	0	0x0	null	0
CBO	0x11	0x1	UNC_C_RxR_OCCUPANCY.IRQ	Counts number of entries in the specified Ingress queue in each cycle.	0	0x0	null	0
CBO	0x11	0x2	UNC_C_RxR_OCCUPANCY.IRQ_REJECTED	Counts number of entries in the specified Ingress queue in each cycle.	0	0x0	null	0
CBO	0x11	0x10	UNC_C_RxR_OCCUPANCY.VFIFO	Counts number of entries in the specified Ingress queue in each cycle.	0	0x0	null	0
CBO	0x35	0x4	UNC_C_TOR_INSERTS.EVICTION	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	null	0
CBO	0x35	0xa	UNC_C_TOR_INSERTS.MISS_ALL	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	null	0
CBO	0x35	0x3	UNC_C_TOR_INSERTS.MISS_OPCODE	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[31:23]	0
CBO	0x35	0x48	UNC_C_TOR_INSERTS.NID_ALL	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[17:10]	0
CBO	0x35	0x44	UNC_C_TOR_INSERTS.NID_EVICTION	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[17:10]	0
CBO	0x35	0x4a	UNC_C_TOR_INSERTS.NID_MISS_ALL	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[17:10]	0
CBO	0x35	0x43	UNC_C_TOR_INSERTS.NID_MISS_OPCODE	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[31:23], CBoFilter[17:10]	0
CBO	0x35	0x41	UNC_C_TOR_INSERTS.NID_OPCODE	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[31:23], CBoFilter[17:10]	0
CBO	0x35	0x50	UNC_C_TOR_INSERTS.NID_WB	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[17:10]	0
CBO	0x35	0x1	UNC_C_TOR_INSERTS.OPCODE	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	CBoFilter[31:23]	0
CBO	0x35	0x10	UNC_C_TOR_INSERTS.WB	Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).	0,1	0x0	null	0
CBO	0x36	0x8	UNC_C_TOR_OCCUPANCY.ALL	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	null	0
CBO	0x36	0x4	UNC_C_TOR_OCCUPANCY.EVICTION	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	null	0
CBO	0x36	0xa	UNC_C_TOR_OCCUPANCY.MISS_ALL	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	null	0
CBO	0x36	0x3	UNC_C_TOR_OCCUPANCY.MISS_OPCODE	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[31:23]	0
CBO	0x36	0x48	UNC_C_TOR_OCCUPANCY.NID_ALL	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[17:10]	0
CBO	0x36	0x44	UNC_C_TOR_OCCUPANCY.NID_EVICTION	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[17:10]	0
CBO	0x36	0x4a	UNC_C_TOR_OCCUPANCY.NID_MISS_ALL	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[17:10]	0
CBO	0x36	0x43	UNC_C_TOR_OCCUPANCY.NID_MISS_OPCODE	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[31:23], CBoFilter[17:10]	0
CBO	0x36	0x41	UNC_C_TOR_OCCUPANCY.NID_OPCODE	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[31:23], CBoFilter[17:10]	0
CBO	0x36	0x1	UNC_C_TOR_OCCUPANCY.OPCODE	For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)	0	0x0	CBoFilter[31:23]	0
CBO	0x4	0x0	UNC_C_TxR_ADS_USED	tbd	0,1	0x0	null	0
CBO	0x2	0x1	UNC_C_TxR_INSERTS.AD_CACHE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x2	0x10	UNC_C_TxR_INSERTS.AD_CORE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x2	0x2	UNC_C_TxR_INSERTS.AK_CACHE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x2	0x20	UNC_C_TxR_INSERTS.AK_CORE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x2	0x4	UNC_C_TxR_INSERTS.BL_CACHE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x2	0x40	UNC_C_TxR_INSERTS.BL_CORE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x2	0x8	UNC_C_TxR_INSERTS.IV_CACHE	Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.	0,1	0x0	null	0
CBO	0x3	0x2	UNC_C_TxR_STARVED.AK	Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.	0,1	0x0	null	0
CBO	0x3	0x4	UNC_C_TxR_STARVED.BL	Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.	0,1	0x0	null	0
