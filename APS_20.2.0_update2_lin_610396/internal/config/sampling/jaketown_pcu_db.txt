# Performance Monitoring Events for Intel(R) Xeon(R) processor E5 family Based on the Sandy Bridge-EP Microarchitecture - V20
# 9/16/2016 11:34:57 AM
# Copyright (c) 2007 - 2016 Intel Corporation. All rights reserved.
UNIT	CODE	UMASK	NAME	DESCRIPTION	COUNTER	OTHER	FILTER	INTERNAL
PCU	0x0	0x0	UNC_P_CLOCKTICKS	The PCU runs off a fixed 800 MHz clock.  This event counts the number of pclk cycles measured while the counter was enabled.  The pclk, like the Memory Controller's dclk, counts at a constant rate making it a good measure of actual wall time.	0,1,2,3	0x0	null	0
PCU	0x3	0x0	UNC_P_CORE0_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x4	0x0	UNC_P_CORE1_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x5	0x0	UNC_P_CORE2_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x6	0x0	UNC_P_CORE3_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x7	0x0	UNC_P_CORE4_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x8	0x0	UNC_P_CORE5_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x9	0x0	UNC_P_CORE6_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0xa	0x0	UNC_P_CORE7_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions.  There is one event per core.	0,1,2,3	0x0	null	1
PCU	0x1e	0x0	UNC_P_DEMOTIONS_CORE0	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0x1f	0x0	UNC_P_DEMOTIONS_CORE1	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0x20	0x0	UNC_P_DEMOTIONS_CORE2	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	null	0
PCU	0x21	0x0	UNC_P_DEMOTIONS_CORE3	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0x22	0x0	UNC_P_DEMOTIONS_CORE4	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0x23	0x0	UNC_P_DEMOTIONS_CORE5	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0x24	0x0	UNC_P_DEMOTIONS_CORE6	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0x25	0x0	UNC_P_DEMOTIONS_CORE7	Counts the number of times when a configurable cores had a C-state demotion	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0xb	0x0	UNC_P_FREQ_BAND0_CYCLES	Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.	0,1,2,3	0x0	PCUFilter[7:0]	0
PCU	0xc	0x0	UNC_P_FREQ_BAND1_CYCLES	Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.	0,1,2,3	0x0	PCUFilter[15:8]	0
PCU	0xd	0x0	UNC_P_FREQ_BAND2_CYCLES	Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.	0,1,2,3	0x0	PCUFilter[23:16]	0
PCU	0xe	0x0	UNC_P_FREQ_BAND3_CYCLES	Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.	0,1,2,3	0x0	PCUFilter[31:24]	0
PCU	0x7	0x0	UNC_P_FREQ_MAX_CURRENT_CYCLES	Counts the number of cycles when current is the upper limit on frequency.	0,1,2,3	0x0	null	0
PCU	0x4	0x0	UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES	Counts the number of cycles when thermal conditions are the upper limit on frequency.  This is related to the THERMAL_THROTTLE CYCLES_ABOVE_TEMP event, which always counts cycles when we are above the thermal temperature.  This event (STRONGEST_UPPER_LIMIT) is sampled at the output of the algorithm that determines the actual frequency, while THERMAL_THROTTLE looks at the input.	0,1,2,3	0x0	null	0
PCU	0x6	0x0	UNC_P_FREQ_MAX_OS_CYCLES	Counts the number of cycles when the OS is the upper limit on frequency.	0,1,2,3	0x0	null	0
PCU	0x5	0x0	UNC_P_FREQ_MAX_POWER_CYCLES	Counts the number of cycles when power is the upper limit on frequency.	0,1,2,3	0x0	null	0
PCU	0x1	0x0	UNC_P_FREQ_MIN_IO_P_CYCLES	Counts the number of cycles when IO P Limit is preventing us from dropping the frequency lower.  This algorithm monitors the needs to the IO subsystem on both local and remote sockets and will maintain a frequency high enough to maintain good IO BW.  This is necessary for when all the IA cores on a socket are idle but a user still would like to maintain high IO Bandwidth.	0,1,2,3	0x0	null	1
PCU	0x2	0x0	UNC_P_FREQ_MIN_PERF_P_CYCLES	Counts the number of cycles when Perf P Limit is preventing us from dropping the frequency lower.  Perf P Limit is an algorithm that takes input from remote sockets when determining if a socket should drop it's frequency down.  This is largely to minimize increases in snoop and remote read latencies.	0,1,2,3	0x0	null	1
PCU	0x0	0x0	UNC_P_FREQ_TRANS_CYCLES	Counts the number of cycles when the system is changing frequency.  This can not be filtered by thread ID.  One can also use it with the occupancy counter that monitors number of threads in C0 to estimate the performance impact that frequency transitions had on the system.	0,1,2,3	0x0	null	1
PCU	0x2f	0x0	UNC_P_MEMORY_PHASE_SHEDDING_CYCLES	Counts the number of cycles that the PCU has triggered memory phase shedding.  This is a mode that can be run in the iMC physicals that saves power at the expense of additional latency.	0,1,2,3	0x0	null	0
PCU	0x80	0x40	UNC_P_POWER_STATE_OCCUPANCY.CORES_C0	This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.	0,1,2,3	0x0	null	0
PCU	0x80	0x80	UNC_P_POWER_STATE_OCCUPANCY.CORES_C3	This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.	0,1,2,3	0x0	null	0
PCU	0x80	0xc0	UNC_P_POWER_STATE_OCCUPANCY.CORES_C6	This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.	0,1,2,3	0x0	null	0
PCU	0xa	0x0	UNC_P_PROCHOT_EXTERNAL_CYCLES	Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip.	0,1,2,3	0x0	null	0
PCU	0x9	0x0	UNC_P_PROCHOT_INTERNAL_CYCLES	Counts the number of cycles that we are in Interal PROCHOT mode.  This mode is triggered when a sensor on the die determines that we are too hot and must throttle to avoid damaging the chip.	0,1,2,3	0x0	null	0
PCU	0xb	0x0	UNC_P_TOTAL_TRANSITION_CYCLES	Number of cycles spent performing core C state transitions across all cores.	0,1,2,3	0x0	null	1
PCU	0x3	0x0	UNC_P_VOLT_TRANS_CYCLES_CHANGE	Counts the number of cycles when the system is changing voltage.  There is no filtering supported with this event.  One can use it as a simple event, or use it conjunction with the occupancy events to monitor the number of cores or threads that were impacted by the transition.  This event is calculated by or'ing together the increasing and decreasing events.	0,1,2,3	0x0	null	0
PCU	0x2	0x0	UNC_P_VOLT_TRANS_CYCLES_DECREASE	Counts the number of cycles when the system is decreasing voltage.  There is no filtering supported with this event.  One can use it as a simple event, or use it conjunction with the occupancy events to monitor the number of cores or threads that were impacted by the transition.	0,1,2,3	0x0	null	0
PCU	0x1	0x0	UNC_P_VOLT_TRANS_CYCLES_INCREASE	Counts the number of cycles when the system is increasing voltage.  There is no filtering supported with this event.  One can use it as a simple event, or use it conjunction with the occupancy events to monitor the number of cores or threads that were impacted by the transition.	0,1,2,3	0x0	null	0
PCU	0x32	0x0	UNC_P_VR_HOT_CYCLES	tbd	0,1,2,3	0x0	null	0
