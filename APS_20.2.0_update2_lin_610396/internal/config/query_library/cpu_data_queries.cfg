<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
  >
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <instanceCountQuery id="CPUSampleCount" displayName="%CPUSampleCount">
      <instanceDbTable>cpu_data::dd_sample</instanceDbTable>
      <displayAttributes>
        <selfFormat>count</selfFormat>
        <totalFormat>countAndBar</totalFormat>
      </displayAttributes>
    </instanceCountQuery>
    <infoQuery id="CPUSample" displayName="%CPUSample">
      <dbPath>cpu_data::dd_sample</dbPath>
      <displayAttributes>
        <align>bottom</align>
        <marker>end</marker>
        <timelineGraphColor>100,150,80</timelineGraphColor>
      </displayAttributes>
    </infoQuery>
    <timeQuery id="CPUIoStatePercentage" displayName="%CPUIoStatePercentage">
      <instanceDbTable>cpu_io_usage_data::dd_cpu_io_state</instanceDbTable>
      <instanceBandTable>dd_cpu_io_state</instanceBandTable>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
      <expand>
        <xsl:choose>
          <xsl:when test="(exsl:ctx('targetOS') = 'Windows')">
            <queryRef>/CPUIoState[%Active]</queryRef>
          </xsl:when>
          <xsl:otherwise>
            <queryRef>/CPUIoState</queryRef>
          </xsl:otherwise>
        </xsl:choose>
      </expand>
      <maxEval>100</maxEval>
    </timeQuery>
    <infoQuery id="CPUIoState" displayName="%CPUIoState">
      <dbPath>cpu_io_usage_data::dd_cpu_io_state</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="IoWaitTime" displayName="%IoWaitTime">
      <helpKeyword>configs.iowaittime_iowaittimedescription</helpKeyword>
      <description>%IoWaitTimeDescription</description>
      <valueEval><![CDATA[ query("/CPUIoStatePercentage/CPUIoState[%Iowait]") * $logicalCPUCount]]></valueEval>
      <valueType>time</valueType>
    </derivedQuery>
    <xsl:if test="exsl:is_table_exist('cpu_data')">
      <timeQuery id="CPUTimeAllCoresCumulative" displayName="%CPUTime">
        <queryInherit>/CPUTime</queryInherit>
        <maxEval>$logicalCPUCount * 100</maxEval>
      </timeQuery>
      <timeQuery id="CPUTimePercentage" displayName="%CPUTimePercentage">
        <queryInherit>/CPUTime</queryInherit>
        <displayAttributes>
          <selfFormat>percent</selfFormat>
        </displayAttributes>
      </timeQuery>
      <timeQuery id="GlobalCPUTime" displayName="%CPUTime">
        <queryInherit>/CPUTime</queryInherit>
        <instanceBandTable>global_time_interval_metrics</instanceBandTable>
      </timeQuery>
    </xsl:if>
    <derivedQuery id="CPUOverheadTimeIssueFormula">
      <valueEval><![CDATA[ (query("/CPUOverheadTime") > (query("/CPUTime") * .10)) && ((query("/CPUOverheadTime") / queryAll("/CPUTime", true)) > .05) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUOverheadTime" displayName="%OverheadTime">
      <helpKeyword>configs.overheadtime_overheadtimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionType[%Overhead]") + queryOptional("/CPUTime/CPUTypeCsFunctionType[%SystemOverhead]") + queryOptional("/CPUTime/CPUTypeCsFunctionType[%Executor]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUOverheadTime") > (query("/CPUTime") * .10)) * ((query("/CPUTime") / queryAll("/CPUTime", true)) > .05) ]]></issueEval>
      <issueText>%OverheadTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%OverheadTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinTimeIssueFormula">
      <valueEval><![CDATA[ (query("/CPUSpinTime") > (query("/CPUTime") * .10)) && ((query("/CPUSpinTime") / queryAll("/CPUTime", true)) > .05) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinTime" displayName="%SpinTime">
      <helpKeyword>configs.spintime_spintimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionType[%Sync]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinTime") > (query("/CPUTime") * .10)) * ((query("/CPUTime") / queryAll("/CPUTime", true)) > .05) ]]></issueEval>
      <issueText>%SpinTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%SpinTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnBarrierTimeIssueFormula">
      <valueEval><![CDATA[ (query("/CPUSpinBusyWaitOnBarrierTime") > (query("/CPUTime") * .10)) && ((query("/CPUSpinBusyWaitOnBarrierTime") / queryAll("/CPUTime", true)) > .05) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnBarrierTime" displayName="%SpinBusyWaitOnBarrierTime">
      <helpKeyword>configs.spinbusywaitonbarriertime_spinbusywaitonbarriertimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%BusyWaitOnBarrier]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnBarrierTime") > (query("/CPUTime") * .10)) * ((query("/CPUTime") / queryAll("/CPUTime", true)) > .05) ]]></issueEval>
      <issueText>%SpinBusyWaitOnBarrierTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%SpinBusyWaitOnBarrierTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnBarrierWallTime" displayName="%SpinBusyWaitOnBarrierWallTime">
      <helpKeyword>configs.spinbusywaitonbarrierwalltime_spinbusywaitonbarrierwalltimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUSpinBusyWaitOnBarrierTime") / query("/OpenMPThreadCount") ]]></valueEval>
      <valueType>time</valueType>
      <description>%SpinBusyWaitOnBarrierWallTimeDescription</description>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnBarrierWallTime") > (query("/TotalElapsedTimeNoPause") * .10)) * ((query("/CPUTime") / queryAll("/CPUTime", true)) > .05) ]]></issueEval>
      <issueText>%SpinBusyWaitOnBarrierTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnBarrierWallTimeForSummary">
      <queryInherit>/CPUSpinBusyWaitOnBarrierWallTime</queryInherit>
      <valueEval><![CDATA[ query("/CPUSpinBusyWaitOnBarrierTime") / query("/TotalOpenMPThreadCount") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnLockTimeIssueFormula">
      <valueEval><![CDATA[ (query("/CPUSpinBusyWaitOnLockTime") > (query("/CPUTime") * .10)) && ((query("/CPUSpinBusyWaitOnLockTime") / queryAll("/CPUTime", true)) > .05) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnLockTime" displayName="%SpinBusyWaitOnLockTime">
      <helpKeyword>configs.spinbusywaitonlocktime_spinbusywaitonlocktimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%BusyWaitOnLock]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnLockTime") > (query("/CPUTime") * .10)) * ((query("/CPUTime") / queryAll("/CPUTime", true)) > .05) ]]></issueEval>
      <issueText>%SpinBusyWaitOnLockTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%SpinBusyWaitOnLockTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnLockWallTime" displayName="%SpinBusyWaitOnLockWallTime">
      <helpKeyword>configs.spinbusywaitonlockwalltime_spinbusywaitonlockwalltimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUSpinBusyWaitOnLockTime") / query("/OpenMPThreadCount")  + query("/ProcessElapsedTime") - query("/ProcessElapsedTime")]]></valueEval>
      <valueType>time</valueType>
      <description>%SpinBusyWaitOnLockWallTimeDescription</description>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnLockWallTime") > (query("/TotalElapsedTimeNoPause") * .10)) ]]></issueEval>
      <issueText>%SpinBusyWaitOnLockTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/CPUSampleCount") >= 10 * query("/OpenMPThreadCount")]]></confidenceEval>
      <confidenceText>%CPUMetricConfidenceText</confidenceText>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
        <boolean:disableFormulaDescription>true</boolean:disableFormulaDescription>
      </displayAttributes>
      <percentBases>
        <queryRef>/FullProcessElapsedTime</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnLockWallTimePercentsElapsed" displayName="%SpinBusyWaitOnLockTimePercentsElapsed">
      <helpKeyword>configs.spinbusywaitonlocktimepercentselapsed_spinbusywaitonlockwalltimepercentselapseddescription</helpKeyword>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('openmpProcessCount') = 1)">
          <valueEval><![CDATA[ query("/CPUSpinBusyWaitOnLockWallTime") / query("/TotalElapsedTimeNoPause")]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/CPUSpinBusyWaitOnLockWallTime") * 10000000000.0 / (query("/ProcessEndTsc") - query("/ProcessStartTsc") + 1)]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>ratio</valueType>
      <minEval>0</minEval>
      <description>%SpinBusyWaitOnLockWallTimePercentsElapsedDescription</description>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnLockWallTime") > (query("/TotalElapsedTimeNoPause") * .10)) ]]></issueEval>
      <issueText>%SpinBusyWaitOnLockTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
        <boolean:disableFormulaDescription>true</boolean:disableFormulaDescription>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnLockWallTimeForSummary">
      <queryInherit>/CPUSpinBusyWaitOnLockWallTime</queryInherit>
      <valueEval><![CDATA[ query("/CPUSpinBusyWaitOnLockTime") / query("/TotalOpenMPThreadCount") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinOtherTime" displayName="%SpinOtherTime">
      <helpKeyword>configs.spinothertime_spinothertimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUSpinTime") - queryOptional("/CPUTime/CPUTypeCsFunctionSubtype[%BusyWaitOnBarrier]") - queryOptional("/CPUTime/CPUTypeCsFunctionSubtype[%BusyWaitOnLock]") - queryOptional("/CPUTime/CPUTypeCsFunctionSubtype[%MPISpinning]") ]]></valueEval>
      <valueType>time</valueType>
      <description>%SpinOtherTimeDescription</description>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <minEval>0</minEval>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnMPISpinningTimePerProcess" displayName="%SpinBusyWaitOnMPISpinningTime2">
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%MPISpinning]") + query("/ProcessElapsedTime") - query("/ProcessElapsedTime") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnMPISpinningTime") > (queryAll("/GlobalElapsedTime", true) * .10)) ]]></issueEval>
      <issueText>%SpinBusyWaitOnMPISpinningTimeIssueText</issueText>
      <description>%CPUSpinBusyWaitOnMPISpinningTimeDescription</description>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnMPISpinningTimePerProcessSummary" displayName="%SpinBusyWaitOnMPISpinningTime2">
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%MPISpinning]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnMPISpinningTime") > (queryAll("/GlobalElapsedTime", true) * .10)) ]]></issueEval>
      <issueText>%SpinBusyWaitOnMPISpinningTimeIssueText</issueText>
      <description>%CPUSpinBusyWaitOnMPISpinningTimeDescription</description>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnMPISpinningTime" displayName="%SpinBusyWaitOnMPISpinningTime2">
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%MPISpinning]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnMPISpinningTime") > (query("/TotalElapsedTimeNoPause") * .20)) ]]></issueEval>
      <issueText>%SpinBusyWaitOnMPISpinningTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%CPUSpinBusyWaitOnMPISpinningTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnMPISpinningTimeForTimeline" displayName="%SpinBusyWaitOnMPISpinningTimeForTimeline">
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%MPISpinning]")]]></valueEval>
      <valueType>time</valueType>
      <description>%CPUSpinBusyWaitOnMPISpinningTimeDescription</description>
      <displayAttributes>
        <timelineGraphColor>255,242,0</timelineGraphColor>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>percentAndBar</totalFormat>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnMPISpinningTimeGlobal">
      <queryInherit>/CPUSpinBusyWaitOnMPISpinningTimeForTimeline</queryInherit>
      <maxEval>$logicalCPUCount * 100</maxEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinBusyWaitOnMPISpinningTimePercentElapsed" displayName="%SpinBusyWaitOnMPISpinningTimePercentElapsed">
      <valueEval><![CDATA[ query("/CPUTime/CPUTypeCsFunctionSubtype[%MPISpinning]") / query("/ProcessElapsedTime") ]]></valueEval>
      <valueType>ratio</valueType>
      <issueEval><![CDATA[ (query("/CPUSpinBusyWaitOnMPISpinningTime") > (query("/TotalElapsedTimeNoPause") * .20)) ]]></issueEval>
      <issueText>%SpinBusyWaitOnMPISpinningTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%CPUSpinBusyWaitOnMPISpinningTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinOtherWallTime" displayName="%SpinOtherTime">
      <helpKeyword>configs.spinothertime_spinothertimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUSpinOtherTime") / query("/OpenMPThreadCount") ]]></valueEval>
      <valueType>time</valueType>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%SpinOtherTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinOtherWallTimeForSummary">
      <queryInherit>/CPUSpinOtherWallTime</queryInherit>
      <valueEval><![CDATA[ query("/CPUSpinOtherTime") / query("/TotalOpenMPThreadCount") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUSpinOverheadOtherWallTime" displayName="%OverheadOtherTime">
      <helpKeyword>configs.overheadothertime_spinoverheadothertimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUOverheadOtherWallTime") + query("/CPUSpinOtherWallTime") + query("/ProcessElapsedTime") - query("/ProcessElapsedTime")]]></valueEval>
      <valueType>time</valueType>
      <confidenceEval><![CDATA[ query("/CPUSampleCount") >= 10 * query("/OpenMPThreadCount")]]></confidenceEval>
      <confidenceText>%CPUMetricConfidenceText</confidenceText>
      <description>%SpinOverheadOtherTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
        <boolean:disableFormulaDescription>true</boolean:disableFormulaDescription>
      </displayAttributes>
      <percentBases>
        <queryRef>/FullProcessElapsedTime</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="CPUSpinOverheadOtherWallTimePercentsElapsed" displayName="%OverheadOtherTimePercentsElapsed">
      <helpKeyword>configs.overheadothertimepercentselapsed_spinoverheadothertimepercentselapseddescription</helpKeyword>
      <xsl:choose>
        <xsl:when test="(exsl:ctx('openmpProcessCount') = 1)">
          <valueEval><![CDATA[ query("/CPUSpinOverheadOtherWallTime") / query("/TotalElapsedTimeNoPause")]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/CPUSpinOverheadOtherWallTime") * 10000000000.0 / (query("/ProcessEndTsc") - query("/ProcessStartTsc") + 1)]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>ratio</valueType>
      <minEval>0</minEval>
      <description>%SpinOverheadOtherTimePercentsElapsedDescription</description>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
        <boolean:disableFormulaDescription>true</boolean:disableFormulaDescription>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUSpinOverheadOtherWallTimeForSummary">
      <queryInherit>/CPUSpinOverheadOtherWallTime</queryInherit>
      <valueEval><![CDATA[ query("/CPUOverheadOtherWallTimeForSummary") + query("/CPUSpinOtherWallTimeForSummary") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CPUTimeDerived" displayName="%CPUTime">
      <helpKeyword>configs.cputime_cputimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime") ]]></valueEval>
      <valueType>time</valueType>
      <description>%CPUTimeDescription</description>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
      </displayAttributes>
    </derivedQuery>
    <timeQuery id="CPUTimeForGPUPacketStage">
      <xsl:if test="exsl:is_table_exist('cpu_data')">
        <queryInherit>/CPUTime</queryInherit>
        <instanceBandTable>gpu_packet_stage_grouper</instanceBandTable>
      </xsl:if>
    </timeQuery>
    <derivedQuery id="CPUOverheadAndSpinTime" displayName="%SpinAndOverheadTime">
      <helpKeyword>configs.spinandoverheadtime_overheadtimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUOverheadTime")  + query("/CPUSpinTime") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ ( query("/CPUOverheadAndSpinTime") > (query("/CPUTime") * .10) ) && ( (query("/CPUOverheadAndSpinTime") / queryAll("/CPUTime", true)) > .05 ) ]]></issueEval>
      <issueText>%OverheadTimeIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%OverheadTimeDescription</description>
      <displayAttributes>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>231,73,17</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUOverheadAndSpinTimeWithSummaryIssues" displayName="%SpinAndOverheadTime">
      <queryInherit>/CPUTimeSummary</queryInherit>
      <helpKeyword>configs.spinandoverheadtime_overheadtimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUOverheadTime")  + query("/CPUSpinTime") ]]></valueEval>
      <valueType>time</valueType>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%OverheadTimeDescription</description>
    </derivedQuery>
    <derivedQuery id="CPUOverheadAndSpinTimePercentage" displayName="%SpinAndOverheadTimePercentage">
      <queryInherit>/CPUOverheadAndSpinTimeWithSummaryIssues</queryInherit>
      <valueEval><![CDATA[ query("/CPUOverheadAndSpinTime") / queryAll("/CPUTime", true) ]]></valueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="CPUOverheadAndSpinTimeString" displayName="%SpinAndOverheadTime">
      <queryInherit>/CPUOverheadAndSpinTimeWithSummaryIssues</queryInherit>
      <valueEval><![CDATA[ t#query("/CPUOverheadAndSpinTime")  + " (" + %#query("/CPUOverheadAndSpinTimePercentage") + " of CPU Time)"]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="CPUUserTime" displayName="%UserTime">
      <helpKeyword>configs.usertime_usertimedescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime") - queryOptional("/CPUOverheadAndSpinTime")]]></valueEval>
      <description>%UserTimeDescription</description>
      <valueType>time</valueType>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <timelineGraphColor>6,249,13</timelineGraphColor>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>percentAndBar</totalFormat>
        <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUOverheadAndSpinTimeCapped" displayName="%SpinAndOverheadTime">
      <queryInherit>/CPUOverheadAndSpinTime</queryInherit>
    </derivedQuery>
    <derivedQuery id="CPUOverheadAndSpinTimeAllCoresCumulative" displayName="%SpinAndOverheadTime">
      <queryInherit>/CPUOverheadAndSpinTime</queryInherit>
      <maxEval>$logicalCPUCount * 100</maxEval>
    </derivedQuery>
    <derivedQuery id="CPUThreadOversubscription" displayName="%ThreadOversubscription">
      <helpKeyword>configs.threadoversubscription_threadoversubscriptiondescription</helpKeyword>
      <valueEval><![CDATA[ query("/CPUTime/ConcurrencyUtilization[%Over]") ]]></valueEval>
      <valueType>time</valueType>
      <issueEval><![CDATA[ query("/CPUThreadOversubscription") > (query("/CPUTime") * .10) ]]></issueEval>
      <issueText>%ThreadOversubscriptionIssueText</issueText>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <description>%ThreadOversubscriptionDescription</description>
    </derivedQuery>
    <derivedQuery id="CPUThreadOversubscriptionPercentage">
      <queryInherit>/CPUThreadOversubscription</queryInherit>
      <valueEval><![CDATA[ query("/CPUThreadOversubscription") / query("/CPUTime") ]]></valueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="CPUThreadOversubscriptionString" displayName="%ThreadOversubscription">
      <queryInherit>/CPUThreadOversubscription</queryInherit>
      <valueEval><![CDATA[ t#query("/CPUThreadOversubscription")  + " (" + %#query("/CPUThreadOversubscriptionPercentage") + " of CPU Time)"]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="CPUSpinTimeParent">
      <queryInherit>/CPUSpinTime</queryInherit>
      <displayAttributes>
        <xsl:choose>
          <xsl:when test="exsl:IsNonEmptyTableExist('barrier_imbalance_data')">
            <boolean:expand>false</boolean:expand>
          </xsl:when>
          <xsl:otherwise>
            <boolean:expand>true</boolean:expand>
          </xsl:otherwise>
        </xsl:choose>
      </displayAttributes>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <xsl:if test="exsl:IsNonEmptyTableExist('dd_function_subtype')">
        <expand>
          <vectorQuery id="CPUSpinTimeExpanded">
            <queryRef>/CPUSpinBusyWaitOnBarrierTime</queryRef>
            <queryRef>/CPUSpinBusyWaitOnLockTime</queryRef>
            <queryRef>/CPUSpinBusyWaitOnMPISpinningTime</queryRef>
            <queryRef>/CPUSpinOtherTime</queryRef>
          </vectorQuery>
        </expand>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="CPUOverheadTimeParent">
      <queryInherit>/CPUOverheadTime</queryInherit>
      <displayAttributes>
        <xsl:choose>
          <xsl:when test="exsl:IsNonEmptyTableExist('barrier_imbalance_data')">
            <boolean:expand>false</boolean:expand>
          </xsl:when>
          <xsl:otherwise>
            <boolean:expand>true</boolean:expand>
          </xsl:otherwise>
        </xsl:choose>
      </displayAttributes>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <xsl:if test="exsl:IsNonEmptyTableExist('dd_function_subtype')">
        <expand>
          <vectorQuery id="CPUOverheadTimeExpanded">
            <queryRef>/CPUOverheadWorkForkingTime</queryRef>
            <queryRef>/CPUOverheadWorkSchedulingAndTaskingTime</queryRef>
            <queryRef>/CPUOverheadReductionTime</queryRef>
            <queryRef>/CPUOverheadAtomicsTime</queryRef>
            <queryRef>/CPUOverheadOtherTime</queryRef>
          </vectorQuery>
        </expand>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="CPUTimeParent" displayName="%CPUTime">
      <queryInherit>/CPUTimeDerived</queryInherit>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
        <boolean:synchronizeChildrenFormats>false</boolean:synchronizeChildrenFormats>
      </displayAttributes>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <expand>
        <vectorQuery id="CPUTimeExpanded">
          <queryRef>/CPUUserTime/CPUUsageUtilization</queryRef>
          <queryRef>/CPUSpinTimeParent</queryRef>
          <queryRef>/CPUOverheadTimeParent</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="CPUTimeParentExpanded">
      <queryInherit>/CPUTimeParent</queryInherit>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="CPUTimeByConcurrencyUtilization">
      <queryInherit>/CPUTimeDerived</queryInherit>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>percentAndBar</totalFormat>
      </displayAttributes>
      <expand>
        <queryRef>/ConcurrencyUtilization</queryRef>
      </expand>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
  </queryLibrary>
</bag>
