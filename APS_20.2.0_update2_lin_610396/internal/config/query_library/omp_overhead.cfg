<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
        syntax="norules">
    <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'"/>
    <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
    <xsl:variable name="QueryTypes">
      <item type="CPU" confSource="CPUSampleCount"/>
      <item type="PMU" confSource="ClocktickSamples"/>
    </xsl:variable>
    <xsl:variable name="OverheadTypes">
      <item name="WorkForking"/>
      <item name="WorkScheduling"/>
      <item name="Reduction"/>
      <item name="Atomics"/>
      <item name="OMPTasking"/>
    </xsl:variable>
    <xsl:variable name="OverheadQueriesSource">
      <xsl:for-each select="exsl:node-set($QueryTypes)/item">
        <xsl:variable name="t" select="@type"/>
        <xsl:variable name="c" select="@confSource"/>
        <xsl:for-each select="exsl:node-set($OverheadTypes)/item">
          <item name="{@name}" type="{$t}" confSource="{$c}" namePrefix="" restriction="" totalOpenMPThreadCount="TotalOpenMPThreadCount"/>
          <item name="{@name}" type="{$t}" confSource="{$c}" namePrefix="MpiCriticalRank"  restriction="/MpiCriticalRankFlagBandBase[%True]" totalOpenMPThreadCount="TotalOpenMPThreadCountMpiCriticalRank"/>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:variable>
    <infoQuery id="MpiCriticalRankFlagBandBase">
      <dbPath>dd_band::dd_thread.process.is_critical_rank</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <valueType>string</valueType>
    </infoQuery>
    <xsl:for-each select="exsl:node-set($OverheadQueriesSource)/item">
      <xsl:variable name="n" select="concat(@namePrefix,'Overhead',@name)"/>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, $n, 'TimeIssueFormula')"/></xsl:attribute>
        <valueEval><xsl:value-of select="concat('(query(&quot;/', @type, $n, 'Time&quot;) &gt; (query(&quot;/', @type, 'Time&quot;) * .10)) * ((query(&quot;/', @type, $n, 'Time&quot;) / queryAll(&quot;/', @type,'Time&quot;, true)) &gt; .05)')"/></valueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, $n, 'Time')"/></xsl:attribute>
        <xsl:attribute name="displayName"><xsl:value-of select="concat('%', $n, 'Time')"/></xsl:attribute>
        <helpKeyword><xsl:value-of select="translate(concat('configs.', $n, 'time_', $n, 'timedescription'), $uppercase, $smallcase)"/></helpKeyword>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'Time', @restriction, '/', @type, 'TypeCsFunctionSubtype[%', @name, ']&quot;)')"/></valueEval>
        <valueType>time</valueType>
        <issueEval><xsl:value-of select="concat('query(&quot;/', @type, $n, 'TimeIssueFormula&quot;)')"/></issueEval>
        <issueText><xsl:value-of select="concat('%', $n, 'TimeIssueText')"/></issueText>
        <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
        <confidenceText>%NotEnoughSamples</confidenceText>
        <description><xsl:value-of select="concat('%', $n, 'TimeDescription')"/></description>
        <displayAttributes>
          <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, $n, 'WallTime')"/></xsl:attribute>
        <xsl:attribute name="displayName"><xsl:value-of select="concat('%', $n, 'WallTime')"/></xsl:attribute>
        <helpKeyword><xsl:value-of select="translate(concat('configs.', $n, 'walltime_', $n, 'walltimedescription'), $uppercase, $smallcase)"/></helpKeyword>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, $n, 'Time', @restriction, '&quot;) / query(&quot;/OpenMPThreadCount&quot;)  + query(&quot;/ProcessElapsedTime&quot;) - query(&quot;/ProcessElapsedTime&quot;)')"/></valueEval>
        <valueType>time</valueType>
        <description><xsl:value-of select="concat('%', $n, 'WallTimeDescription')"/></description>
        <displayAttributes>
          <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
          <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
          <boolean:disableFormulaDescription>true</boolean:disableFormulaDescription>
        </displayAttributes>
        <issueEval><xsl:value-of select="concat('(query(&quot;/',@type, $n, 'WallTime&quot;) &gt; (query(&quot;/TotalElapsedTimeNoPause&quot;) * .10))')"/></issueEval>
        <issueText><xsl:value-of select="concat('%', $n, 'TimeIssueText')"/></issueText>
        <confidenceEval><xsl:value-of select="concat('query(&quot;/',@confSource,'&quot;) &gt;= ( 10 * query(&quot;/OpenMPThreadCount&quot;) )')"/></confidenceEval>
        <confidenceText>%NotEnoughSamples</confidenceText>
        <percentBases>
          <queryRef>/FullProcessElapsedTime</queryRef>
        </percentBases>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, $n, 'WallTimePercentsElapsed')"/></xsl:attribute>
        <xsl:attribute name="displayName"><xsl:value-of select="concat('%', $n, 'TimePercentsElapsed')"/></xsl:attribute>
        <helpKeyword><xsl:value-of select="translate(concat('configs.', $n, 'timepercentselapsed_', $n, 'walltimepercentselapseddescription'), $uppercase, $smallcase)"/></helpKeyword>
        <xsl:choose>
          <xsl:when test="(exsl:ctx('openmpProcessCount') = 1)">
            <valueEval><xsl:value-of select="concat('query(&quot;/', @type, $n, 'WallTime&quot;) / query(&quot;/TotalElapsedTimeNoPause&quot;)')"/></valueEval>
          </xsl:when>
          <xsl:otherwise>
            <valueEval><xsl:value-of select="concat('query(&quot;/', @type, $n, 'WallTime&quot;) * 10000000000.0 / (query(&quot;/ProcessEndTsc&quot;) - query(&quot;/ProcessStartTsc&quot;) + 1)')"/></valueEval>
          </xsl:otherwise>
        </xsl:choose>
        <valueType>ratio</valueType>
        <minEval>0</minEval>
        <description><xsl:value-of select="concat('%', $n, 'WallTimePercentsElapsedDescription')"/></description>
        <displayAttributes>
          <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
          <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
          <boolean:disableFormulaDescription>true</boolean:disableFormulaDescription>
        </displayAttributes>
        <issueEval><xsl:value-of select="concat('(query(&quot;/', @type, $n, 'WallTime&quot;) &gt; (query(&quot;/TotalElapsedTimeNoPause&quot;) * .10))')"/></issueEval>
        <issueText><xsl:value-of select="concat('%', $n, 'TimeIssueText')"/></issueText>
        <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
        <confidenceText>%NotEnoughSamples</confidenceText>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, $n, 'WallTimeForSummary')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, $n, 'WallTime')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, $n, 'Time&quot;) / query(&quot;/', @totalOpenMPThreadCount, '&quot;)')"/></valueEval>
      </derivedQuery>
    </xsl:for-each>
    <xsl:for-each select="exsl:node-set($QueryTypes)/item">
      <xsl:variable name="t" select="@type"/>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadWorkSchedulingAndTasking', 'TimeIssueFormula')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkScheduling', 'TimeIssueFormula')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('(query(&quot;/', @type, 'OverheadWorkSchedulingAndTasking', 'Time&quot;) &gt; (query(&quot;/', @type, 'Time&quot;) * .10)) * ((query(&quot;/', @type, 'OverheadWorkSchedulingAndTasking', 'Time&quot;) / queryAll(&quot;/', @type,'Time&quot;, true)) &gt; .05)')"/></valueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadWorkSchedulingAndTasking', 'Time')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkScheduling', 'Time')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'OverheadWorkSchedulingTime&quot;) + query(&quot;/', @type, 'OverheadOMPTaskingTime&quot;)')"/></valueEval>
        <issueEval><xsl:value-of select="concat('query(&quot;/', @type, 'OverheadWorkSchedulingAndTasking', 'TimeIssueFormula&quot;)')"/></issueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'Time')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkScheduling', 'Time')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'MpiCriticalRankOverheadWorkSchedulingTime&quot;) + query(&quot;/', @type, 'MpiCriticalRankOverheadOMPTaskingTime&quot;)')"/></valueEval>
        <issueEval><xsl:value-of select="concat('query(&quot;/', @type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'TimeIssueFormula&quot;)')"/></issueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadWorkSchedulingAndTasking', 'WallTime')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkScheduling', 'WallTime')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'OverheadWorkSchedulingWallTime&quot;) + query(&quot;/', @type, 'OverheadOMPTaskingWallTime&quot;)')"/></valueEval>
        <issueEval><xsl:value-of select="concat('(query(&quot;/',@type, 'OverheadWorkSchedulingAndTasking', 'WallTime&quot;) &gt; (query(&quot;/TotalElapsedTimeNoPause&quot;) * .10))')"/></issueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'WallTime')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkScheduling', 'WallTime')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'MpiCriticalRankOverheadWorkSchedulingWallTime&quot;) + query(&quot;/', @type, 'MpiCriticalRankOverheadOMPTaskingWallTime&quot;)')"/></valueEval>
        <issueEval><xsl:value-of select="concat('(query(&quot;/',@type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'WallTime&quot;) &gt; (queryAll(&quot;/MpiCriticalRankProcessElapsedTime&quot;) * .10))')"/></issueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadWorkSchedulingAndTasking', 'WallTimePercentsElapsed')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkScheduling', 'WallTimePercentsElapsed')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'OverheadWorkSchedulingWallTimePercentsElapsed&quot;) + query(&quot;/', @type, 'OverheadOMPTaskingWallTimePercentsElapsed&quot;)')"/></valueEval>
        <issueEval><xsl:value-of select="concat('(query(&quot;/', @type, 'OverheadWorkScheduling', 'WallTime&quot;) &gt; (query(&quot;/TotalElapsedTimeNoPause&quot;) * .10))')"/></issueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadWorkSchedulingAndTasking', 'WallTimeForSummary')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'OverheadWorkSchedulingAndTasking', 'WallTime')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'OverheadWorkSchedulingAndTasking', 'Time&quot;) / query(&quot;/TotalOpenMPThreadCount&quot;)')"/></valueEval>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'WallTimeForSummary')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/', @type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'WallTime')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/', @type, 'MpiCriticalRankOverheadWorkSchedulingAndTasking', 'Time&quot;) / query(&quot;/TotalOpenMPThreadCountMpiCriticalRank&quot;)')"/></valueEval>
      </derivedQuery>
      <derivedQuery displayName="%OverheadOtherTime">
        <xsl:attribute name="id"><xsl:value-of select="concat($t, 'OverheadOtherTime')"/></xsl:attribute>
        <helpKeyword>configs.overheadothertime_overheadothertimedescription</helpKeyword>
        <valueEval>
          <xsl:value-of select="concat('query(&quot;/', $t, 'OverheadTime&quot;)')"/>
          <xsl:for-each select="exsl:node-set($OverheadTypes)/item">
            <xsl:value-of select="concat(' - queryOptional(&quot;/',$t,'Time/',$t,'TypeCsFunctionSubtype[%',@name,']&quot;)')"/>
          </xsl:for-each>
        </valueEval>
        <valueType>time</valueType>
        <description>%OverheadOtherTimeDescription</description>
        <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
        <confidenceText>%NotEnoughSamples</confidenceText>
        <minEval>0</minEval>
        <displayAttributes>
          <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery displayName="%OverheadOtherTime">
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadOtherWallTime')"/></xsl:attribute>
        <helpKeyword>configs.overheadothertime_overheadothertimedescription</helpKeyword>
        <valueEval><xsl:value-of select="concat('query(&quot;/',$t,'OverheadOtherTime&quot;) / query(&quot;/OpenMPThreadCount&quot;)')"/></valueEval>
        <valueType>time</valueType>
        <description>%OverheadOtherTimeDescription</description>
        <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
        <confidenceText>%NotEnoughSamples</confidenceText>
        <displayAttributes>
          <boolean:detailedFormulaDisplayRepresentation>true</boolean:detailedFormulaDisplayRepresentation>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery>
        <xsl:attribute name="id"><xsl:value-of select="concat(@type, 'OverheadOtherWallTimeForSummary')"/></xsl:attribute>
        <queryInherit><xsl:value-of select="concat('/',$t,'OverheadOtherWallTime')"/></queryInherit>
        <valueEval><xsl:value-of select="concat('query(&quot;/',$t,'OverheadOtherTime&quot;) / query(&quot;/TotalOpenMPThreadCount&quot;)')"/></valueEval>
      </derivedQuery>
    </xsl:for-each>
    <xsl:variable name="SpinTypes">
      <item name="BusyWaitOnBarrier"/>
      <item name="BusyWaitOnLock"/>
    </xsl:variable>
    <infoQuery id="Serial">
      <dbPath>omp_serial_time_data::dd_omp_serial.is_omp_serial</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
    </infoQuery>
    <xsl:if test="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))">
      <derivedQuery id="CPUTimeSummary" displayName="%CPUTime">
        <valueEval><![CDATA[ query("/CPUTime")]]></valueEval>
        <description>%CPUTimeDescription</description>
        <valueType>time</valueType>
        <issues>
          <issue>
            <issueEval>
              <xsl:choose>
                <xsl:when test="exsl:IsNonEmptyTableExist('dd_function_subtype')">
                  <xsl:text>( (</xsl:text>
                  <xsl:for-each select="exsl:node-set($SpinTypes)/item">
                    <xsl:value-of select="concat('!query(&quot;/CPUSpin', @name, 'TimeIssueFormula&quot;)')"/>
                    <xsl:if test="position() != last()">
                      <xsl:text>&#032;&amp;&amp;&#032;</xsl:text>
                    </xsl:if>
                  </xsl:for-each>
                  <xsl:text>) ? ( query(&quot;/CPUSpinTimeIssueFormula&quot;) ) : ( $FALSE ) )</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>( query(&quot;/CPUSpinTimeIssueFormula&quot;) )</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </issueEval>
            <issueText>%SpinTimeIssueText</issueText>
          </issue>
          <xsl:for-each select="exsl:node-set($SpinTypes)/item">
            <issue>
              <issueEval><xsl:value-of select="concat('query(&quot;/CPUSpin', @name, 'TimeIssueFormula&quot;)')"/></issueEval>
              <issueText><xsl:value-of select="concat('%Spin', @name, 'TimeIssueText')"/></issueText>
            </issue>
          </xsl:for-each>
          <issue>
            <issueEval>
              <xsl:text>( (</xsl:text>
              <xsl:for-each select="exsl:node-set($OverheadTypes)/item">
                <xsl:value-of select="concat('!query(&quot;/CPUOverhead', @name, 'TimeIssueFormula&quot;)')"/>
                <xsl:if test="position() != last()">
                  <xsl:text>&#032;&amp;&amp;&#032;</xsl:text>
                </xsl:if>
              </xsl:for-each>
              <xsl:text>) ? ( query(&quot;/CPUOverheadTimeIssueFormula&quot;) ) : ( $FALSE ) )</xsl:text>
            </issueEval>
            <issueText>%OverheadTimeIssueText</issueText>
          </issue>
          <xsl:for-each select="exsl:node-set($OverheadTypes)/item">
            <issue>
              <issueEval><xsl:value-of select="concat('query(&quot;/CPUOverhead', @name, 'TimeIssueFormula&quot;)')"/></issueEval>
              <issueText><xsl:value-of select="concat('%Overhead', @name, 'TimeIssueText')"/></issueText>
            </issue>
          </xsl:for-each>
        </issues>
      </derivedQuery>
      <derivedQuery id="CPUSerialCPUTime" displayName="%SerialCPUTime">
        <helpKeyword>configs.serialcputimewithexpansion_serialcputimedescription</helpKeyword>
        <description>%SerialCPUTimeDescription</description>
        <queryInherit>/CPUTimeSummary</queryInherit>
        <xsl:choose>
          <xsl:when test="exsl:IsNonEmptyTableExist('omp_serial_time_data')">
            <valueEval><![CDATA[ query("/CPUTime/MasterThreadFlag[%True]/Serial[%True]") ]]></valueEval>
          </xsl:when>
          <xsl:otherwise>
            <valueEval><![CDATA[ query("/CPUTime/MasterThreadFlag[%True]") - query("/CPUTime/MasterThreadFlag[%True]/RegionType[%FastRegion]") - query("/CPUTime/MasterThreadFlag[%True]/RegionType[%GoodRegion]") - query("/CPUTime/MasterThreadFlag[%True]/RegionType[%SlowRegion]") ]]></valueEval>
          </xsl:otherwise>
        </xsl:choose>
        <valueType>time</valueType>
        <issueText>%SerialTimeIssueText</issueText>
        <issueEval><![CDATA[ ( query("/CPUSerialCPUTime") > (query("/TotalElapsedTimeNoPause") * .15)) ]]></issueEval>
      </derivedQuery>
      <derivedQuery id="CPUMpiCriticalRankSerialCPUTime" displayName="%SerialCPUTime">
        <queryInherit>/CPUSerialCPUTime</queryInherit>
        <valueEval><![CDATA[ query("/CPUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]") - query("/CPUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]/RegionType[%FastRegion]") - query("/CPUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]/RegionType[%GoodRegion]") - query("/CPUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]/RegionType[%SlowRegion]") ]]></valueEval>
        <valueType>time</valueType>
      </derivedQuery>
    </xsl:if>
    <derivedQuery id="PMUTimeSummary">
      <queryInherit>/PMUTime</queryInherit>
      <issues>
        <issue>
          <issueEval>
            <xsl:choose>
              <xsl:when test="exsl:IsNonEmptyTableExist('dd_function_subtype')">
                <xsl:text>( (</xsl:text>
                <xsl:for-each select="exsl:node-set($SpinTypes)/item">
                  <xsl:value-of select="concat('!query(&quot;/PMUSpin', @name, 'TimeIssueFormula&quot;)')"/>
                  <xsl:if test="position() != last()">
                    <xsl:text>&#032;&amp;&amp;&#032;</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>) ? ( query(&quot;/PMUSpinTimeIssueFormula&quot;) ) : ( $FALSE ) )</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>( query(&quot;/PMUSpinTimeIssueFormula&quot;) )</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </issueEval>
          <issueText>%SpinTimeIssueText</issueText>
        </issue>
        <xsl:for-each select="exsl:node-set($SpinTypes)/item">
          <issue>
            <issueEval><xsl:value-of select="concat('query(&quot;/PMUSpin', @name, 'TimeIssueFormula&quot;)')"/></issueEval>
            <issueText><xsl:value-of select="concat('%Spin', @name, 'TimeIssueText')"/></issueText>
          </issue>
        </xsl:for-each>
        <issue>
          <issueEval>
            <xsl:text>( (</xsl:text>
            <xsl:for-each select="exsl:node-set($OverheadTypes)/item">
              <xsl:value-of select="concat('!query(&quot;/PMUOverhead', @name, 'TimeIssueFormula&quot;)')"/>
              <xsl:if test="position() != last()">
                <xsl:text>&#032;&amp;&amp;&#032;</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>) ? ( query(&quot;/PMUOverheadTimeIssueFormula&quot;) ) : ( $FALSE ) )</xsl:text>
          </issueEval>
          <issueText>%OverheadTimeIssueText</issueText>
        </issue>
        <xsl:for-each select="exsl:node-set($OverheadTypes)/item">
          <issue>
            <issueEval><xsl:value-of select="concat('query(&quot;/PMUOverhead', @name, 'TimeIssueFormula&quot;)')"/></issueEval>
            <issueText><xsl:value-of select="concat('%Overhead', @name, 'TimeIssueText')"/></issueText>
          </issue>
        </xsl:for-each>
      </issues>
    </derivedQuery>
    <derivedQuery id="PMUSerialCPUTime" displayName="%SerialCPUTime">
      <queryInherit>/PMUTimeSummary</queryInherit>
      <helpKeyword>configs.serialcputimewithexpansion_serialcputimedescription</helpKeyword>
      <description>%SerialCPUTimeDescription</description>
      <xsl:choose>
        <xsl:when test="exsl:IsNonEmptyTableExist('omp_serial_time_data')">
          <valueEval><![CDATA[ query("/PMUTime/MasterThreadFlag[%True]/Serial[%True]") ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/PMUTime/MasterThreadFlag[%True]") - query("/PMUTime/MasterThreadFlag[%True]/RegionType[%FastRegion]") - query("/PMUTime/MasterThreadFlag[%True]/RegionType[%GoodRegion]") - query("/PMUTime/MasterThreadFlag[%True]/RegionType[%SlowRegion]") ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>time</valueType>
      <issueText>%SerialTimeIssueText</issueText>
      <issueEval><![CDATA[ ( query("/PMUSerialCPUTime") > (query("/TotalElapsedTimeNoPause") * .15)) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="PMUMpiCriticalRankSerialCPUTime" displayName="%SerialCPUTime">
      <queryInherit>/PMUSerialCPUTime</queryInherit>
      <valueEval><![CDATA[ query("/PMUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]") - query("/PMUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]/RegionType[%FastRegion]") - query("/PMUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]/RegionType[%GoodRegion]") - query("/PMUTime/MpiCriticalRankFlagBandBase[%True]/MasterThreadFlag[%True]/RegionType[%SlowRegion]") ]]></valueEval>
      <valueType>time</valueType>
    </derivedQuery>
    <derivedQuery id="SerialCPUTime">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/PMUSerialCPUTime</queryInherit>
        <valueEval><![CDATA[ query("/PMUSerialCPUTime") < 0 ? 0 : query("/PMUSerialCPUTime") ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/CPUSerialCPUTime</queryInherit>
        <valueEval><![CDATA[ query("/CPUSerialCPUTime") < 0 ? 0 : query("/CPUSerialCPUTime") ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>time</valueType>
      <displayAttributes>
        <selfFormat>time</selfFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SerialCPUOtherTime" displayName="%Other">
      <valueEval><![CDATA[ query("/SerialCPUTime") - query("/SerialSpinBusyWaitOnMPISpinningTime") ]]></valueEval>
      <helpKeyword>configs.serialcpuothertime_otherserialcputimedescription</helpKeyword>
      <description>%OtherSerialCPUTimeDescription</description>
      <valueType>time</valueType>
      <displayAttributes>
        <selfFormat>time</selfFormat>
      </displayAttributes>
    </derivedQuery>
  </queryLibrary>
</bag>
