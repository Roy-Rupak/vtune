<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www..org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
  >
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <derivedQuery id="eDRAMReadGB" displayName="%eDRAMReadGB">
      <valueEval><![CDATA[(
                            (query("/UncoreEventCountForEDRAM/UncoreEventType[UNC_EDRAM_RD_HIT]") +
                            query("/UncoreEventCountForEDRAM/UncoreEventType[UNC_EDRAM_RD_MISS]"))
                          * 64) / 1000000000]]>
      </valueEval>
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="eDRAMReadBandwidth" displayName="%eDRAMReadBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ query("/eDRAMReadGB") / query("/TotalElapsedTime") ]]></valueEval>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="eDRAMWriteGB" displayName="%eDRAMWriteGB">
      <valueEval><![CDATA[(
                            (query("/UncoreEventCountForEDRAM/UncoreEventType[UNC_EDRAM_WR_HIT]") +
                            query("/UncoreEventCountForEDRAM/UncoreEventType[UNC_EDRAM_WR_MISS]"))
                             * 64) / 1000000000]]></valueEval>
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
        <timelineGraphColor>#3765c1</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="eDRAMWriteBandwidth" displayName="%eDRAMWriteBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ query("/eDRAMWriteGB") / query("/TotalElapsedTime") ]]></valueEval>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="eDRAMTotalGB" displayName="%eDRAMTotal">
      <valueEval><![CDATA[ query("/eDRAMWriteGB") + query("/eDRAMReadGB") ]]></valueEval>
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelinePenWidth>1</timelinePenWidth>
        <timelineGraphColor>72,104,155</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="eDRAMTotalBandwidth" displayName="%eDRAMTotalBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ query("/eDRAMTotalGB") / query("/TotalElapsedTime") ]]></valueEval>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="SOCMod0BusAgentBandwidth" displayName="%SOCMod0BusAgentBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCMod1BusAgentBandwidth" displayName="%SOCMod1BusAgentBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCMod2BusAgentBandwidth" displayName="%SOCMod2BusAgentBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCMod3BusAgentBandwidth" displayName="%SOCMod3BusAgentBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCGraphicsBandwidth" displayName="%SOCGraphicsBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCImagingBandwidth" displayName="%SOCImagingBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCDisplayBandwidth" displayName="%SOCDisplayBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCVP8Bandwidth" displayName="%SOCVEDBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCIOBandwidth" displayName="%SOCIOBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCHighSpeedPFBandwidth" displayName="%SOCHighSpeedPFBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SOCSystemAgentBandwidth" displayName="%SOCSystemAgentBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="DataTransferredGB" displayName="%DataTransferredGB">
      <description>%DataTransferredGBDescription</description>
      <valueType>double</valueType>
      <valueEval><![CDATA[ query("/DataReadGB") + query("/DataWrittenGB") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="DRAMTotalGb" displayName="%DRAMTotalGB">
      <queryInherit>/DataTransferredGB</queryInherit>
    </derivedQuery>
    <derivedQuery id="DataReadGB" displayName="%DataReadGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DataWrittenGB" displayName="%DataWrittenGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="AverageReadBandwidthGB" displayName="%ReadBandwidthGBperSec">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/DataReadGB") / query("/GlobalElapsedTime") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageWriteBandwidthGB" displayName="%WriteBandwidthGBperSec">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/DataWrittenGB") / query("/GlobalElapsedTime") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUDataReadGB" displayName="%DataReadGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="GPUDataWrittenGB" displayName="%DataWrittenGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="GPUAverageReadBandwidthGB" displayName="%ReadBandwidthGBperSec">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/GPUDataReadGB") / query("/GPUElapsedTime") ) ]]></valueEval>
      <percentBases>
        <queryRef>/GPULocalBandwidthAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUAverageWriteBandwidthGB" displayName="%WriteBandwidthGBperSec">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/GPUDataWrittenGB") / query("/GPUElapsedTime") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPULocalBandwidthAbsMax" displayName="%GPULocalBandwidthMax">
      <helpKeyword>configs.gpulocalbandwidthmax_gpulocalbandwidthmaxdescription</helpKeyword>
      <description>%GPULocalBandwidthMaxDescription</description>
      <valueType>double</valueType>
      <valueEval>$maxLocalBandwidthGB</valueEval>
    </derivedQuery>
    <derivedQuery id="GPUReadBandwidthAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUAverageReadBandwidthGB") / query("/GPULocalBandwidthAbsMax") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUWriteBandwidthAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUAverageWriteBandwidthGB") / query("/GPULocalBandwidthAbsMax") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SOCDataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDataWrittenGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCMod0DataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCMod0DataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCMod0DataWrittenGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCMod1DataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCMod1DataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCMod1DataWrittenGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="GraphicsDataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="GraphicsDataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="GraphicsDataWriteGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DisplayDataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DisplayDataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DisplayDataWriteGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="CameraDataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="CameraDataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="CameraDataWriteGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="IODataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="IODataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="IODataWriteGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDDR0DataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDDR0DataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDDR0DataWrittenGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDDR1DataTransferredGB" displayName="%DataTransferredMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDDR1DataReadGB" displayName="%DataReadMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SOCDDR1DataWrittenGB" displayName="%DataWrittenMB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DRAMDataTransferredGB" displayName="%DataTransferredGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DRAMDataReadGB" displayName="%DataReadGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="DRAMDataWrittenGB" displayName="%DataWrittenGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="QPIDataTransferredGB" displayName="%DataTransferredGB">
      <valueType>double</valueType>
      <valueEval><![CDATA[ queryOptional("/QPIDataReadGB") + queryOptional("/QPINonDataReadGB") + query("/QPIDataWrittenGB") + query("/QPINonDataWrittenGB") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="QPIDataReadGB" displayName="%DataReadGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="QPINonDataReadGB" displayName="%NonDataReadGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="QPIDataWrittenGB" displayName="%DataWrittenGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="QPINonDataWrittenGB" displayName="%NonDataWrittenGB">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="UPIActiveClockticks">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="UPIUtilization" displayName="%UPIUtilization">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="OvertimeBandwidth" displayName="%BandwidthGBperSec">
      <valueType>double</valueType>
      <maxEval>$maxLocalBandwidthGB</maxEval>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,0,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeBandwidthSystem" displayName="%BandwidthGBperSec">
      <queryInherit>/OvertimeBandwidth</queryInherit>
      <maxEval>$maxLocalBandwidthGB * $packageCount</maxEval>
    </derivedQuery>
    <derivedQuery id="OvertimeReadBandwidth" displayName="%BandwidthRead">
      <queryInherit>/OvertimeBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeWriteBandwidth" displayName="%BandwidthWrite">
      <queryInherit>/OvertimeBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>#3765c1</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDRAMBandwidth">
      <queryInherit>/OvertimeBandwidth</queryInherit>
    </derivedQuery>
    <derivedQuery id="OvertimeBandwidthLine">
      <queryInherit>/OvertimeBandwidth</queryInherit>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeReadBandwidthLine">
      <queryInherit>/OvertimeReadBandwidth</queryInherit>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDRAMReadBandwidth">
      <queryInherit>/OvertimeReadBandwidth</queryInherit>
    </derivedQuery>
    <derivedQuery id="OvertimeWriteBandwidthLine">
      <queryInherit>/OvertimeWriteBandwidth</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDRAMWriteBandwidth">
      <queryInherit>/OvertimeWriteBandwidth</queryInherit>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIBandwidth" displayName="%QPIBandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,0,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIBandwidthLine">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIDataReadBandwidth" displayName="%QPIDataReadBandwidthGBperSec">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>0,255,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIDataReadBandwidthLine">
      <queryInherit>/OvertimeQPIDataReadBandwidth</queryInherit>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPINonDataReadBandwidth" displayName="%QPINonDataReadBandwidthGBperSec">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>255,0,255</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPINonDataReadBandwidthLine">
      <queryInherit>/OvertimeQPINonDataReadBandwidth</queryInherit>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIDataWriteBandwidth" displayName="%QPIDataWriteBandwidthGBperSec">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>255,0,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIDataWriteBandwidthLine">
      <queryInherit>/OvertimeQPIDataWriteBandwidth</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPINonDataWriteBandwidth" displayName="%QPINonDataWriteBandwidthGBperSec">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>0,0,255</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeQPINonDataWriteBandwidthLine">
      <queryInherit>/OvertimeQPINonDataWriteBandwidth</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="UPIUtilizationPercentValue" displayName="%UPIUtilizationPercent">
      <valueType>ratio</valueType>
      <maxEval>1.0</maxEval>
      <displayAttributes>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <valueEval><![CDATA[ query("/UPIUtilization") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UPIUtilizationBaseValue" displayName="%UPIUtilizationSingle">
      <valueType>double</valueType>
      <displayAttributes>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <valueEval><![CDATA[ query("/UPIUtilization") * 100 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIReadBandwidth" displayName="%QPIReadBandwidthGBperSec">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <valueEval><![CDATA[ query("/OvertimeQPIDataReadBandwidth") + query("/OvertimeQPINonDataReadBandwidth") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OvertimeQPIWriteBandwidth" displayName="%QPIWriteBandwidthGBperSec">
      <queryInherit>/OvertimeQPIBandwidth</queryInherit>
      <valueEval><![CDATA[ query("/OvertimeQPIDataWriteBandwidth") + query("/OvertimeQPINonDataWriteBandwidth") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCReadBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCWriteBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeGraphicsBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeGraphicsReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeGraphicsWriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDisplayBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDisplayReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDisplayWriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeCameraBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeCameraReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeCameraWriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeIOBandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeIOReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeIOWriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDDR0Bandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDDR0ReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDDR0WriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDDR1Bandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDDR1ReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeDDR1WriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCMod0Bandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCMod0ReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCMod0WriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCMod1Bandwidth" displayName="%BandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCMod1ReadBandwidth" displayName="%ReadBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeSOCMod1WriteBandwidth" displayName="%WriteBandwidthMBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SummaryReadBandwidth" displayName="%ReadBandwidthGBperSec">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SummaryWriteBandwidth" displayName="%WriteBandwidthGBperSec">
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="SummaryBandwidth" displayName="%BandwidthGBperSec">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/DataTransferredGB") ) / (query("/TotalElapsedTime") - query("/PausedTime")) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMCacheReadBandwidth" displayName="%MCDRAMReadBandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,255,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMCacheWriteBandwidth" displayName="%MCDRAMWriteBandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>255,0,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMCacheBandwidth" displayName="%BandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,0,0</timelineGraphColor>
      </displayAttributes>
      <valueEval><![CDATA[ query("/OvertimeMCDRAMCacheReadBandwidth") + query("/OvertimeMCDRAMCacheWriteBandwidth")]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMCacheReadBandwidthLine" displayName="%ReadBandwidth">
      <queryInherit>/OvertimeMCDRAMCacheReadBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMCacheWriteBandwidthLine" displayName="%WriteBandwidth">
      <queryInherit>/OvertimeMCDRAMCacheWriteBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>#3765c1</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMFlatReadBandwidth" displayName="%MCDRAMReadBandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,255,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMFlatWriteBandwidth" displayName="%MCDRAMWriteBandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>255,0,0</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMFlatBandwidth" displayName="%BandwidthGBperSec">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,0,0</timelineGraphColor>
      </displayAttributes>
      <valueEval><![CDATA[ query("/OvertimeMCDRAMFlatReadBandwidth") + query("/OvertimeMCDRAMFlatWriteBandwidth")]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMFlatReadBandwidthLine" displayName="%ReadBandwidth">
      <queryInherit>/OvertimeMCDRAMFlatReadBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="OvertimeMCDRAMFlatWriteBandwidthLine" displayName="%WriteBandwidth">
      <queryInherit>/OvertimeMCDRAMFlatWriteBandwidth</queryInherit>
      <displayAttributes>
        <timelineGraphColor>#3765c1</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="MCDRAMHitRate" displayName="%MCDRAMHitRate">
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="MCDRAMHitMRate" displayName="%MCDRAMHitMRate">
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="UNC_M_CAS_COUNT.RD_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_M_CAS_COUNT.WR_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_E_RPQ_INSERTS_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_RPQ_INSERTS[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_E_WPQ_INSERTS_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_WPQ_INSERTS[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_E_EDC_ACCESS.MISS_CLEAN_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_CLEAN[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_E_EDC_ACCESS.MISS_DIRTY_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.MISS_DIRTY[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_E_EDC_ACCESS.HIT_CLEAN_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_CLEAN[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="UNC_E_EDC_ACCESS.HIT_DIRTY_ALL_UNITS">
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT0]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT6]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_E_EDC_ACCESS.HIT_DIRTY[UNIT7]]") ) ]]></valueEval>
    </derivedQuery>
    <rule>
      <ruleExpr>$PMU != null</ruleExpr>
      <rule>
        <ruleExpr>$PMU == snb</ruleExpr>
        <ruleExpr>$PMU == ivybridge</ruleExpr>
        <ruleExpr>$PMU == ivytown</ruleExpr>
        <ruleExpr>$PMU == haswell</ruleExpr>
        <ruleExpr>$PMU == haswell_server</ruleExpr>
        <ruleExpr>$PMU == crystalwell</ruleExpr>
        <ruleExpr>$PMU == snbep</ruleExpr>
        <ruleExpr>$PMU == corei7b</ruleExpr>
        <ruleExpr>$PMU == knc</ruleExpr>
        <ruleExpr>$PMU == broadwell</ruleExpr>
        <ruleExpr>$PMU == broadwell_de</ruleExpr>
        <ruleExpr>$PMU == broadwell_server</ruleExpr>
        <ruleExpr>$PMU == skylake</ruleExpr>
        <ruleExpr>$PMU == skylake_server</ruleExpr>
        <ruleExpr>$PMU == cascadelake_server</ruleExpr>
        <ruleExpr>$PMU == knl</ruleExpr>
        <ruleExpr>$PMU == silvermont</ruleExpr>
        <ruleExpr>$PMU == airmont</ruleExpr>
        <ruleExpr>$PMU == sniper</ruleExpr>
        <ruleExpr>$PMU == goldmont</ruleExpr>
        <ruleExpr>$PMU == goldmont_plus</ruleExpr>
        <ruleExpr>$PMU == snowridge</ruleExpr>
        <ruleExpr>$PMU == icelake</ruleExpr>
        <ruleExpr>$PMU == icelake_server</ruleExpr>
        <ruleExpr>$PMU == sapphirerapids</ruleExpr>
        <ruleExpr>$PMU == tigerlake</ruleExpr>
        <derivedQuery idToOverwrite="OvertimeBandwidth">
          <valueEval><![CDATA[ ( query("/DataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeReadBandwidth">
          <valueEval><![CDATA[ ( query("/DataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeWriteBandwidth">
          <valueEval><![CDATA[ ( query("/DataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SummaryReadBandwidth">
          <valueEval><![CDATA[ ( query("/DataReadGB") ) / (query("/TotalElapsedTime") - query("/PausedTime")) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SummaryWriteBandwidth">
          <valueEval><![CDATA[ ( query("/DataWrittenGB") ) / (query("/TotalElapsedTime") - query("/PausedTime")) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeQPIBandwidth">
          <valueEval><![CDATA[ ( query("/QPIDataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeQPIDataReadBandwidth">
          <valueEval><![CDATA[ ( query("/QPIDataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeQPINonDataReadBandwidth">
          <valueEval><![CDATA[ ( query("/QPINonDataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeQPIDataWriteBandwidth">
          <valueEval><![CDATA[ ( query("/QPIDataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeQPINonDataWriteBandwidth">
          <valueEval><![CDATA[ ( query("/QPINonDataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
      </rule>
      <rule>
        <ruleExpr>$PMU == silvermont</ruleExpr>
        <ruleExpr>$PMU == haswell</ruleExpr>
        <derivedQuery idToOverwrite="OvertimeSOCBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCReadBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCWriteBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCMod0Bandwidth">
          <valueEval><![CDATA[ ( query("/SOCMod0DataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCMod0ReadBandwidth">
          <valueEval><![CDATA[ ( query("/SOCMod0DataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCMod0WriteBandwidth">
          <valueEval><![CDATA[ ( query("/SOCMod0DataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCMod1Bandwidth">
          <valueEval><![CDATA[ ( query("/SOCMod1DataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCMod1ReadBandwidth">
          <valueEval><![CDATA[ ( query("/SOCMod1DataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeSOCMod1WriteBandwidth">
          <valueEval><![CDATA[ ( query("/SOCMod1DataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeGraphicsBandwidth">
          <valueEval><![CDATA[ ( query("/GraphicsDataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeGraphicsReadBandwidth">
          <valueEval><![CDATA[ ( query("/GraphicsDataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeGraphicsWriteBandwidth">
          <valueEval><![CDATA[ ( query("/GraphicsDataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDisplayBandwidth">
          <valueEval><![CDATA[ ( query("/DisplayDataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDisplayReadBandwidth">
          <valueEval><![CDATA[ ( query("/DisplayDataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDisplayWriteBandwidth">
          <valueEval><![CDATA[ ( query("/DisplayDataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeCameraBandwidth">
          <valueEval><![CDATA[ ( query("/CameraDataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeCameraReadBandwidth">
          <valueEval><![CDATA[ ( query("/CameraDataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeCameraWriteBandwidth">
          <valueEval><![CDATA[ ( query("/CameraDataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeIOBandwidth">
          <valueEval><![CDATA[ ( query("/IODataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeIOReadBandwidth">
          <valueEval><![CDATA[ ( query("/IODataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeIOWriteBandwidth">
          <valueEval><![CDATA[ ( query("/IODataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDDR0Bandwidth">
          <valueEval><![CDATA[ ( query("/SOCDDR0DataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDDR0ReadBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDDR0DataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDDR0WriteBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDDR0DataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDDR1Bandwidth">
          <valueEval><![CDATA[ ( query("/SOCDDR1DataTransferredGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDDR1ReadBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDDR1DataReadGB") ) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeDDR1WriteBandwidth">
          <valueEval><![CDATA[ ( query("/SOCDDR1DataWrittenGB") ) ]]></valueEval>
        </derivedQuery>
      </rule>
      <xsl:variable name="prefixes">
        <item prefix=""/>
        <item prefix="GPU"/>
      </xsl:variable>
      <xsl:for-each select="exsl:node-set($prefixes)/item">
        <xsl:if test="(exsl:ctx('PMU')='snb' or exsl:ctx('PMU')='ivybridge') and exsl:IsTableExist('uncore_data')">
          <derivedQuery idToOverwrite="{@prefix}DataReadGB">
            <xsl:variable name="valueEvalText"><![CDATA[ ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_IMC_DATA_READS]") * 64 ) / 1000000000 ]]></xsl:variable>
            <valueEval>
              <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
            </valueEval>
          </derivedQuery>
          <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
            <xsl:variable name="valueEvalText"><![CDATA[ ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_IMC_DATA_WRITES]") * 64 ) / 1000000000 ]]></xsl:variable>
            <valueEval>
              <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
            </valueEval>
          </derivedQuery>
        </xsl:if>
        <xsl:if test="(exsl:ctx('PMU')='haswell' or exsl:ctx('PMU')='crystalwell' or exsl:ctx('PMU')='broadwell' or exsl:ctx('PMU')='skylake' or exsl:ctx('PMU')='icelake' or exsl:ctx('PMU')='tigerlake') and exsl:IsTableExist('uncore_data')">
          <derivedQuery idToOverwrite="{@prefix}DataReadGB">
            <xsl:variable name="valueEvalText"><![CDATA[ ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_IMC_DRAM_DATA_READS]") * 64 ) / 1000000000 ]]></xsl:variable>
            <valueEval>
              <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
            </valueEval>
          </derivedQuery>
          <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
            <xsl:variable name="valueEvalText"><![CDATA[ ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_IMC_DRAM_DATA_WRITES]") * 64 ) / 1000000000 ]]></xsl:variable>
            <valueEval>
              <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
            </valueEval>
          </derivedQuery>
        </xsl:if>
      <xsl:if test="(exsl:ctx('PMU')='snbep' or exsl:ctx('PMU')='ivytown' or exsl:ctx('PMU')='haswell_server' or exsl:ctx('PMU')='broadwell_de' or exsl:ctx('PMU')='broadwell_server' or exsl:ctx('PMU')='knl' or exsl:ctx('PMU')='skylake_server' or exsl:ctx('PMU')='cascadelake_server') and exsl:IsTableExist('uncore_data')">
        <derivedQuery idToOverwrite="{@prefix}DataReadGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT0]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT1]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT2]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT3]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT4]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT5]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT6]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD[UNIT7]]") ) * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT0]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT1]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT2]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT3]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT4]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT5]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT6]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR[UNIT7]]") ) * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
      </xsl:if>
      <xsl:if test="(exsl:ctx('PMU')='snowridge' or exsl:ctx('PMU')='icelake_server' or exsl:ctx('PMU')='sapphirerapids') and exsl:IsTableExist('uncore_data')">
        <derivedQuery idToOverwrite="{@prefix}DataReadGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.RD]") * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_CAS_COUNT.WR]") * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
      </xsl:if>
      <xsl:if test="exsl:ctx('PMU')='corei7b' and exsl:IsTableExist('uncore_data')">
        <derivedQuery idToOverwrite="{@prefix}DataReadGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_B_CMD.RD_BCMD[UNIT0]]")  + query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_B_CMD.RD_BCMD[UNIT1]]") ) * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_B_CMD.WR_BCMD[UNIT0]]")  + query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_M_B_CMD.WR_BCMD[UNIT1]]") ) * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
      </xsl:if>
      <xsl:if test="exsl:ctx('PMU')='knc' and exsl:IsTableExist('uncore_data')">
        <derivedQuery idToOverwrite="{@prefix}DataReadGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT0]]") + query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT0]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT1]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT1]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT2]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT2]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT3]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT3]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT4]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT4]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT5]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT5]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT6]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT6]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_READ[UNIT7]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_READ[UNIT7]]") ) * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
          <xsl:variable name="valueEvalText"><![CDATA[ ( ( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT0]]") + query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT0]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT1]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT1]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT2]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT2]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT3]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT3]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT4]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT4]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT5]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT5]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT6]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT6]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH0_NORMAL_WRITE[UNIT7]]") + queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_F_CH1_NORMAL_WRITE[UNIT7]]") ) * 64 ) / 1000000000 ]]></xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
      </xsl:if>
      </xsl:for-each>
      <rule>
        <ruleExpr>$PMU == sniper</ruleExpr>
        <derivedQuery idToOverwrite="DataReadGB">
          <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[DRAM.BYTES_READ]") / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="DataWrittenGB">
          <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[DRAM.BYTES_WRITTEN]") / 1000000000 ]]></valueEval>
        </derivedQuery>
      </rule>
      <rule>
        <ruleExpr>$PMU == ivytown</ruleExpr>
        <ruleExpr>$PMU == haswell_server</ruleExpr>
        <ruleExpr>$PMU == broadwell_server</ruleExpr>
        <derivedQuery idToOverwrite="QPIDataReadGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G1.DRS_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G1.DRS_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G1.DRS_DATA[UNIT2]]") +
                                   query("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G2.NCB_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G2.NCB_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G2.NCB_DATA[UNIT2]]") ) * 8 ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="QPINonDataReadGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G1.DRS_NONDATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G1.DRS_NONDATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G1.DRS_NONDATA[UNIT2]]") +
                                   query("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G2.NCB_NONDATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G2.NCB_NONDATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_RxL_FLITS_G2.NCB_NONDATA[UNIT2]]") ) * 8 ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="QPIDataWrittenGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_Q_TxL_FLITS_G0.DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_TxL_FLITS_G0.DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_TxL_FLITS_G0.DATA[UNIT2]]") ) * 8 ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="QPINonDataWrittenGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_Q_TxL_FLITS_G0.NON_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_TxL_FLITS_G0.NON_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_Q_TxL_FLITS_G0.NON_DATA[UNIT2]]") ) * 8 ) / 1000000000 ]]></valueEval>
        </derivedQuery>
      </rule>
      <rule>
        <ruleExpr>$PMU == skylake_server</ruleExpr>
        <ruleExpr>$PMU == cascadelake_server</ruleExpr>
        <ruleExpr>$PMU == icelake_server</ruleExpr>
        <ruleExpr>$PMU == sapphirerapids</ruleExpr>
        <derivedQuery idToOverwrite="QPIDataReadGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_UPI_RxL_FLITS.ALL_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_RxL_FLITS.ALL_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_RxL_FLITS.ALL_DATA[UNIT2]]") ) * (64/9) ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="QPINonDataReadGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_UPI_RxL_FLITS.NON_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_RxL_FLITS.NON_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_RxL_FLITS.NON_DATA[UNIT2]]") ) * (64/9) ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="QPIDataWrittenGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.ALL_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.ALL_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.ALL_DATA[UNIT2]]") ) * (64/9) ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="QPINonDataWrittenGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.NON_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.NON_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.NON_DATA[UNIT2]]") ) * (64/9) ) / 1000000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="UPIActiveClockticks">
          <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_UPI_CLOCKTICKS[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_CLOCKTICKS[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_CLOCKTICKS[UNIT2]]") ) - (
                           query("/UncoreEventCount/UncoreEventType[UNC_UPI_L1_POWER_CYCLES[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_L1_POWER_CYCLES[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_L1_POWER_CYCLES[UNIT2]]")) ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="UPIUtilization">
          <valueEval><![CDATA[ query("/UPIActiveClockticks") > 0 ? ( ( ( query("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.ALL_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.ALL_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.ALL_DATA[UNIT2]]") +
                           query("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.NON_DATA[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.NON_DATA[UNIT1]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_UPI_TxL_FLITS.NON_DATA[UNIT2]]") ) / 3 ) /
                           ( ( query("/UPIActiveClockticks") ) * (5/6) ) ) : 0 ]]></valueEval>
        </derivedQuery>
      </rule>
      <xsl:for-each select="exsl:node-set($prefixes)/item">
        <xsl:if test="((exsl:ctx('PMU')='goldmont' or exsl:ctx('PMU') = 'goldmont_plus') and exsl:IsTableExist('uncore_data'))">
          <derivedQuery idToOverwrite="{@prefix}DataReadGB">
            <xsl:variable name="valueEvalText"><![CDATA[( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_All_BW.All_Read64B]") * 64 ) / 1000000000]]></xsl:variable>
            <valueEval>
              <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
            </valueEval>
          </derivedQuery>
          <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
            <xsl:variable name="valueEvalText"><![CDATA[( query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_All_BW.All_Write64B]") * 64 ) / 1000000000]]></xsl:variable>
            <valueEval>
              <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
            </valueEval>
          </derivedQuery>
          <xsl:variable name="isVisaAvailable">
             <xsl:copy-of select="document('config://include/pmu_common.xsl')//variables/visaAvailable"/>
          </xsl:variable>
          <xsl:if test="exsl:is_experimental('force_imc_bandwidth') or $isVisaAvailable != 'true'">
            <derivedQuery idToOverwrite="{@prefix}DataTransferredGB">
              <xsl:variable name="valueEvalText">
                  <![CDATA[ ( (query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_IMC_DRAM_RW_SLICE0]") + query("/{@prefix}UncoreEventCount/UncoreEventType[UNC_IMC_DRAM_RW_SLICE1]") ) * 64 ) / 1000000000 ]]>
              </xsl:variable>
              <valueEval>
                <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
              </valueEval>
            </derivedQuery>
          </xsl:if>
        </xsl:if>
      </xsl:for-each>
      <xsl:if test="(exsl:ctx('PMU')='silvermont' or exsl:ctx('PMU')='airmont') and exsl:IsTableExist('uncore_data')">
        <derivedQuery idToOverwrite="SOCMod0BusAgentBandwidth" displayName="%SOCMod0BusAgentBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.Mod0_Reqs]") * 64) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod1BusAgentBandwidth"  displayName="%SOCMod1BusAgentBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.Mod1_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod2BusAgentBandwidth" displayName="%SOCMod2BusAgentBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.Mod2_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod3BusAgentBandwidth"  displayName="%SOCMod3BusAgentBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.Mod3_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCGraphicsBandwidth" displayName="%SOCGraphicsBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.GFX_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCImagingBandwidth" displayName="%SOCImagingBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.Imaging_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDisplayBandwidth" displayName="%SOCDisplayBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.Disp_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCVP8Bandwidth" displayName="%SOCVEDBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.VED_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCIOBandwidth" displayName="%SOCIOBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.LowSpeedPF_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCHighSpeedPFBandwidth" displayName="%SOCHighSpeedPFBandwidth">
          <valueEval><![CDATA[(query("/UncoreEventCount/UncoreEventType[UNC_VISA_All_Reqs.HighSpeedPF_Reqs]") * 64) / 1000000]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCSystemAgentBandwidth" displayName="%SOCSystemAgentBandwidth">
          <valueEval><![CDATA[ query("/SOCMod0BusAgentBandwidth") +
                               queryOptional("/SOCMod1BusAgentBandwidth") +
                               queryOptional("/SOCMod2BusAgentBandwidth") +
                               queryOptional("/SOCMod3BusAgentBandwidth") +
                               queryOptional("/SOCGraphicsBandwidth") +
                               queryOptional("/SOCImagingBandwidth") +
                               queryOptional("/SOCDisplayBandwidth") +
                               queryOptional("/SOCVP8Bandwidth") +
                               query("/SOCIOBandwidth") +
                               queryOptional("/SOCHighSpeedPFBandwidth")]]></valueEval>
        </derivedQuery>
        <xsl:for-each select="exsl:node-set($prefixes)/item">
        <derivedQuery idToOverwrite="{@prefix}DataReadGB">
          <xsl:variable name="valueEvalText">
            <![CDATA[((
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0-Read32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1-Read32B]")
                                ) * 32 +
                               (queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Read64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Read64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Read64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Read64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Read64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Read64B]")
                                ) * 64
                               ) / 1000000000]]>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="{@prefix}DataWrittenGB">
          <xsl:variable name="valueEvalText">
            <![CDATA[((
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0-Write32B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1-Write32B]")
                                ) * 32 +
                               (queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Write64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Write64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Write64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Write64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Write64B]") +
                                queryOptional("/{@prefix}UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Write64B]")
                                ) * 64
                               ) / 1000000000]]>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($valueEvalText, '{@prefix}', string(@prefix))"/>
          </valueEval>
        </derivedQuery>
        </xsl:for-each>
        <derivedQuery idToOverwrite="SOCDataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Read32B]") * 32) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Read64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Write32B]") * 32) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Core0_To_Memory_BW.Agent0-Write64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod0DataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod0DataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Read32B]") * 32) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Read64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod0DataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Write32B]") * 32) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod0_Write64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod1DataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod1DataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Read32B]") * 32) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Read64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCMod1DataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Write32B]") * 32) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Module0_1_BW.Mod1_Write64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDDR0DataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Write64B]") ) * 64)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDDR0DataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Read64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Read64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDDR0DataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank0_Write64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan0_Rank1_Write64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDDR1DataTransferredGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Write64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Read64B]") + query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Write64B]")) * 64)  / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDDR1DataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Read64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Read64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="SOCDDR1DataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank0_Write64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_SOC_Memory_DDR_BW.DDR_Chan1_Rank1_Write64B]") * 64) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="GraphicsDataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="GraphicsDataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Read64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Read32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="GraphicsDataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Write64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Graphics_BW.GFX_Write32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="DisplayDataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="DisplayDataReadGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Read64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Read32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="DisplayDataWrittenGB">
          <valueEval><![CDATA[ ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Write64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Display_BW.Disp_Write32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="CameraDataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="CameraDataReadGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Read64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Read32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="CameraDataWrittenGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Write64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_Imaging_BW.Imaging_Write32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="IODataTransferredGB">
          <valueEval><![CDATA[ ( ( (query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Read64B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Write64B]") ) * 64) + (( query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Read32B]")  + query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Write32B]") ) * 32)) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="IODataReadGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Read64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Read32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="IODataWrittenGB">
          <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Write64B]") * 64) + (query("/UncoreEventCount/UncoreEventType[UNC_VISA_LowSpeedPF_BW.LowSpeedPF_Write32B]") * 32) ) / 1000000 ]]></valueEval>
        </derivedQuery>
      </xsl:if>
      <xsl:if test="(exsl:ctx('PMU')='knl')">
        <derivedQuery idToOverwrite="OvertimeMCDRAMCacheReadBandwidth">
          <valueEval><![CDATA[ ( ( query("/UNC_E_RPQ_INSERTS_ALL_UNITS") - query("/UNC_E_EDC_ACCESS.MISS_CLEAN_ALL_UNITS") - query("/UNC_E_EDC_ACCESS.MISS_DIRTY_ALL_UNITS") ) * 64 ) / 1000000000 ]]>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeMCDRAMCacheWriteBandwidth">
          <valueEval><![CDATA[ ( ( query("/UNC_E_WPQ_INSERTS_ALL_UNITS") < query("/UNC_M_CAS_COUNT.RD_ALL_UNITS") ) ? 0 : ( ( query("/UNC_E_WPQ_INSERTS_ALL_UNITS") - query("/UNC_M_CAS_COUNT.RD_ALL_UNITS") ) * 64 ) ) / 1000000000 ]]>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeMCDRAMFlatReadBandwidth">
          <valueEval><![CDATA[ ( query("/UNC_E_RPQ_INSERTS_ALL_UNITS") * 64 ) / 1000000000 ]]>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="OvertimeMCDRAMFlatWriteBandwidth">
          <valueEval><![CDATA[ ( query("/UNC_E_WPQ_INSERTS_ALL_UNITS") * 64 ) / 1000000000 ]]>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="MCDRAMHitRate">
          <valueEval><![CDATA[ ( query("/UNC_E_EDC_ACCESS.HIT_CLEAN_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.HIT_DIRTY_ALL_UNITS") ) / ( query("/UNC_E_EDC_ACCESS.HIT_CLEAN_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.HIT_DIRTY_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.MISS_CLEAN_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.MISS_DIRTY_ALL_UNITS") ) ]]>
          </valueEval>
        </derivedQuery>
        <derivedQuery idToOverwrite="MCDRAMHitMRate">
          <valueEval><![CDATA[ ( query("/UNC_E_EDC_ACCESS.HIT_DIRTY_ALL_UNITS") ) / ( query("/UNC_E_EDC_ACCESS.HIT_CLEAN_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.HIT_DIRTY_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.MISS_CLEAN_ALL_UNITS") + query("/UNC_E_EDC_ACCESS.MISS_DIRTY_ALL_UNITS") ) ]]>
          </valueEval>
        </derivedQuery>
      </xsl:if>
      <rule>
        <ruleExpr>$PMU == sniper</ruleExpr>
        <xsl:variable name="sniperHasDRAMCache">
           <xsl:copy-of select="document('config://include/sniper_common.xsl')//constants/hasDRAMCache"/>
        </xsl:variable>
        <xsl:if test="$sniperHasDRAMCache='true'">
          <derivedQuery idToOverwrite="OvertimeMCDRAMFlatReadBandwidth">
            <valueEval><![CDATA[ ( query("/PMUEventCount/PMUEventType[DRAM_CACHE.BYTES_READ]") ) / 1000000000 ]]></valueEval>
          </derivedQuery>
          <derivedQuery idToOverwrite="OvertimeMCDRAMFlatWriteBandwidth">
            <valueEval><![CDATA[ ( query("/PMUEventCount/PMUEventType[DRAM_CACHE_STORES]") ) / 1000000000 ]]></valueEval>
          </derivedQuery>
        </xsl:if>
      </rule>
    </rule>
    <derivedQuery id="APDataReadGB" displayName="%APDataReadGB">
      <valueType>double</valueType>
      <valueEval>
        <![CDATA[ (query("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_READS.TO_PMM[UNIT0]]")
          + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_READS.TO_PMM[UNIT1]]")
          + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_READS.TO_PMM[UNIT2]]")
          + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_READS.TO_PMM[UNIT3]]")
          ) * 64 / 1000000000 ]]>
      </valueEval>
      <displayAttributes>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="APDataWrittenGB" displayName="%APDataWrittenGB">
      <valueType>double</valueType>
      <valueEval>
        <![CDATA[ (query("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_WRITES.TO_PMM[UNIT0]]")
          + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_WRITES.TO_PMM[UNIT1]]")
          + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_WRITES.TO_PMM[UNIT2]]")
          + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_IMC_WRITES.TO_PMM[UNIT3]]")
          ) * 64 / 1000000000 ]]>
      </valueEval>
      <displayAttributes>
        <timelineGraphColor>#3765c1</timelineGraphColor>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="APDataTransferredGB" displayName="%BandwidthGBperSec">
      <valueType>double</valueType>
      <valueEval><![CDATA[query("/APDataWrittenGB") + query("/APDataReadGB")]]></valueEval>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <infoQuery id="PageFaultInfo" displayName="%PageFaultInfo">
      <dbPath>pagefault_counter_data::dd_counter.type</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <countQuery id="PageFaultCount" displayName="%PageFaultCount">
      <instanceDbTable>pagefault_counter_data::dd_counter</instanceDbTable>
      <instanceBandTable>pagefault_counter_data_grouper</instanceBandTable>
    </countQuery>
    <instanceCountQuery id="PageFaultInstanceCount" displayName="%PageFaultInstanceCount">
      <instanceDbTable>pagefault_counter_data::dd_counter</instanceDbTable>
      <instanceBandTable>pagefault_counter_data_grouper</instanceBandTable>
    </instanceCountQuery>
    <derivedQuery id="2LMCacheHits" displayName="%2LMCacheHits">
      <helpKeyword>configs.2lmcachehits_2lmcachehitsdescription</helpKeyword>
      <description>%2LMCacheHitsDescription</description>
      <valueType>count</valueType>
      <valueEval><![CDATA[
        ( query("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_CLEAN[UNIT0]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_CLEAN[UNIT1]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_CLEAN[UNIT2]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_CLEAN[UNIT3]]") +
          query("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_DIRTY[UNIT0]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_DIRTY[UNIT1]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_DIRTY[UNIT2]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M2M_TAG_HIT.NM_RD_HIT_DIRTY[UNIT3]]") )
      ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="2LMCacheMisses" displayName="%2LMCacheMisses">
      <helpKeyword>configs.2lmcachemisses_2lmcachemissesdescription</helpKeyword>
      <description>%2LMCacheMissesDescription</description>
      <valueType>count</valueType>
      <valueEval><![CDATA[
        ( query("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_CLEAN[UNIT0]]") + query("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_DIRTY[UNIT0]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_CLEAN[UNIT1]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_DIRTY[UNIT1]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_CLEAN[UNIT2]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_DIRTY[UNIT2]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_CLEAN[UNIT3]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_DIRTY[UNIT3]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_CLEAN[UNIT4]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_DIRTY[UNIT4]]") +
          queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_CLEAN[UNIT5]]") + queryOptional("/UncoreEventCount/UncoreEventType[UNC_M_TAGCHK.MISS_DIRTY[UNIT5]]") )
      ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="2LMCacheHitRatio" displayName="%2LMCacheHitRatio">
      <helpKeyword>configs.2lmcachehitratio_2lmcachehitratiodescription</helpKeyword>
      <description>%2LMCacheHitRatioDescription</description>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[
        ( query("/2LMCacheHits") / ( query("/2LMCacheHits") + query("/2LMCacheMisses")) )
      ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathIncomingBandwidth" displayName="%OmniPathIncomingBandwidthDomain">
      <valueType>double</valueType>
      <maxEval>12</maxEval>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>117,219,203</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_HFI_RCV_DATA_DW[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_HFI_RCV_DATA_DW[UNIT1]]") ) * 4 ) / 1000000000 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathOutgoingBandwidth" displayName="%OmniPathOutgoingBandwidthDomain">
      <valueType>double</valueType>
      <maxEval>12</maxEval>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>55,101,193</timelineGraphColor>
      </displayAttributes>
      <valueEval><![CDATA[ ( ( query("/UncoreEventCount/UncoreEventType[UNC_HFI_SEND_DATA_DW[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_HFI_SEND_DATA_DW[UNIT1]]") ) * 4 ) / 1000000000 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathBandwidth" displayName="%OmniPathBandwidth">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,0,0</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <valueEval><![CDATA[ query("/OmniPathIncomingBandwidth") + query("/OmniPathOutgoingBandwidth") ]]>
        </valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathOutgoingPacketRate" displayName="%OmniPathOutgoingPacketRateDomain">
      <valueType>double</valueType>
      <maxEval>150</maxEval>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>55,101,193</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_HFI_SEND_DATA_PACKETS[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_HFI_SEND_DATA_PACKETS[UNIT1]]") ) / 1000000 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathIncomingPacketRate" displayName="%OmniPathIncomingPacketRateDomain">
      <valueType>double</valueType>
      <maxEval>150</maxEval>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>117,219,203</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <valueEval><![CDATA[ ( query("/UncoreEventCount/UncoreEventType[UNC_HFI_RCV_DATA_PACKETS[UNIT0]]") +
                           queryOptional("/UncoreEventCount/UncoreEventType[UNC_HFI_RCV_DATA_PACKETS[UNIT1]]") ) / 1000000 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathPacketRate" displayName="%OmniPathPacketRate">
      <valueType>double</valueType>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineGraphColor>0,0,0</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <valueEval><![CDATA[ query("/OmniPathOutgoingPacketRate") + query("/OmniPathIncomingPacketRate") ]]>
        </valueEval>
    </derivedQuery>
  </queryLibrary>
</bag>
