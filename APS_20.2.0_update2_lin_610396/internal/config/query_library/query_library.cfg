<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace=""
    xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
  >
    <infoQuery id="RootGrouping" displayName="%RootGrouping"/>
    <xsl:variable name="families">
      <item family="CPU"                       callsitePath="cpu_data::dd_sample.callsite"
                                                cpuPath="cpu_data::dd_sample.cpu"/>
      <item family="GPU"                       callsitePath="gpu_gtpin_data::dd_sample.callsite"
                                                timeQueryPath="gpu_gtpin_data::dd_sample"/>
      <item family="GSIM"                      callsitePath="gsim_stall_data::dd_sample.callsite"
                                                disableAsGrouping="true"/>
      <item family="GSIMCounter"               callsitePath="gpu_gsim_data_data::dd_sample.callsite"
                                                disableAsGrouping="true"/>
      <item family="PMU"                       callsitePath="pmu_data::dd_sample.callsite"
                                                cpuPath="pmu_data::dd_sample.cpu"/>
      <item family="PMU_IPTBB"                 callsitePath="pmu_data_details::dd_sample.callsite"
                                                cpuPath="pmu_data_details::dd_sample.cpu"/>
      <item family="BranchSource"              callsitePath="branch_data::dd_branch.src_callsite"
                                                disableAsGrouping="true"/>
      <item family="BranchDestination"         callsitePath="branch_data::dd_branch.dest_callsite"
                                                disableAsGrouping="true"/>
      <item family="BranchDestinationBBEnd"    callsitePath="branch_data::dd_branch.dest_bb_end_callsite"
                                                disableAsGrouping="true"/>
      <item family="ContextSwitch"             callsitePath="sched_data::dd_context_switch.callsite"/>
      <item family="Wait"                      callsitePath="wait_data::dd_wait.wait_cs"
                                                timeQueryPath="wait_data::dd_wait"/>
      <item family="CStateTimer"               callsitePath="c_state_data::dd_c_state_wakeup.obj.timer_cs"/>
      <item family="Counter"                   callsitePath="counter_data::dd_counter.cs"/>
      <item family="PMUMemoryObjectAlloc"      callsitePath="pmu_mem_data::dd_pmu_mem_connection.memory_object.object_info.alloc_cs"
                                                disableAsGrouping="true"/>
      <item family="ThreadCreation"            callsitePath="dd_band::dd_thread.create_cs"
                                                secondary="true"
                                                disableAsGrouping="true"/>
      <item family="WaitSignal"                callsitePath="wait_data::dd_wait.signal_cs"
                                                secondary="true"
                                                disableAsGrouping="true"/>
      <item family="WaitSyncObjDestroy"        callsitePath="wait_data::dd_wait.sync_object.close_cs"
                                                secondary="true"
                                                disableAsGrouping="true"/>
      <item family="WaitSyncObjCreation"       callsitePath="wait_data::dd_wait.sync_object.create_cs"
                                                secondary="true"
                                                disableAsGrouping="true"/>
      <item family="Signal"                    callsitePath="wait_data::dd_wait.signal_cs"
                                                secondary="true"
                                                disableAsGrouping="true"/>
      <item family="UserTask"                  callsitePath="task_data::dd_task.end_cs"
                                                timeQueryPath="task_data::dd_task"
                                                disableAsGrouping="true"/>
      <item family="MemoryAlloc"               callsitePath="memory_allocation_data::dd_memory_object.object_info.alloc_cs"/>
      <item family="MemoryDealloc"             callsitePath="memory_deallocation_data::dd_memory_object.object_info.alloc_cs"/>
      <item family="IPTModule"                 callsitePath="ipt_module_data::dd_sample.callsite"
                                                cpuPath="ipt_module_data::dd_sample.cpu"/>
      <item family="IPTTIP"                    callsitePath="ipt_tip_data::dd_sample.callsite"
                                                cpuPath="ipt_tip_data::dd_sample.cpu"
                                                disableAsGrouping="true"/>
      <item family="Interrupt"                 callsitePath="interrupt_data::dd_interrupt.id.callsite"
                                                cpuPath="interrupt_data::dd_interrupt.hw_context">
        <xsl:if test="exsl:ctx('collectingMode', 'hwSampling')!='hwTracing'">
          <xsl:attribute name="disableAsGrouping">true</xsl:attribute>
        </xsl:if>
      </item>
    </xsl:variable>
    <xsl:for-each select="exsl:node-set($families)/item">
      <xsl:variable name="AddFamilyIfSecondary">
        <xsl:if test="@secondary">
          <xsl:text>%ConcatenateWithFamily %% %</xsl:text>
          <xsl:value-of select="@family"/>
          <xsl:text>%%</xsl:text>
        </xsl:if>
      </xsl:variable>
      <xsl:if test="@callsitePath">
        <infoQuery id="{@family}ParentFunctionStartRva" displayName="{$AddFamilyIfSecondary}%ParentFunctionStartRva">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.func_range.func_inst.start_rva</xsl:text>
          </dbPath>
        </infoQuery>
        <infoQuery id="{@family}ParentInternalAddress" displayName="{$AddFamilyIfSecondary}%ParentInternalAddress">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.rva</xsl:text>
          </dbPath>
        </infoQuery>
        <derivedQuery id="{@family}ParentFunctionOffsetFromStart" displayName="{$AddFamilyIfSecondary}%ParentFunctionOffsetFromStart">
          <xsl:variable name="text">query("/{@family}ParentInternalAddress") - query("/{@family}ParentFunctionStartRva")</xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>int</valueType>
        </derivedQuery>
        <infoQuery id="{@family}FunctionStartRva" displayName="{$AddFamilyIfSecondary}%FunctionStartRva">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.start_rva</xsl:text>
          </dbPath>
        </infoQuery>
        <infoQuery id="{@family}InternalAddressRva" displayName="{$AddFamilyIfSecondary}%InternalAddressRva">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.rva</xsl:text>
          </dbPath>
        </infoQuery>
        <derivedQuery id="{@family}FunctionOffsetFromStart" displayName="{$AddFamilyIfSecondary}%FunctionOffsetFromStart">
          <xsl:variable name="text">query("/{@family}InternalAddressRva") - query("/{@family}FunctionStartRva")</xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>int</valueType>
        </derivedQuery>
        <derivedQuery id="{@family}StackFunctionOffsetFromStart">
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="@family = 'Wait' or @family = 'ContextSwitch'">
                query("/{@family}ParentCallsite") ? query("/{@family}ParentFunctionOffsetFromStart") : query("/{@family}FunctionOffsetFromStart")
              </xsl:when>
              <xsl:otherwise>
                query("/{@family}ParentFunctionOffsetFromStart")
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>int</valueType>
        </derivedQuery>
        <infoQuery id="{@family}ParentFunctionModule" displayName="{$AddFamilyIfSecondary}%ParentFunctionModule">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.func_range.func_inst.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}ParentFunctionShort" displayName="{$AddFamilyIfSecondary}%ParentFunction">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}ParentFunctionSourceFile" displayName="{$AddFamilyIfSecondary}%ParentFunctionSourceFile">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.func_range.func_inst.function.src_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <aliasForUnknown>%AliasUnknownSourceFile</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}ParentSourceLine" displayName="{$AddFamilyIfSecondary}%ParentSourceLine">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.src_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>line</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}ParentSourceColumn" displayName="%SourceColumn">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.src_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>col</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}FunctionShort" displayName="{$AddFamilyIfSecondary}%Function">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionMangled" displayName="{$AddFamilyIfSecondary}%Function">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.mangled_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}ParentFunctionMangled" displayName="{$AddFamilyIfSecondary}%Function">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.mangled_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}OuterFunctionMangled" displayName="{$AddFamilyIfSecondary}%Function">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.head.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.mangled_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}ParentCallsite" displayName="{$AddFamilyIfSecondary}%ParentCallsite">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs</xsl:text>
          </dbPath>
          <displayDbPathSuffix>code_loc</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}Callsite" displayName="{$AddFamilyIfSecondary}%Callsite">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs</xsl:text>
          </dbPath>
          <displayDbPathSuffix>code_loc</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionSourceFile" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function.src_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <aliasForUnknown>%AliasUnknownSourceFile</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}FunctionSourceFilePath" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function.src_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>path</displayDbPathSuffix>
          <aliasForUnknown>%AliasUnknownSourceFile</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}InternalAddress" displayName="{$AddFamilyIfSecondary}%InternalAddress">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>rva</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}InternalAddressFlat" displayName="{$AddFamilyIfSecondary}%InternalAddress">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text></xsl:text>
          </dbPath>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <displayDbPathSuffix>code_loc.rva</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc</mergeDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}ModuleFileCategory" displayName="{$AddFamilyIfSecondary}%ModuleFileCategory">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.mod_seg.mod_file.category</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}ModuleFileIsKernel" displayName="{$AddFamilyIfSecondary}%ModuleFileIsKernel">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.mod_seg.mod_file.attributes.is_kernel</xsl:text>
          </dbPath>
          <displayDbPathSuffix>value</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}InternalAddressFlatInplace" displayName="{$AddFamilyIfSecondary}%InternalAddressInplace">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text></xsl:text>
          </dbPath>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <displayDbPathSuffix>code_loc.inplace</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc</mergeDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}CallStack" displayName="{$AddFamilyIfSecondary}%FunctionStack">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
          </dbPath>
          <displayDbPathSuffix>code_loc.func_range.func_inst.function.name</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.func_range.func_inst</mergeDbPathSuffix>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}SourceCallStack" displayName="{$AddFamilyIfSecondary}%SourceFunctionStack">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
          </dbPath>
          <displayDbPathSuffix>code_loc.func_range.func_inst.function.name</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.func_range.func_inst.function</mergeDbPathSuffix>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}FlatProfileFunction" displayName="%Function">
          <xsl:variable name="text">/{@family}CallStack</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}FlatProfileCallers" displayName="%FlatProfileCallers">
          <xsl:variable name="text">/{@family}CallStack</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}FlatProfileCallees" displayName="%FlatProfileCallees">
          <xsl:variable name="text">/{@family}CallStack</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}CallStackAddress" displayName="{$AddFamilyIfSecondary}%CallStack">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
          </dbPath>
          <displayDbPathSuffix>code_loc.display_address</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.func_range.func_inst</mergeDbPathSuffix>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}NoAttrCallStack" displayName="{$AddFamilyIfSecondary}%CallStack">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
          </dbPath>
          <displayDbPathSuffix>code_loc.func_range.func_inst.function.name</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.func_range.func_inst</mergeDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}ParentCallStack" displayName="{$AddFamilyIfSecondary}%ParentCallStack">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent</xsl:text>
          </dbPath>
          <displayDbPathSuffix>code_loc.func_range.func_inst.function.name</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.func_range.func_inst</mergeDbPathSuffix>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}ParentCallStackNoMerge" displayName="{$AddFamilyIfSecondary}%ParentCallStackNoMerge">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent</xsl:text>
          </dbPath>
          <displayDbPathSuffix>code_loc.func_range.func_inst.function.name</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}ParentCallStackNoMergeDisplayAsAddr" displayName="{$AddFamilyIfSecondary}%ParentCallStack">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent</xsl:text>
          </dbPath>
          <displayDbPathSuffix>code_loc.display_address</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <aliasForUnknown>%AliasUnknownCallStack</aliasForUnknown>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}BasicBlock" displayName="{$AddFamilyIfSecondary}%BasicBlock">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.bb</xsl:text>
          </dbPath>
          <displayDbPathSuffix>start_display_address</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}BasicBlockInternal" displayName="{$AddFamilyIfSecondary}%BasicBlock">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.bb</xsl:text>
          </dbPath>
          <displayDbPathSuffix>start_rva</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}BasicBlockSize" displayName="{$AddFamilyIfSecondary}%BasicBlockSize">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.bb</xsl:text>
          </dbPath>
          <displayDbPathSuffix>size</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}BasicBlockNumInstr" displayName="{$AddFamilyIfSecondary}%BasicBlockNumInstr">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.bb</xsl:text>
          </dbPath>
          <displayDbPathSuffix>num_instr</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}BasicBlockModule" displayName="{$AddFamilyIfSecondary}%Module">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.bb.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}BasicBlockBranchType" displayName="{$AddFamilyIfSecondary}%BasicBlockBranchType">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.bb.branch_type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}SourceFunctionFull" displayName="{$AddFamilyIfSecondary}%FunctionFull">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function</xsl:text>
          </dbPath>
          <displayDbPathSuffix>full_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}SourceFunctionSourceFile" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function</xsl:text>
          </dbPath>
          <displayDbPathSuffix>src_file.name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionModule" displayName="{$AddFamilyIfSecondary}%Module">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionModulePath" displayName="{$AddFamilyIfSecondary}%ModulePath">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_path</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionFoundModulePath" displayName="{$AddFamilyIfSecondary}%ModulePath">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_located_path</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}Module" displayName="{$AddFamilyIfSecondary}%Module">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_name</displayDbPathSuffix>
          <displayAttributes>
            <timelineGraphColor>60,182,60</timelineGraphColor>
          </displayAttributes>
          <aliasForUnknown>%AliasUnknownModule</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}ModulePath" displayName="{$AddFamilyIfSecondary}%ModulePath">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_path</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionFull" displayName="{$AddFamilyIfSecondary}%FunctionFull">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.full_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}SourceContent" displayName="{$AddFamilyIfSecondary}%SourceContent">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>content</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}RVA" displayName="{$AddFamilyIfSecondary}%RVA">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>display_address</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}ParentRVA" displayName="{$AddFamilyIfSecondary}%ParentRVA">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>display_address</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}Function" displayName="{$AddFamilyIfSecondary}%Function">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}ParentFunction" displayName="{$AddFamilyIfSecondary}%ParentFunction">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.parent.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>function.name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionRange" displayName="{$AddFamilyIfSecondary}%FunctionRange">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range</xsl:text>
          </dbPath>
          <displayDbPathSuffix>start_display_address</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}FunctionRangeSize" displayName="{$AddFamilyIfSecondary}%FunctionRangeSize">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range</xsl:text>
          </dbPath>
          <displayDbPathSuffix>size</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}FunctionRangeInternal" displayName="{$AddFamilyIfSecondary}%FunctionRange">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range</xsl:text>
          </dbPath>
          <displayDbPathSuffix>start_rva</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}FunctionRangeModule" displayName="{$AddFamilyIfSecondary}%Module">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionRangeModulePath" displayName="{$AddFamilyIfSecondary}%ModulePath">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.mod_seg.mod_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>bin_path</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionStartAddress" displayName="%FunctionStartAddress">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst</xsl:text>
          </dbPath>
          <displayDbPathSuffix>start_display_address</displayDbPathSuffix>
          <displayAttributes>
            <format>hex</format>
          </displayAttributes>
          <valueType>uint</valueType>
        </infoQuery>
        <infoQuery id="{@family}SourceFilePath" displayName="{$AddFamilyIfSecondary}%SourceFilePath">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc.src_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>path</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}CS" displayName="{$AddFamilyIfSecondary}%CS">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs</xsl:text>
          </dbPath>
        </infoQuery>
        <infoQuery id="{@family}Class" displayName="{$AddFamilyIfSecondary}%Class">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function.class</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <aliasForUnknown>%AliasUnknownClass</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}SourceFunction" displayName="{$AddFamilyIfSecondary}%SourceFunction">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}SourceLine" displayName="{$AddFamilyIfSecondary}%SourceLine">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>line</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}SourceLineStart" displayName="%SourceLineStart">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>func_range.func_inst.function.src_start</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}SourceColumn" displayName="%SourceColumn">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc</xsl:text>
          </dbPath>
          <displayDbPathSuffix>col</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}SourceDiscriminator" displayName="%SourceDiscriminator">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc_ext</xsl:text>
          </dbPath>
          <displayDbPathSuffix>discriminator</displayDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}FunctionInstanceType" displayName="{$AddFamilyIfSecondary}%FunctionInstanceType">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}SourceLineFlat" displayName="{$AddFamilyIfSecondary}%SourceLine">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text></xsl:text>
          </dbPath>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <displayDbPathSuffix>code_loc.src_loc.line</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.src_loc</mergeDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}SourceLineFlatInplace" displayName="{$AddFamilyIfSecondary}%SourceLineInplace">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text></xsl:text>
          </dbPath>
          <attributionDbPathSuffix>bottom_user_cs</attributionDbPathSuffix>
          <displayDbPathSuffix>code_loc.src_loc.inplace</displayDbPathSuffix>
          <parentDbPathSuffix>parent</parentDbPathSuffix>
          <mergeDbPathSuffix>code_loc.src_loc</mergeDbPathSuffix>
          <valueType>int</valueType>
        </infoQuery>
        <infoQuery id="{@family}SourceLocFunction" displayName="{$AddFamilyIfSecondary}%SourceLocFunction">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc.function</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}SourceFile" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc.src_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <aliasForUnknown>%AliasUnknownSourceFile</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}CallSiteSourceFile" displayName="{$AddFamilyIfSecondary}%CallSiteSourceFile">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.src_loc.src_file</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <aliasForUnknown>%AliasUnknownSourceFile</aliasForUnknown>
        </infoQuery>
        <infoQuery id="{@family}CallsiteType" displayName="{$AddFamilyIfSecondary}%CallsiteType">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}TypeCsFunctionType" displayName="{$AddFamilyIfSecondary}%FunctionType">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.type_cs.code_loc.func_range.func_inst.function.type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}TypeCsFunctionSubtype" displayName="{$AddFamilyIfSecondary}%FunctionSubtype">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.type_cs.code_loc.func_range.func_inst.function.subtype</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}FunctionType" displayName="{$AddFamilyIfSecondary}%FunctionType">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.function.type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}AssemblyContent" displayName="{$AddFamilyIfSecondary}%AssemblyContent">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.asm</xsl:text>
          </dbPath>
          <displayDbPathSuffix>opcode</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}VectorizedStatus" displayName="%VectorizedStatus">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.vect_info.type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}CompilerDiagnosticPresent" displayName="%CompilerDiagnosticPresent">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.opt_info</xsl:text>
          </dbPath>
          <displayDbPathSuffix>is_compiler_diagnostic_present</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}LoopCharacterization" displayName="%LoopCharacterization">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.opt_info.loop_opt_info.loop_type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}VectInstSet" displayName="%VectInstSet" cliName="vect-ext">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.vect_info</xsl:text>
          </dbPath>
          <displayDbPathSuffix>inst_sets</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}VectInstClass" displayName="%VectInstClass" cliName="vect-inst-class">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.vect_info</xsl:text>
          </dbPath>
          <displayDbPathSuffix>inst_classes</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}VectWidths" displayName="%VectWidths" cliName="vect-widths">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.vect_info</xsl:text>
          </dbPath>
          <displayDbPathSuffix>vect_widths</displayDbPathSuffix>
        </infoQuery>
        <infoQuery id="{@family}VectDataTypes" displayName="%VectDataTypes" cliName="vect-data-types">
          <dbPath>
            <xsl:value-of select="@callsitePath"/>
            <xsl:text>.bottom_user_cs.code_loc.func_range.func_inst.vect_info</xsl:text>
          </dbPath>
          <displayDbPathSuffix>vect_data_types</displayDbPathSuffix>
        </infoQuery>
        <derivedQuery id="{@family}ParentModuleAndFunction" displayName="{$AddFamilyIfSecondary}%ParentModuleAndFunction">
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="@family = 'Wait' or @family = 'ContextSwitch'">
                query("/{@family}ParentFunctionModule") ?
                query("/{@family}ParentFunctionModule") + "!" + query("/{@family}ParentFunctionShort") + "+" + h#query("/{@family}ParentFunctionOffsetFromStart"):
                query("/{@family}FunctionModule") + "!" + query("/{@family}FunctionShort") + "+" + h#query("/{@family}FunctionOffsetFromStart")
              </xsl:when>
              <xsl:when test="@family = 'WaitSyncObjCreation' or @family = 'WaitSyncObjDestroy'">
                query("/{@family}ParentFunctionModule") ?
                query("/{@family}ParentFunctionModule") + "!" + query("/{@family}ParentFunctionShort"):
                query("/{@family}FunctionModule") + "!" + query("/{@family}FunctionShort")
              </xsl:when>
              <xsl:otherwise>
                query("/{@family}ParentFunctionModule") ?
                query("/{@family}ParentFunctionModule") + "!" + query("/{@family}ParentFunctionShort") + "+" + h#query("/{@family}ParentFunctionOffsetFromStart"):
                query("/{@family}FunctionModule") + "!" + query("/{@family}FunctionShort")
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
          <displayAttributes>
            <moduleSplitter>!</moduleSplitter>
          </displayAttributes>
        </derivedQuery>
        <derivedQuery id="{@family}StackModule">
          <xsl:variable name="text">
            query("/{@family}ParentFunctionModule") ? query("/{@family}ParentFunctionModule") : query("/{@family}FunctionModule")
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
        </derivedQuery>
        <derivedQuery id="{@family}ParentSourceFileAndLine" displayName="{$AddFamilyIfSecondary}%ParentSourceFileAndLine">
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="@family = 'Wait' or @family = 'ContextSwitch'">
                query("/{@family}ParentCallsite") ?
                query("/{@family}ParentFunctionSourceFile") + ":" + query("/{@family}ParentSourceLine")
                :
                query("/{@family}SourceFile") + ":" + query("/{@family}SourceLine")
              </xsl:when>
              <xsl:otherwise>
                query("/{@family}ParentCallsite") ?
                query("/{@family}ParentFunctionSourceFile") + ":" + query("/{@family}ParentSourceLine")
                :
                query("/{@family}FunctionSourceFile")
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
          <displayAttributes>
            <boolean:hidable>true</boolean:hidable>
          </displayAttributes>
        </derivedQuery>
        <derivedQuery id="{@family}StackSourceFile">
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="@family = 'Wait' or @family = 'ContextSwitch'">
                query("/{@family}ParentCallsite") ? query("/{@family}ParentFunctionSourceFile") : query("/{@family}SourceFile")
              </xsl:when>
              <xsl:otherwise>
                query("/{@family}ParentCallsite") ? query("/{@family}ParentFunctionSourceFile") : query("/{@family}FunctionSourceFile")
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
          <displayAttributes>
            <boolean:hidable>true</boolean:hidable>
          </displayAttributes>
        </derivedQuery>
        <derivedQuery id="{@family}StackSourceLine">
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="@family = 'Wait' or @family = 'ContextSwitch'">
                query("/{@family}ParentCallsite") ? query("/{@family}ParentSourceLine") : query("/{@family}SourceLine")
              </xsl:when>
              <xsl:otherwise>
                query("/{@family}ParentSourceLine")
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
          <displayAttributes>
            <boolean:hidable>true</boolean:hidable>
          </displayAttributes>
        </derivedQuery>
        <infoQuery id="{@family}ProcessModule" displayName="{$AddFamilyIfSecondary}%Module">
          <xsl:variable name="text">/{@family}Module/Process</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}FunctionProcessModule" displayName="{$AddFamilyIfSecondary}%Function">
          <xsl:variable name="text">/{@family}Function/{@family}ProcessModule</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}FunctionAndModule" displayName="{$AddFamilyIfSecondary}%Function">
          <xsl:variable name="text">/{@family}Function/{@family}Module</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <derivedQuery id="{@family}ModuleAndFunction" displayName="{$AddFamilyIfSecondary}%ModuleAndFunction">
          <xsl:variable name="text">query("/{@family}FunctionModule") + "!" + query("/{@family}Function")</xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
          <displayAttributes>
            <moduleSplitter>!</moduleSplitter>
          </displayAttributes>
        </derivedQuery>
        <infoQuery id="{@family}SourceFileProcessModule" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <xsl:variable name="text">/{@family}SourceFile/{@family}ProcessModule</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}SourceFileModule" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <xsl:variable name="text">/{@family}SourceFile/{@family}Module</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}SourceFileLineProcessModule" displayName="{$AddFamilyIfSecondary}%SourceFile">
          <xsl:variable name="text">/{@family}SourceFile/{@family}SourceLine/{@family}ProcessModule</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <infoQuery id="{@family}SourceFileLineModule" displayName="%SourceFile">
          <xsl:variable name="text">/{@family}SourceFile/{@family}SourceLine/{@family}Module</xsl:variable>
          <queryInherit>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </queryInherit>
        </infoQuery>
        <derivedQuery id="{@family}FunctionSourceFileAndLine" displayName="{$AddFamilyIfSecondary}%SourceFunctionFileAndLine">
          <xsl:variable name="text">query("/{@family}FunctionSourceFile") + ":" + query("/{@family}SourceLine")</xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
        </derivedQuery>
        <derivedQuery id="{@family}SourceFileAndLine" displayName="{$AddFamilyIfSecondary}%SourceFunctionFileAndLine">
          <xsl:variable name="text">query("/{@family}FunctionSourceFile") + ":" + query("/{@family}SourceLine")</xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <valueType>string</valueType>
        </derivedQuery>
      </xsl:if>
      <xsl:if test="@cpuPath">
        <infoQuery id="{@family}HWContext" displayName="{$AddFamilyIfSecondary}%HWContext">
          <dbPath>
            <xsl:value-of select="@cpuPath"/>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <displayAttributes>
            <sortValueType>objectId</sortValueType>
          </displayAttributes>
        </infoQuery>
        <infoQuery id="{@family}Core" displayName="%Core">
          <dbPath>
            <xsl:value-of select="@cpuPath"/>
            <xsl:text>.core</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <displayAttributes>
            <sortValueType>objectId</sortValueType>
          </displayAttributes>
        </infoQuery>
        <infoQuery id="{@family}CoreType" displayName="%CoreType">
          <dbPath>
            <xsl:value-of select="@cpuPath"/>
            <xsl:text>.core.type</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <displayAttributes>
            <sortValueType>objectId</sortValueType>
          </displayAttributes>
        </infoQuery>
        <infoQuery id="{@family}Package" displayName="%Package">
          <dbPath>
            <xsl:value-of select="@cpuPath"/>
            <xsl:text>.core.package</xsl:text>
          </dbPath>
          <displayDbPathSuffix>name</displayDbPathSuffix>
          <displayAttributes>
            <sortValueType>objectId</sortValueType>
          </displayAttributes>
        </infoQuery>
      </xsl:if>
      <xsl:if test="@timeQueryPath">
        <timeQuery id="{@family}Time" displayName="{$AddFamilyIfSecondary}%{@family}Time">
          <instanceDbTable>
            <xsl:value-of select="@timeQueryPath"/>
          </instanceDbTable>
          <description>
            <xsl:text>%</xsl:text>
            <xsl:value-of select="@family"/>
            <xsl:text>TimeDescription</xsl:text>
          </description>
          <displayAttributes>
            <sortType>descending</sortType>
            <selfFormat>timeAndBar</selfFormat>
            <totalFormat>timeAndBar</totalFormat>
            <timelineFormat>area</timelineFormat>
            <timelineGraphColor>98,79,19</timelineGraphColor>
          </displayAttributes>
        </timeQuery>
      </xsl:if>
      <xsl:if test="@family = 'PMU' or @family = 'CPU'">
        <derivedQuery id="{@family}TimeDiff" displayName="%CPUTimeDiff">
          <valueType>time</valueType>
          <displayAttributes>
            <boolean:modulus>true</boolean:modulus>
            <sortHint>difference</sortHint>
          </displayAttributes>
          <xsl:variable name="text">query("/{@family}Time")</xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{@family}', string(@family))"/>
          </valueEval>
          <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
          <confidenceText>%NotEnoughSamples</confidenceText>
        </derivedQuery>
      </xsl:if>
    </xsl:for-each>
    <xsl:choose>
      <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
        <derivedQuery id="CPUTime" displayName="%RefTime">
          <helpKeyword>configs.cputime_cputimedescription</helpKeyword>
          <queryInherit>/RefTime</queryInherit>
        </derivedQuery>
      </xsl:when>
      <xsl:otherwise>
        <timeQuery id="CPUTime" displayName="%CPUTime">
          <description>%CPUTimeDescription</description>
          <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
          <confidenceText>%NotEnoughSamples</confidenceText>
          <instanceDbTable>cpu_data::dd_sample</instanceDbTable>
          <displayAttributes>
            <sortType>descending</sortType>
            <selfFormat>timeAndBar</selfFormat>
            <totalFormat>timeAndBar</totalFormat>
            <timelineFormat>area</timelineFormat>
            <timelineGraphColor>98,79,19</timelineGraphColor>
          </displayAttributes>
        </timeQuery>
      </xsl:otherwise>
    </xsl:choose>
    <timeQuery id="NotApplicableQuery">
      <instanceDbTable>not_applicable_query_data</instanceDbTable>
    </timeQuery>
    <infoQuery id="Thread" displayName="%Thread">
      <dbPath>dd_band::dd_thread</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <displayAttributes>
        <timelineGraphColor>108,184,93</timelineGraphColor>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="ThreadID" displayName="%ThreadID">
      <dbPath>dd_band::dd_thread</dbPath>
      <displayDbPathSuffix>thread_id</displayDbPathSuffix>
      <valueType>int</valueType>
      <displayAttributes>
        <format>string</format>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="Process" displayName="%Process">
      <dbPath>dd_band::dd_thread.process</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ContainerId" displayName="%ContainerId">
      <dbPath>dd_band::dd_thread.process.process_in_container.container_desc</dbPath>
      <displayDbPathSuffix>container_name</displayDbPathSuffix>
      <aliasForUnknown>%AliasUnknownContainer</aliasForUnknown>
    </infoQuery>
    <infoQuery id="ContainerName" displayName="%ContainerName">
      <dbPath>dd_band::dd_thread.process.process_in_container.container_desc</dbPath>
      <displayDbPathSuffix>container_user_name</displayDbPathSuffix>
      <aliasForUnknown>%AliasUnknownContainer</aliasForUnknown>
    </infoQuery>
    <infoQuery id="VM" displayName="%VM">
      <dbPath>dd_band::dd_thread.process.vm_info</dbPath>
      <displayDbPathSuffix>os_info.name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ThreadVM" displayName="%VM">
      <dbPath>dd_band::dd_thread.process.vm_info</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="GPUVM" displayName="%VM">
      <dbPath>dma_packet_data::dd_dma_packet.thread.process.vm_info</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <vectorQuery id="GenericVM" displayName="%VM">
      <queryRef>/VM</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericVirtualMachine" displayName="%VM">
      <queryRef>/ThreadVM</queryRef>
      <queryRef>/GPUVM</queryRef>
    </vectorQuery>
    <infoQuery id="ProcessStartTsc" displayName="%Process">
      <dbPath>dd_band::dd_thread.process</dbPath>
      <displayDbPathSuffix>start_tsc</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ProcessEndTsc" displayName="%Process">
      <dbPath>dd_band::dd_thread.process</dbPath>
      <displayDbPathSuffix>end_tsc</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ProcessID" displayName="%ProcessID">
      <dbPath>dd_band::dd_thread.process</dbPath>
      <displayDbPathSuffix>pid</displayDbPathSuffix>
      <valueType>int</valueType>
      <displayAttributes>
        <format>string</format>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="MasterThreadFlag" displayName="%ProcessID">
      <dbPath>dd_band::dd_thread.is_master</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <valueType>string</valueType>
    </infoQuery>
    <infoQuery id="ThreadAffinity" displayName="%ThreadAffinity">
      <dbPath>dd_band::dd_thread.affinity</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <valueType>string</valueType>
    </infoQuery>
    <infoQuery id="ThreadCreateTime">
      <dbPath>dd_band::dd_thread</dbPath>
      <displayDbPathSuffix>create_tsc</displayDbPathSuffix>
      <displayAttributes>
        <sortType>ascending</sortType>
        <boolean:lifetimeStart>true</boolean:lifetimeStart>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="ThreadEndTime">
      <dbPath>dd_band::dd_thread</dbPath>
      <displayDbPathSuffix>close_tsc</displayDbPathSuffix>
      <displayAttributes>
        <boolean:lifetimeEnd>true</boolean:lifetimeEnd>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="HWContextNameName" displayName="%CPU">
      <dbPath>dd_band::dd_hw_context</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="Core" displayName="%Core">
      <dbPath>dd_band::dd_core</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <displayAttributes>
        <boolean:unitDistinctQuery>true</boolean:unitDistinctQuery>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="CoreFrequency" displayName="%CoreFrequency">
      <queryInherit>/Core</queryInherit>
    </infoQuery>
    <infoQuery id="OSCore" displayName="%OSCore">
      <queryInherit>/Core</queryInherit>
    </infoQuery>
    <infoQuery id="HWCore" displayName="%HWCore">
      <queryInherit>/Core</queryInherit>
    </infoQuery>
    <infoQuery id="CorePackage" displayName="%Package">
      <dbPath>dd_band::dd_core.package</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="Machine" displayName="%Machine">
      <dbPath>dd_band::dd_hw_node</dbPath>
      <displayDbPathSuffix>machine_name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="Package" displayName="%Package">
      <dbPath>dd_band::dd_package</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="HWCorePackage" displayName="%Package">
      <dbPath>dd_band::dd_hw_context.core.package</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <xsl:variable name="groupingQueries">
      <item name="Module" displayName="%Module"/>
      <item name="Function" displayName="%Function"/>
      <item name="SourceFunction" displayName="%SourceFunction"/>
      <item name="SourceLineFlat" displayName="%SourceLine"/>
      <item name="InternalAddressFlat" displayName="%InternalAddress"/>
      <item name="SourceLineFlatInplace" displayName="%SourceLineFlatInplace"/>
      <item name="InternalAddressFlatInplace" displayName="%InternalAddressFlatInplace"/>
      <item name="ParentCallStack" displayName="%ParentCallStack"/>
      <item name="ParentCallStackNoMerge" displayName="%ParentCallStack"/>
      <item name="ParentCallStackNoMergeDisplayAsAddr" displayName="%ParentCallStack"/>
      <item name="InternalAddress" displayName="%InternalAddress"/>
    </xsl:variable>
    <xsl:for-each select="exsl:node-set($groupingQueries)/item">
      <vectorQuery id="{@name}" displayName="{@displayName}">
        <xsl:variable name="grouping" select="."/>
        <xsl:for-each select="exsl:node-set($families)/item">
          <xsl:if test="@callsitePath and not(@disableAsGrouping)">
            <queryRef>
              <xsl:text>/</xsl:text>
              <xsl:value-of select="@family"/>
              <xsl:value-of select="$grouping/@name"/>
            </queryRef>
          </xsl:if>
        </xsl:for-each>
      </vectorQuery>
    </xsl:for-each>
    <vectorQuery id="BasicBlock" displayName="%BasicBlock">
      <queryRef>/CPUBasicBlock</queryRef>
      <queryRef>/PMUBasicBlock</queryRef>
      <queryRef>/PMU_IPTBBBasicBlock</queryRef>
      <queryRef>/ContextSwitchBasicBlock</queryRef>
      <queryRef>/WaitBasicBlock</queryRef>
      <queryRef>/CStateTimerBasicBlock</queryRef>
      <queryRef>/CounterBasicBlock</queryRef>
      <queryRef>/MemoryAllocBasicBlock</queryRef>
      <queryRef>/MemoryDeallocBasicBlock</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionMangled" displayName="%Function">
      <queryRef>/CPUFunctionMangled</queryRef>
      <queryRef>/PMUFunctionMangled</queryRef>
      <queryRef>/PMU_IPTBBFunctionMangled</queryRef>
      <queryRef>/ContextSwitchFunctionMangled</queryRef>
      <queryRef>/WaitFunctionMangled</queryRef>
      <queryRef>/CStateTimerFunctionMangled</queryRef>
      <queryRef>/CounterFunctionMangled</queryRef>
      <queryRef>/MemoryAllocFunctionMangled</queryRef>
      <queryRef>/MemoryDeallocFunctionMangled</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionFull" displayName="%FunctionFull">
      <queryRef>/CPUFunctionFull</queryRef>
      <queryRef>/PMUFunctionFull</queryRef>
      <queryRef>/PMU_IPTBBFunctionFull</queryRef>
      <queryRef>/ContextSwitchFunctionFull</queryRef>
      <queryRef>/WaitFunctionFull</queryRef>
      <queryRef>/CStateTimerFunctionFull</queryRef>
      <queryRef>/CounterFunctionFull</queryRef>
      <queryRef>/MemoryAllocFunctionFull</queryRef>
      <queryRef>/MemoryDeallocFunctionFull</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionRange" displayName="%FunctionRange">
      <queryRef>/CPUFunctionRange</queryRef>
      <queryRef>/PMUFunctionRange</queryRef>
      <queryRef>/PMU_IPTBBFunctionRange</queryRef>
      <queryRef>/ContextSwitchFunctionRange</queryRef>
      <queryRef>/WaitFunctionRange</queryRef>
      <queryRef>/CStateTimerFunctionRange</queryRef>
      <queryRef>/CounterFunctionRange</queryRef>
      <queryRef>/MemoryAllocFunctionRange</queryRef>
      <queryRef>/MemoryDeallocFunctionRange</queryRef>
    </vectorQuery>
    <vectorQuery id="CliFunctionRange" cliName="function-range">
      <queryInherit>/FunctionRange</queryInherit>
    </vectorQuery>
    <vectorQuery id="Class" displayName="%Class">
      <queryRef>/CPUClass</queryRef>
      <queryRef>/PMUClass</queryRef>
      <queryRef>/PMU_IPTBBClass</queryRef>
      <queryRef>/ContextSwitchClass</queryRef>
      <queryRef>/WaitClass</queryRef>
      <queryRef>/CStateTimerClass</queryRef>
      <queryRef>/CounterClass</queryRef>
      <queryRef>/MemoryAllocClass</queryRef>
      <queryRef>/MemoryDeallocClass</queryRef>
    </vectorQuery>
    <vectorQuery id="SourceFile" displayName="%SourceFile">
      <queryRef>/CPUSourceFile</queryRef>
      <queryRef>/PMUSourceFile</queryRef>
      <queryRef>/PMU_IPTBBSourceFile</queryRef>
      <queryRef>/ContextSwitchSourceFile</queryRef>
      <queryRef>/WaitSourceFile</queryRef>
      <queryRef>/CStateTimerSourceFile</queryRef>
      <queryRef>/CounterSourceFile</queryRef>
      <queryRef>/MemoryAllocSourceFile</queryRef>
      <queryRef>/MemoryDeallocSourceFile</queryRef>
    </vectorQuery>
    <vectorQuery id="SourceFilePath" displayName="%SourceFilePath">
      <queryRef>/CPUSourceFilePath</queryRef>
      <queryRef>/PMUSourceFilePath</queryRef>
      <queryRef>/PMU_IPTBBSourceFilePath</queryRef>
      <queryRef>/GPUSourceFilePath</queryRef>
      <queryRef>/ContextSwitchSourceFilePath</queryRef>
      <queryRef>/WaitSourceFilePath</queryRef>
      <queryRef>/CStateTimerSourceFilePath</queryRef>
      <queryRef>/CounterSourceFilePath</queryRef>
      <queryRef>/MemoryAllocSourceFilePath</queryRef>
      <queryRef>/MemoryDeallocSourceFilePath</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionSourceFile" displayName="%SourceFile">
      <queryRef>/CPUFunctionSourceFile</queryRef>
      <queryRef>/PMUFunctionSourceFile</queryRef>
      <queryRef>/PMU_IPTBBFunctionSourceFile</queryRef>
      <queryRef>/ContextSwitchFunctionSourceFile</queryRef>
      <queryRef>/WaitFunctionSourceFile</queryRef>
      <queryRef>/CStateTimerFunctionSourceFile</queryRef>
      <queryRef>/CounterFunctionSourceFile</queryRef>
      <queryRef>/MemoryAllocFunctionSourceFile</queryRef>
      <queryRef>/MemoryDeallocFunctionSourceFile</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionModule" displayName="%Module">
      <queryRef>/CPUFunctionModule</queryRef>
      <queryRef>/PMUFunctionModule</queryRef>
      <queryRef>/PMU_IPTBBFunctionModule</queryRef>
      <queryRef>/ContextSwitchFunctionModule</queryRef>
      <queryRef>/WaitFunctionModule</queryRef>
      <queryRef>/CStateTimerFunctionModule</queryRef>
      <queryRef>/CounterFunctionModule</queryRef>
      <queryRef>/MemoryAllocFunctionModule</queryRef>
      <queryRef>/MemoryDeallocFunctionModule</queryRef>
    </vectorQuery>
    <vectorQuery id="ModulePath" displayName="%ModulePath">
      <queryRef>/CPUModulePath</queryRef>
      <queryRef>/PMUModulePath</queryRef>
      <queryRef>/PMU_IPTBBModulePath</queryRef>
      <queryRef>/ContextSwitchModulePath</queryRef>
      <queryRef>/WaitModulePath</queryRef>
      <queryRef>/CStateTimerModulePath</queryRef>
      <queryRef>/CounterModulePath</queryRef>
      <queryRef>/MemoryAllocModulePath</queryRef>
      <queryRef>/MemoryDeallocModulePath</queryRef>
    </vectorQuery>
    <vectorQuery id="CallStack" displayName="%CallStack">
      <queryRef>/CPUCallStack</queryRef>
      <queryRef>/PMUCallStack</queryRef>
      <queryRef>/PMU_IPTBBCallStack</queryRef>
      <queryRef>/ContextSwitchCallStack</queryRef>
      <queryRef>/WaitCallStack</queryRef>
      <queryRef>/CStateTimerCallStack</queryRef>
      <queryRef>/CounterCallStack</queryRef>
      <queryRef>/MemoryAllocCallStack</queryRef>
      <queryRef>/MemoryDeallocCallStack</queryRef>
    </vectorQuery>
    <vectorQuery id="FlatProfileFunction" displayName="%Function">
      <queryRef>/CPUFlatProfileFunction</queryRef>
      <queryRef>/PMUFlatProfileFunction</queryRef>
      <queryRef>/PMU_IPTBBFlatProfileFunction</queryRef>
      <queryRef>/ContextSwitchFlatProfileFunction</queryRef>
      <queryRef>/WaitFlatProfileFunction</queryRef>
      <queryRef>/CStateTimerFlatProfileFunction</queryRef>
      <queryRef>/CounterFlatProfileFunction</queryRef>
      <queryRef>/MemoryAllocProfileFunction</queryRef>
      <queryRef>/MemoryDeallocProfileFunction</queryRef>
    </vectorQuery>
    <vectorQuery id="FlatProfileCallers" displayName="%FlatProfileCallers">
      <queryRef>/CPUFlatProfileCallers</queryRef>
      <queryRef>/PMUFlatProfileCallers</queryRef>
      <queryRef>/PMU_IPTBBFlatProfileCallers</queryRef>
      <queryRef>/ContextSwitchFlatProfileCallers</queryRef>
      <queryRef>/WaitFlatProfileCallers</queryRef>
      <queryRef>/CStateTimerFlatProfileCallers</queryRef>
      <queryRef>/CounterFlatProfileCallers</queryRef>
      <queryRef>/MemoryAllocProfileCallers</queryRef>
      <queryRef>/MemoryDeallocProfileCallers</queryRef>
    </vectorQuery>
    <vectorQuery id="FlatProfileCallees" displayName="%FlatProfileCallees">
      <queryRef>/CPUFlatProfileCallees</queryRef>
      <queryRef>/PMUFlatProfileCallees</queryRef>
      <queryRef>/PMU_IPTBBFlatProfileCallees</queryRef>
      <queryRef>/ContextSwitchFlatProfileCallees</queryRef>
      <queryRef>/WaitFlatProfileCallees</queryRef>
      <queryRef>/CStateTimerFlatProfileCallees</queryRef>
      <queryRef>/CounterFlatProfileCallees</queryRef>
      <queryRef>/MemoryAllocFlatProfileCallees</queryRef>
      <queryRef>/MemoryDeallocFlatProfileCallees</queryRef>
    </vectorQuery>
    <vectorQuery id="SourceCallStack" displayName="%SourceFunctionStack">
      <queryRef>/CPUSourceCallStack</queryRef>
      <queryRef>/PMUSourceCallStack</queryRef>
      <queryRef>/PMU_IPTBBSourceCallStack</queryRef>
      <queryRef>/ContextSwitchSourceCallStack</queryRef>
      <queryRef>/WaitSourceCallStack</queryRef>
      <queryRef>/CStateTimerSourceCallStack</queryRef>
      <queryRef>/CounterSourceCallStack</queryRef>
      <queryRef>/MemoryAllocSourceCallStack</queryRef>
      <queryRef>/MemoryDeallocSourceCallStack</queryRef>
    </vectorQuery>
    <vectorQuery id="CallStackAddress" displayName="%CallStack">
      <queryRef>/CPUCallStackAddress</queryRef>
      <queryRef>/PMUCallStackAddress</queryRef>
      <queryRef>/PMU_IPTBBCallStackAddress</queryRef>
      <queryRef>/ContextSwitchCallStackAddress</queryRef>
      <queryRef>/WaitCallStackAddress</queryRef>
      <queryRef>/CStateTimerCallStackAddress</queryRef>
      <queryRef>/CounterCallStackAddress</queryRef>
      <queryRef>/MemoryAllocCallStackAddress</queryRef>
      <queryRef>/MemoryDeallocCallStackAddress</queryRef>
    </vectorQuery>
    <vectorQuery id="NoAttrCallStack" displayName="%CallStack">
      <queryRef>/CPUNoAttrCallStack</queryRef>
      <queryRef>/PMUNoAttrCallStack</queryRef>
      <queryRef>/PMU_IPTBBNoAttrCallStack</queryRef>
      <queryRef>/ContextSwitchNoAttrCallStack</queryRef>
      <queryRef>/WaitNoAttrCallStack</queryRef>
      <queryRef>/CStateTimerNoAttrCallStack</queryRef>
      <queryRef>/CounterNoAttrCallStack</queryRef>
      <queryRef>/MemoryAllocNoAttrCallStack</queryRef>
      <queryRef>/MemoryDeallocNoAttrCallStack</queryRef>
    </vectorQuery>
    <vectorQuery id="HWContext" displayName="%HWContext">
      <queryRef>/CPUHWContext</queryRef>
      <queryRef>/PMUHWContext</queryRef>
      <queryRef>/PMU_IPTBBHWContext</queryRef>
      <queryRef>/InterruptHWContext</queryRef>
      <queryRef>/IPTModuleHWContext</queryRef>
      <queryRef>/IPTTIPHWContext</queryRef>
    </vectorQuery>
    <vectorQuery id="SyncObject" displayName="%WaitSyncObj">
      <queryRef>/WaitSyncObj</queryRef>
      <vectorQueryInsert>/IstpSyncObject</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="RVA" displayName="%RVA">
      <queryRef>/PMURVA</queryRef>
      <queryRef>/PMU_IPTBBRVA</queryRef>
      <queryRef>/CPURVA</queryRef>
      <queryRef>/ContextSwitchRVA</queryRef>
      <queryRef>/WaitRVA</queryRef>
      <queryRef>/CStateTimerRVA</queryRef>
      <queryRef>/CounterRVA</queryRef>
      <queryRef>/MemoryAllocRVA</queryRef>
      <queryRef>/MemoryDeallocRVA</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionStartAddress" displayName="%FunctionStartAddress">
      <queryRef>/PMUFunctionStartAddress</queryRef>
      <queryRef>/PMU_IPTBBFunctionStartAddress</queryRef>
      <queryRef>/CPUFunctionStartAddress</queryRef>
      <queryRef>/ContextSwitchFunctionStartAddress</queryRef>
      <queryRef>/WaitFunctionStartAddress</queryRef>
      <queryRef>/CStateFunctionTimerStartAddress</queryRef>
      <queryRef>/CounterStartAddress</queryRef>
      <queryRef>/MemoryAllocStartAddress</queryRef>
      <queryRef>/MemoryDeallocStartAddress</queryRef>
    </vectorQuery>
    <vectorQuery id="SourceFunctionFull" displayName="%FunctionFull">
      <queryRef>/CPUSourceFunctionFull</queryRef>
      <queryRef>/PMUSourceFunctionFull</queryRef>
      <queryRef>/PMU_IPTBBSourceFunctionFull</queryRef>
      <queryRef>/ContextSwitchSourceFunctionFull</queryRef>
      <queryRef>/WaitSourceFunctionFull</queryRef>
      <queryRef>/CStateTimerSourceFunctionFull</queryRef>
      <queryRef>/CounterSourceFunctionFull</queryRef>
      <queryRef>/MemoryAllocFunctionFull</queryRef>
      <queryRef>/MemoryDeallocFunctionFull</queryRef>
    </vectorQuery>
    <vectorQuery id="SourceFunctionSourceFile" displayName="%SourceFile">
      <queryRef>/CPUSourceFunctionSourceFile</queryRef>
      <queryRef>/PMUSourceFunctionSourceFile</queryRef>
      <queryRef>/PMU_IPTBBSourceFunctionSourceFile</queryRef>
      <queryRef>/ContextSwitchSourceFunctionSourceFile</queryRef>
      <queryRef>/WaitSourceFunctionSourceFile</queryRef>
      <queryRef>/CStateTimerSourceFunctionSourceFile</queryRef>
      <queryRef>/CounterSourceFunctionSourceFile</queryRef>
      <queryRef>/MemoryAllocSourceFunctionSourceFile</queryRef>
      <queryRef>/MemoryDeallocSourceFunctionSourceFile</queryRef>
    </vectorQuery>
    <infoQuery id="GPUHWSourceLineFlat" displayName="%SourceLine">
      <dbPath>gpu_compute_task_data::dd_compute_task.type.context</dbPath>
      <displayDbPathSuffix>src_start</displayDbPathSuffix>
      <valueType>int</valueType>
    </infoQuery>
    <vectorQuery id="SourceLine" displayName="%SourceLine">
      <queryRef>/CPUSourceLine</queryRef>
      <queryRef>/PMUSourceLine</queryRef>
      <queryRef>/PMU_IPTBBSourceLine</queryRef>
      <queryRef>/ContextSwitchSourceLine</queryRef>
      <queryRef>/WaitSourceLine</queryRef>
      <queryRef>/CStateTimerSourceLine</queryRef>
      <queryRef>/CounterSourceLine</queryRef>
      <queryRef>/MemoryAllocSourceLine</queryRef>
      <queryRef>/MemoryDeallocSourceLine</queryRef>
    </vectorQuery>
    <vectorQuery id="SourceColumn" displayName="%SourceColumn">
      <queryRef>/CPUSourceColumn</queryRef>
      <queryRef>/PMUSourceColumn</queryRef>
      <queryRef>/PMU_IPTBBSourceColumn</queryRef>
    </vectorQuery>
    <vectorQuery id="BasicBlockInternal" displayName="%BasicBlock">
      <queryRef>/CPUBasicBlockInternal</queryRef>
      <queryRef>/PMUBasicBlockInternal</queryRef>
      <queryRef>/PMU_IPTBBBasicBlockInternal</queryRef>
      <queryRef>/GPUBasicBlockInternal</queryRef>
      <queryRef>/ContextSwitchBasicBlockInternal</queryRef>
      <queryRef>/WaitBasicBlockInternal</queryRef>
      <queryRef>/CStateTimerBasicBlockInternal</queryRef>
      <queryRef>/CounterBasicBlockInternal</queryRef>
      <queryRef>/MemoryAllocBasicBlockInternal</queryRef>
      <queryRef>/MemoryDeallocBasicBlockInternal</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionRangeInternal" displayName="%FunctionRange">
      <queryRef>/CPUFunctionRangeInternal</queryRef>
      <queryRef>/PMUFunctionRangeInternal</queryRef>
      <queryRef>/PMU_IPTBBFunctionRangeInternal</queryRef>
      <queryRef>/GPUFunctionRangeInternal</queryRef>
      <queryRef>/ContextSwitchFunctionRangeInternal</queryRef>
      <queryRef>/WaitFunctionRangeInternal</queryRef>
      <queryRef>/CStateTimerFunctionRangeInternal</queryRef>
      <queryRef>/CounterFunctionRangeInternal</queryRef>
      <queryRef>/MemoryAllocFunctionRangeInternal</queryRef>
      <queryRef>/MemoryDeallocFunctionRangeInternal</queryRef>
    </vectorQuery>
    <vectorQuery id="OuterFunctionMangled" displayName="%Function">
      <queryRef>/PMUOuterFunctionMangled</queryRef>
      <queryRef>/CPUOuterFunctionMangled</queryRef>
      <queryRef>/PMU_IPTBBOuterFunctionMangled</queryRef>
      <queryRef>/ContextSwitchBasicBlockInternal</queryRef>
      <queryRef>/WaitBasicBlockInternal</queryRef>
      <queryRef>/CStateTimerBasicBlockInternal</queryRef>
      <queryRef>/CounterBasicBlockInternal</queryRef>
      <queryRef>/MemoryAllocOuterFunctionMangled</queryRef>
      <queryRef>/MemoryDeallocOuterFunctionMangled</queryRef>
    </vectorQuery>
    <vectorQuery id="BasicBlockSize" displayName="%BasicBlockSize">
      <queryRef>/CPUBasicBlockSize</queryRef>
      <queryRef>/PMUBasicBlockSize</queryRef>
      <queryRef>/PMU_IPTBBBasicBlockSize</queryRef>
      <queryRef>/ContextSwitchBasicBlockSize</queryRef>
      <queryRef>/WaitBasicBlockSize</queryRef>
      <queryRef>/CStateTimerBasicBlockSize</queryRef>
      <queryRef>/CounterBasicBlockSize</queryRef>
      <queryRef>/MemoryAllocBasicBlockSize</queryRef>
      <queryRef>/MemoryDeallocBasicBlockSize</queryRef>
    </vectorQuery>
    <vectorQuery id="BasicBlockNumInstr" displayName="%BasicBlockNumInstr">
      <queryRef>/CPUBasicBlockNumInstr</queryRef>
      <queryRef>/PMUBasicBlockNumInstr</queryRef>
      <queryRef>/PMU_IPTBBBasicBlockNumInstr</queryRef>
      <queryRef>/ContextSwitchBasicBlockNumInstr</queryRef>
      <queryRef>/WaitBasicBlockNumInstr</queryRef>
      <queryRef>/CStateTimerBasicBlockNumInstr</queryRef>
      <queryRef>/CounterBasicBlockNumInstr</queryRef>
      <queryRef>/MemoryAllocBasicBlockNumInstr</queryRef>
      <queryRef>/MemoryDeallocBasicBlockInstr</queryRef>
    </vectorQuery>
    <vectorQuery id="BasicBlockBranchType" displayName="%BasicBlockBranchType">
      <queryRef>/CPUBasicBlockBranchType</queryRef>
      <queryRef>/PMUBasicBlockBranchType</queryRef>
      <queryRef>/PMU_IPTBBBasicBlockBranchType</queryRef>
      <queryRef>/ContextSwitchBasicBlockBranchType</queryRef>
      <queryRef>/WaitBasicBlockBranchType</queryRef>
      <queryRef>/CStateTimerBasicBlockBranchType</queryRef>
      <queryRef>/CounterBasicBlockBranchType</queryRef>
      <queryRef>/MemoryAllocBasicBlockBranchType</queryRef>
      <queryRef>/MemoryDeallocBasicBlockBranchType</queryRef>
    </vectorQuery>
    <vectorQuery id="BasicBlockModule" displayName="%Module">
      <queryRef>/CPUBasicBlockModule</queryRef>
      <queryRef>/PMUBasicBlockModule</queryRef>
      <queryRef>/PMU_IPTBBBasicBlockModule</queryRef>
      <queryRef>/ContextSwitchBasicBlockModule</queryRef>
      <queryRef>/WaitBasicBlockNumModule</queryRef>
      <queryRef>/CStateTimerBasicBlockModule</queryRef>
      <queryRef>/CounterBasicBlockNumModule</queryRef>
      <queryRef>/MemoryAllocBasicBlockNumModule</queryRef>
      <queryRef>/MemoryDeallocBasicBlockNumModule</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionRangeSize" displayName="%FunctionRangeSize">
      <queryRef>/CPUFunctionRangeSize</queryRef>
      <queryRef>/PMUFunctionRangeSize</queryRef>
      <queryRef>/PMU_IPTBBFunctionRangeSize</queryRef>
      <queryRef>/ContextSwitchFunctionRangeSize</queryRef>
      <queryRef>/WaitFunctionRangeSize</queryRef>
      <queryRef>/CStateTimerFunctionRangeSize</queryRef>
      <queryRef>/CounterFunctionRangeSize</queryRef>
      <queryRef>/MemoryAllocFunctionRangeSize</queryRef>
      <queryRef>/MemoryDeallocFunctionRangeSize</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionRangeModule" displayName="%Module">
      <queryRef>/CPUFunctionRangeModule</queryRef>
      <queryRef>/PMUFunctionRangeModule</queryRef>
      <queryRef>/PMU_IPTBBFunctionRangeModule</queryRef>
      <queryRef>/ContextSwitchFunctionRangeModule</queryRef>
      <queryRef>/WaitFunctionRangeModule</queryRef>
      <queryRef>/CStateTimerFunctionRangeModule</queryRef>
      <queryRef>/CounterFunctionRangeModule</queryRef>
      <queryRef>/MemoryAllocFunctionRangeModule</queryRef>
      <queryRef>/MemoryDeallocFunctionRangeModule</queryRef>
    </vectorQuery>
    <vectorQuery id="FunctionRangeModulePath" displayName="%ModulePath">
      <queryRef>/CPUFunctionRangeModulePath</queryRef>
      <queryRef>/PMUFunctionRangeModulePath</queryRef>
      <queryRef>/PMU_IPTBBFunctionRangeModulePath</queryRef>
      <queryRef>/ContextSwitchFunctionRangeModulePath</queryRef>
      <queryRef>/WaitFunctionRangeModulePath</queryRef>
      <queryRef>/CStateTimerFunctionRangeModulePath</queryRef>
      <queryRef>/CounterFunctionRangeModulePath</queryRef>
      <queryRef>/MemoryAllocFunctionRangeModulePath</queryRef>
      <queryRef>/MemoryDeallocFunctionRangeModulePath</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericThread" displayName="%Thread">
      <queryRef>/Thread</queryRef>
      <queryRef>/GPUThread</queryRef>
      <queryRef>/GPUComputeSubmitThread</queryRef>
      <queryRef>/FPGAComputeSubmitThread</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericProcess" displayName="%Process">
      <queryRef>/Process</queryRef>
      <queryRef>/GPUProcess</queryRef>
      <queryRef>/RegionProcess</queryRef>
      <queryRef>/BarrierProcess</queryRef>
      <queryRef>/BarrierImbalanceProcess</queryRef>
      <queryRef>/ElapsedTimeProcess</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericProcessAggregatedMinAvgMax" displayName="%Process">
      <queryInherit>/GenericProcess</queryInherit>
      <displayAttributes>
        <aggregation>AggregateMin:AggregateAvg:AggregateMax</aggregation>
      </displayAttributes>
    </vectorQuery>
    <vectorQuery id="GenericThreadID" displayName="%ThreadID">
      <queryRef>/ThreadID</queryRef>
      <queryRef>/GPUThreadID</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericProcessID" displayName="%ProcessID">
      <queryRef>/ProcessID</queryRef>
      <queryRef>/GPUProcessID</queryRef>
      <queryRef>/RegionProcessID</queryRef>
      <queryRef>/BarrierProcessID</queryRef>
      <queryRef>/BarrierImbalanceProcessID</queryRef>
      <queryRef>/ElapsedTimeProcessID</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericPackage" displayName="%Package">
      <queryRef>/PMUPackage</queryRef>
      <queryRef>/UncorePackage</queryRef>
      <queryRef>/PMU_IPTBBPackage</queryRef>
      <queryRef>/InterruptPackage</queryRef>
      <queryRef>/IPTModulePackage</queryRef>
      <queryRef>/IPTTIPPackage</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericCore" displayName="%Core">
      <queryRef>/PMUCore</queryRef>
      <queryRef>/PMU_IPTBBCore</queryRef>
      <queryRef>/InterruptCore</queryRef>
      <queryRef>/IPTModuleCore</queryRef>
      <queryRef>/IPTTIPCore</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericCoreType" displayName="%CoreType">
      <queryRef>/PMUCoreType</queryRef>
    </vectorQuery>
    <vectorQuery id="GPUPacketPerfTagType" displayName="%GPUDMAPacketPerfTagType">
      <queryRef>/GPUDMAPacketPerfTagType</queryRef>
      <queryRef>/GPUQueuePacketPerfTag</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericGPUNode" displayName="%GPUNode">
      <queryRef>/GPUNode</queryRef>
    </vectorQuery>
    <vectorQuery id="ComputingQueue" displayName="%ComputingQueue">
      <queryRef>/GPUComputeTaskQueueName</queryRef>
      <queryRef>/ComputeQueueQueueName</queryRef>
      <queryRef>/FPGAComputeTaskQueueName</queryRef>
    </vectorQuery>
    <vectorQuery id="GenericCounterType" displayName="%CounterType">
      <queryRef>/CounterType</queryRef>
      <queryRef>/ThreadInstantValuesType</queryRef>
      <queryRef>/GlobalCounterType</queryRef>
      <queryRef>/GlobalInstantValuesType</queryRef>
    </vectorQuery>
    <infoQuery id="MarksGlobal" displayName="%MarksGlobal">
      <dbPath>marker_global_data::dd_marker</dbPath>
      <displayDbPathSuffix>type.name</displayDbPathSuffix>
      <displayAttributes>
        <marker>end</marker>
        <timelineGraphColor>255,255,128</timelineGraphColor>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="VSync" displayName="%VSync">
      <dbPath>vsync_data::dd_marker_type</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <displayAttributes>
        <timelineGraphColor>242,28,28</timelineGraphColor>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="CPUUsage" displayName="%CPUUsage">
      <dbPath>cpu_usage_data::dd_cpu_usage</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <displayAttributes>
        <timelineFormat>area</timelineFormat>
        <timelineGraphColor>96,224,96</timelineGraphColor>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="CPUUsageUtilization" displayName="%CPUUsageUtilization">
      <dbPath>cpu_usage_data::dd_cpu_usage.utilization</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="CPUUsageUtilizationMinValue">
      <dbPath>cpu_usage_data::dd_cpu_usage.utilization</dbPath>
      <displayDbPathSuffix>min_value</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="CPUUsageUtilizationFloorValue">
      <dbPath>cpu_usage_data::dd_cpu_usage.utilization</dbPath>
      <displayDbPathSuffix>util_floor</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="Concurrency" displayName="%Concurrency">
      <dbPath>concurrency_data::dd_concurrency</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <displayAttributes>
        <timelineFormat>area</timelineFormat>
        <timelineGraphColor>108,184,93</timelineGraphColor>
      </displayAttributes>
      <maxEval>1.5 * $targetConcurrency</maxEval>
    </infoQuery>
    <infoQuery id="ConcurrencyUtilization" displayName="%ConcurrencyUtilization">
      <dbPath>concurrency_data::dd_concurrency.utilization</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ConcurrencyUtilizationMinValue">
      <dbPath>concurrency_data::dd_concurrency.utilization</dbPath>
      <displayDbPathSuffix>min_value</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ConcurrencyUtilizationFloorValue">
      <dbPath>concurrency_data::dd_concurrency.utilization</dbPath>
      <displayDbPathSuffix>util_floor</displayDbPathSuffix>
    </infoQuery>
    <timeQuery id="Time" displayName="%Time">
      <displayAttributes>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
    </timeQuery>
    <timeQuery id="ElapsedTime" displayName="%ElapsedTime">
      <helpKeyword>configs.elapsedtime_elapsedtimedescription</helpKeyword>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
      <displayAttributes>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
      <issueEval><![CDATA[ query("/ElapsedTime") > 60]]></issueEval>
      <issueText>Execution took longer than one minute</issueText>
      <description>%ElapsedTimeDescription</description>
    </timeQuery>
    <timeQuery id="ConcurrencyElapsedTime" displayName="%ElapsedTime">
      <helpKeyword>configs.elapsedtime_elapsedtimedescription</helpKeyword>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
      <instanceDbTable>concurrency_data::dd_concurrency</instanceDbTable>
      <displayAttributes>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
      <issueText>Execution took longer than one minute</issueText>
      <description>%ElapsedTimeDescription</description>
    </timeQuery>
    <timeQuery id="CpuUsageElapsedTime" displayName="%ElapsedTime">
      <helpKeyword>configs.elapsedtime_elapsedtimedescription</helpKeyword>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
      <instanceDbTable>cpu_usage_data::dd_cpu_usage</instanceDbTable>
      <displayAttributes>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
      <issueText>Execution took longer than one minute</issueText>
      <description>%ElapsedTimeDescription</description>
    </timeQuery>
    <timeQuery id="ElapsedTimePerThread" displayName="%ElapsedTimePerThread">
      <displayAttributes>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
    </timeQuery>
    <derivedQuery id="TotalElapsedTime" displayName="%TotalElapsedTime">
      <helpKeyword>configs.totalelapsedtime_elapsedtimedescription</helpKeyword>
      <description>%ElapsedTimeDescription</description>
      <valueEval>$totalElapsedTime</valueEval>
      <issueEval>$shortCollectionMux</issueEval>
      <issueText>%ShortCollectionMuxRecommendationIssue</issueText>
      <valueType>time</valueType>
    </derivedQuery>
    <derivedQuery id="PausedTime" displayName="%PausedTime">
      <helpKeyword>configs.pausedtime_pausedtimedescription</helpKeyword>
      <description>%PausedTimeDescription</description>
      <valueEval>$pausedTime</valueEval>
      <valueType>time</valueType>
    </derivedQuery>
    <derivedQuery id="TotalElapsedTimeNoPause" displayName="%TotalElapsedTime">
      <helpKeyword>configs.totalelapsedtime_elapsedtimedescription</helpKeyword>
      <description>%ElapsedTimeDescription</description>
      <valueEval><![CDATA[ query("/TotalElapsedTime") - query("/PausedTime") ]]></valueEval>
      <valueType>time</valueType>
    </derivedQuery>
    <xsl:variable name="isRunssMode" select="exsl:ctx('runss:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and exsl:IsTableExist('cpu_data'))"/>
    <derivedQuery id="TotalThreadCount" displayName="%TotalThreadCount">
      <xsl:choose>
        <xsl:when test="$isRunssMode or not(exsl:ctx('useCountingMode', 0) or exsl:ctx('useAggregatedCounting', 0))">
          <valueEval>rowCount("/Thread")</valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>$NULL</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="TotalThreadCountWithIssues">
      <queryInherit>/TotalThreadCount</queryInherit>
      <issues>
        <issue>
          <issueEval><![CDATA[ query("/TotalThreadCount") < query("/TargetConcurrency") * 0.8 ]]></issueEval>
          <issueText>%ThreadUndersubscriptionIssueText</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[ query("/CPUThreadOversubscription") > (query("/CPUTime") * .10) ]]></issueEval>
          <issueText>%ThreadOversubscriptionIssueText</issueText>
        </issue>
        <xsl:if test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <issue>
            <issueEval><![CDATA[ (query("/TotalThreadCount") > query("/TargetConcurrency")) && (query("/PreemptionWaitTime") > (query("/CPUTime") * .05)) ]]></issueEval>
            <issueText>%ThreadOversubscriptionWithSignificantWaitTimeIssueText</issueText>
          </issue>
        </xsl:if>
      </issues>
    </derivedQuery>
    <derivedQuery id="TargetConcurrency" displayName="%TargetConcurrency">
      <valueEval>$targetConcurrency</valueEval>
      <valueType>int</valueType>
    </derivedQuery>
    <derivedQuery id="TargetUtilization" displayName="%TargetUtilization">
      <queryInherit>/TargetConcurrency</queryInherit>
    </derivedQuery>
    <derivedQuery id="AvailableCoreTime" displayName="%AvailableCoreTime">
      <helpKeyword>configs.availablecoretime_availablecoretimedescription</helpKeyword>
      <instanceBandTable>dd_core</instanceBandTable>
      <description>%AvailableCoreTimeDescription</description>
      <valueType>time</valueType>
      <valueEval>
        <![CDATA[
            query("/TotalElapsedTime") * query("/PhysicalCoreCount")]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="AverageCPUUsageOpenMP" displayName="%CPUUsageAverage">
      <helpKeyword>configs.cpuusageaverage_cpuusageaveragedescription</helpKeyword>
      <description>%CPUUsageAverageDescription</description>
      <valueEval>
        <![CDATA[
            query("/PMUUserTime") / query("/OpenMPElapsedTime")]]>
      </valueEval>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="CPUAverageCPUUsageOpenMP" displayName="%CPUUsageAverage">
      <helpKeyword>configs.cpuusageaverage_cpuusageaveragedescription</helpKeyword>
      <description>%CPUUsageAverageDescription</description>
      <valueEval>
        <![CDATA[
            query("/CPUUserTime") / query("/OpenMPElapsedTime")]]>
      </valueEval>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="AverageCPUUsageOpenMPWithThreadConcurrency" displayName="%CPUUsageAverage">
      <description>%CPUUsageAverageDescription</description>
      <valueEval><![CDATA[ d#query("/AverageCPUUsageOpenMP") + " out of " + c#query("/TargetConcurrency")]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationOpenMP" displayName="%AverageCPUUtilizationOpenMP">
      <helpKeyword>configs.averagecpuutilizationopenmp_averagecpuutilizationopenmpdescription</helpKeyword>
      <description>%AverageCPUUtilizationOpenMPDescription</description>
      <valueEval><![CDATA[  (query("/PMUUserTime") / query("/OpenMPElapsedTime")) / query("/TargetConcurrency") ]]></valueEval>
      <issueText>%AverageCPUUtilizationOpenMPIssue</issueText>
      <issueEval><![CDATA[ ( query("/AverageCPUUtilizationOpenMP") < 0.8 )]]></issueEval>
      <valueType>ratio</valueType>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationOpenMPSummaryString">
      <queryInherit>/AverageCPUUtilizationOpenMP</queryInherit>
      <valueEval><![CDATA[ %#query("/AverageCPUUtilizationOpenMP") + " (" + query("/AverageCPUUsageOpenMPWithThreadConcurrency") + ")"]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationAPSThreshold" displayName="%AverageCPUUtilizationAPSThreshold">
      <valueType>double</valueType>
      <valueEval><![CDATA[ 0.9 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationAPS" displayName="%AverageCPUUtilizationOpenMP">
      <helpKeyword>configs.averagecpuutilizationopenmp_averagecpuutilizationapsdescription</helpKeyword>
      <valueEval><![CDATA[ %#( (query("/PMUUserTime") / query("/OpenMPElapsedTime")) / query("/TargetConcurrency")) ]]></valueEval>
      <description>%AverageCPUUtilizationAPSDescription</description>
      <valueType>string</valueType>
      <issues>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && ( ( queryOptional("/PMUOpenMPTimePercents") > 0.1) || ( queryOptional("/PMUCilkTimePercents") > 0.1 ) || ( queryOptional("/PMUMpiTimePercents") > 0.1 ) || ( queryOptional("/PMUTbbTimePercents") > 0.1 ) || ( queryOptional("/PMUPthreadsTimePercents") > 0.1 ) ) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssueShort</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && !( ( queryOptional("/PMUOpenMPTimePercents") > 0.1) || ( queryOptional("/PMUCilkTimePercents") > 0.1 ) || ( queryOptional("/PMUMpiTimePercents") > 0.1 ) || ( queryOptional("/PMUTbbTimePercents") > 0.1 ) || ( queryOptional("/PMUPthreadsTimePercents") > 0.1 ) ) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssueLong</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && ( queryOptional("/PMUMpiTimePercents") > 0.1) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssueMPI</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && ( queryOptional("/PMUOpenMPTimePercents") > 0.1) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssueOpenMP</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && ( queryOptional("/PMUCilkTimePercents") > 0.1) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssueCilk</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && ( queryOptional("/PMUTbbTimePercents") > 0.1) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssueTBB</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[
              ( (query("/AverageCPUUtilizationAPS") < query("/AverageCPUUtilizationAPSThreshold")) && ( queryOptional("/PMUPthreadsTimePercents") > 0.1) )
          ]]></issueEval>
          <issueText>%AverageCPUUtilizationAPSIssuePthreads</issueText>
        </issue>
      </issues>
    </derivedQuery>
    <derivedQuery id="AverageCPUUsage" displayName="%CPUUsageAverage">
      <description>%CPUUsageAverageDescription</description>
      <valueEval>
        <xsl:choose>
          <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
            <![CDATA[
            query("/PMUUserTime") / query("/GlobalElapsedTime")]]>
          </xsl:when>
          <xsl:otherwise>
            <![CDATA[
            query("/CPUUserTime") / query("/GlobalElapsedTime")]]>
          </xsl:otherwise>
        </xsl:choose>
      </valueEval>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="CorePMUUserTime">
      <valueEval><![CDATA[ ( query("/PMUUserTime") / 2 * (1 + query("/PMUEventCount/PMUEventType[CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE]") / query("/PMUEventCount/PMUEventType[CPU_CLK_UNHALTED.REF_XCLK]") ) ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AveragePhysicalCPUUtilizationOpenMP" displayName="%AveragePhysicalCPUUtilizationOpenMP">
      <helpKeyword>configs.averagecpuutilizationopenmp_averagephysicalcpuutilizationopenmpdescription</helpKeyword>
      <description>%AveragePhysicalCPUUtilizationOpenMPDescription</description>
      <valueEval><![CDATA[ (query("/CorePMUUserTime") / query("/OpenMPElapsedTime")) / $physicalCoreCount ]]></valueEval>
      <issueText>%AveragePhysicalCPUUtilizationOpenMPIssue</issueText>
      <issueEval><![CDATA[ ( query("/AveragePhysicalCPUUtilizationOpenMP") < 0.8 ) ]]></issueEval>
      <valueType>ratio</valueType>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <maxEval>1.0</maxEval>
    </derivedQuery>
    <derivedQuery id="AveragePhysicalCPUUsageOpenMP" displayName="%PhysicalCPUUsageAverageOpenMP">
      <helpKeyword>configs.cpuusageaverage_physicalcpuusageaveragedescription</helpKeyword>
      <description>%PhysicalCPUUsageAverageDescription</description>
      <valueEval>
        <![CDATA[
            query("/CorePMUUserTime") / query("/OpenMPElapsedTime")]]>
      </valueEval>
      <maxEval>$physicalCoreCount</maxEval>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence")]]></confidenceEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="AveragePhysicalCPUUsageOpenMPWithPhysicalConcurrency" displayName="%PhysicalCPUUsageAverageOpenMP">
      <description>%PhysicalCPUUsageAverageDescription</description>
      <valueEval><![CDATA[ d#(query("/AveragePhysicalCPUUsageOpenMP") > $physicalCoreCount ? $physicalCoreCount : query("/AveragePhysicalCPUUsageOpenMP")) + " out of " + c#$physicalCoreCount]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="AveragePhysicalCPUUtilizationOpenMPSummaryString" displayName="%AveragePhysicalCPUUtilizationOpenMP">
      <queryInherit>/AveragePhysicalCPUUtilizationOpenMP</queryInherit>
      <valueEval><![CDATA[ %#(query("/AveragePhysicalCPUUtilizationOpenMP") > 1.0 ? 1.0 : query("/AveragePhysicalCPUUtilizationOpenMP")) + " (" + query("/AveragePhysicalCPUUsageOpenMPWithPhysicalConcurrency") + ")"]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationOpenMPBigCores" displayName="%AverageCPUUtilizationOpenMPBigCores">
      <queryInherit>/AverageCPUUtilizationOpenMP</queryInherit>
      <issues>
        <issue>
          <issueEval><![CDATA[ ( ( query("/AverageCPUUtilizationOpenMP") < 0.8 ) && ( query("/AveragePhysicalCPUUtilizationOpenMP") < 0.8 ) )]]></issueEval>
          <issueText>%AverageCPUUtilizationOpenMPLogicalAndPhysicalIssue</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[ ( ( query("/AverageCPUUtilizationOpenMP") < 0.8 ) && ( query("/AveragePhysicalCPUUtilizationOpenMP") >= 0.8 ) )]]></issueEval>
          <issueText>%AverageCPUUtilizationOpenMPLogicalOnlyIssue</issueText>
        </issue>
      </issues>
    </derivedQuery>
    <derivedQuery id="AverageCPUUsageOpenMPWithThreadConcurrencyBigCores" displayName="%AverageCPUUsageOpenMPWithThreadConcurrencyBigCores">
      <queryInherit>/AverageCPUUsageOpenMPWithThreadConcurrency</queryInherit>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationOpenMPBigCoresSummaryString" displayName="%AverageCPUUtilizationOpenMPBigCores">
      <queryInherit>/AverageCPUUtilizationOpenMPBigCores</queryInherit>
      <valueEval><![CDATA[ %#query("/AverageCPUUtilizationOpenMPBigCores") + " (" + query("/AverageCPUUsageOpenMPWithThreadConcurrencyBigCores") + ")"]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="EffectiveCPUUtilization" displayName="%EffectiveCPUUtilization">
      <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
      <xsl:variable name="isTmamSmtAware" select="$pmuCommon//variables/isTmamSmtAware"/>
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU')='knl' or not(exsl:ctx('isHTEnabled', 1)) or $isTmamSmtAware='false'">
          <queryInherit>/AverageCPUUtilizationOpenMP</queryInherit>
          <valueEval><![CDATA[ %#query("/AverageCPUUtilizationOpenMP") + " (" + d#query("/AverageCPUUsageOpenMP") + " out of " + c#query("/TargetConcurrency") + " logical CPUs)"]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/AverageCPUUtilizationOpenMPBigCoresSummaryString</queryInherit>
          <valueEval><![CDATA[ %#query("/AverageCPUUtilizationOpenMPBigCores") + " (" + d#query("/AverageCPUUsageOpenMP") + " out of " + c#query("/TargetConcurrency") + " logical CPUs)"]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="CPUEffectiveCPUUtilization" displayName="%EffectiveCPUUtilization">
      <queryInherit>/AverageCPUUtilizationOpenMP</queryInherit>
      <valueEval><![CDATA[ (query("/CPUUserTime") / query("/OpenMPElapsedTime")) / query("/TargetConcurrency") ]]></valueEval>
      <issueText>%AverageCPUUtilizationOpenMPIssue</issueText>
      <issueEval><![CDATA[ query("/CPUEffectiveCPUUtilization") < 0.8 ]]></issueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="CPUEffectiveCPUUtilizationString" displayName="%EffectiveCPUUtilization">
      <queryInherit>/CPUEffectiveCPUUtilization</queryInherit>
      <valueEval><![CDATA[ %#query("/CPUEffectiveCPUUtilization") + " (" + d#query("/CPUAverageCPUUsageOpenMP") + " out of " + c#query("/TargetConcurrency") + " logical CPUs)" ]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="PMUEffectiveCPUUtilization" displayName="%EffectiveCPUUtilization">
      <queryInherit>/AverageCPUUtilizationOpenMP</queryInherit>
      <valueEval><![CDATA[ (query("/PMUUserTime") / query("/OpenMPElapsedTime")) / query("/TargetConcurrency") ]]></valueEval>
      <issueText>%AverageCPUUtilizationOpenMPIssue</issueText>
      <issueEval><![CDATA[ query("/PMUEffectiveCPUUtilization") < 0.8 ]]></issueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="PMUEffectiveCPUUtilizationString" displayName="%EffectiveCPUUtilization">
      <queryInherit>/PMUEffectiveCPUUtilization</queryInherit>
      <valueEval><![CDATA[ %#query("/PMUEffectiveCPUUtilization") + " (" + d#query("/AverageCPUUsageOpenMP") + " out of " + c#query("/TargetConcurrency") + " logical CPUs)" ]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="UArchEfficiency">
      <queryInherit>/MicroarchitectureUsage</queryInherit>
    </derivedQuery>
    <derivedQuery id="VectorElementsUtilization" displayName="%VectorRegisterUtilization">
      <queryInherit>/FLOPSPerInstructionMultiIssue</queryInherit>
    </derivedQuery>
    <derivedQuery id="ParallelEfficiency" displayName="%ParallelEfficiency">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/EffectiveCPUUtilization</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/AverageCPUUsage</queryInherit>
          <valueEval><![CDATA[ query("/AverageCPUUsage") / query("/TargetConcurrency") ]]></valueEval>
          <issueText>%AverageCPUUtilizationOpenMPIssue</issueText>
          <issueEval><![CDATA[ ( query("/ParallelEfficiency") < 0.8 )]]></issueEval>
          <valueType>ratio</valueType>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="HWUsageEfficiency">
      <queryInherit>/UArchEfficiency</queryInherit>
    </derivedQuery>
    <derivedQuery id="VectorRegisterUtilization" displayName="%VectorRegisterUtilization">
      <queryInherit>/VectorElementsUtilization</queryInherit>
    </derivedQuery>
    <derivedQuery id="AveragePhysicalCPUUsage" displayName="%PhysicalCPUUsageAverage">
      <description>%PhysicalCPUUsageAverageDescription</description>
      <valueEval><![CDATA[ query("/CorePMUUserTime") / query("/GlobalElapsedTime") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageLogicalCPUUsage" displayName="%LogicalCPUUsageAverage">
      <description>%LogicalCPUUsageAverageDescription</description>
      <valueEval><![CDATA[ query("/PMUUserTime") / query("/GlobalElapsedTime") ]]></valueEval>
    </derivedQuery>
    <vectorQuery id="ThreadLifeTime">
      <queryRef>/ThreadCreateTime</queryRef>
      <queryRef>/ThreadEndTime</queryRef>
    </vectorQuery>
    <infoQuery id="HWModule" displayName="%Module">
      <dbPath>dd_band::dd_hw_module</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <displayAttributes>
        <boolean:unitDistinctQuery>true</boolean:unitDistinctQuery>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="ModuleFrequency" displayName="%ModuleFrequency">
      <queryInherit>/HWModule</queryInherit>
    </infoQuery>
    <infoQuery id="HWModulePackage" displayName="%Package">
      <dbPath>dd_band::dd_hw_module.package</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="HWCoreModule" displayName="%Module">
      <dbPath>dd_band::dd_core.hw_module</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="SpinTimeParent">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/PMUSpinTimeParent</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/CPUSpinTimeParent</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="OverheadTimeParent">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/PMUOverheadTimeParent</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/CPUOverheadTimeParent</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="SpinBusyWaitOnMPISpinningTime" displayName="%SpinBusyWaitOnMPISpinningTime2">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/PMUSpinBusyWaitOnMPISpinningTimePerProcess</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/CPUSpinBusyWaitOnMPISpinningTimePerProcess</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
      <displayAttributes>
        <sortType>ascending</sortType>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SpinBusyWaitOnMPISpinningTimeSummary" displayName="%SpinBusyWaitOnMPISpinningTime2">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/PMUSpinBusyWaitOnMPISpinningTimePerProcessSummary</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/CPUSpinBusyWaitOnMPISpinningTimePerProcessSummary</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
      <displayAttributes>
        <sortType>ascending</sortType>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="SpinBusyWaitOnMPISpinningTimeMPICritical">
      <queryInherit>/SpinBusyWaitOnMPISpinningTime</queryInherit>
      <valueEval><![CDATA[ ( queryMin("/GenericProcess", "/SpinBusyWaitOnMPISpinningTime", "/SpinBusyWaitOnMPISpinningTime") ) ]]></valueEval>
      <issueEval><![CDATA[ (query("/SpinBusyWaitOnMPISpinningTimeMPICritical") > (query("/GlobalElapsedTime") * .10)) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="SpinBusyWaitOnMPISpinningTimeMPICriticalSummary">
      <queryInherit>/SpinBusyWaitOnMPISpinningTimeSummary</queryInherit>
      <valueEval><![CDATA[ ( queryMin("/GenericProcess", "/SpinBusyWaitOnMPISpinningTimeSummary", "/SpinBusyWaitOnMPISpinningTimeSummary") ) ]]></valueEval>
      <issueEval><![CDATA[ (query("/SpinBusyWaitOnMPISpinningTimeMPICriticalSummary") > (query("/GlobalElapsedTime") * .10)) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="SpinBusyWaitOnMPISpinningTimeMPICriticalPercentElapsedAsString">
      <queryInherit>/SpinBusyWaitOnMPISpinningTimeMPICriticalSummary</queryInherit>
      <valueType>string</valueType>
      <valueEval><![CDATA[ t#query("/SpinBusyWaitOnMPISpinningTimeMPICriticalSummary") + " (" + %#(query("/SpinBusyWaitOnMPISpinningTimeMPICriticalSummary") / query("/GlobalElapsedTime")) + ")" ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="SpinBusyWaitOnMPISpinningTimePercentElapsed" displayName="%SpinBusyWaitOnMPISpinningTimePercentElapsed">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <queryInherit>/PMUSpinBusyWaitOnMPISpinningTimePercentElapsed</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/CPUSpinBusyWaitOnMPISpinningTimePercentElapsed</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
      <displayAttributes>
        <sortType>ascending</sortType>
      </displayAttributes>
    </derivedQuery>
    <infoQuery id="BandwidthDomain" displayName="%BandwidthDomain">
      <dbPath>bandwidth_utilization_data::dd_bandwidth_utilization.bin.type.domain</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="BandwidthUtilizationType" displayName="%BandwidthUtilizationType">
      <dbPath>bandwidth_utilization_data::dd_bandwidth_utilization.bin.type.type_name</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="BandwidthUtilizationMinValue">
      <dbPath>bandwidth_utilization_data::dd_bandwidth_utilization.bin.type</dbPath>
      <displayDbPathSuffix>min_value</displayDbPathSuffix>
      <aliasForUnknown>%AliasUnknownRegionType</aliasForUnknown>
    </infoQuery>
    <infoQuery id="BandwidthUtilizationBinValue" displayName="%BandwidthUtilizationValue">
      <dbPath>bandwidth_utilization_data::dd_bandwidth_utilization.bin</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <displayAttributes>
        <timelineFormat>area</timelineFormat>
      </displayAttributes>
    </infoQuery>
    <timeQuery id="BandwidthUtilizationElapsedTime" displayName="%ElapsedTime">
      <helpKeyword>configs.elapsedtime_elapsedtimedescription</helpKeyword>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
      <instanceDbTable>bandwidth_utilization_data::dd_bandwidth_utilization</instanceDbTable>
      <displayAttributes>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
      <description>%ElapsedTimeDescription</description>
    </timeQuery>
    <infoQuery id="BandwidthDomainMax" displayName="%BandwidthDomainMax">
      <description>%BandwidthDomainMaxDescription</description>
      <dbPath>bandwidth_utilization_data::dd_bandwidth_utilization.bin.type.domain</dbPath>
      <displayDbPathSuffix>max_estimated_value</displayDbPathSuffix>
    </infoQuery>
    <customMetricQuery id="BandwidthMax" displayName="%BandwidthMax">
      <description>%BandwidthMaxDescription</description>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
      <instanceDbTable>bandwidth_utilization_data::dd_bandwidth_utilization</instanceDbTable>
      <metricName>bandwidth_value</metricName>
      <aggregationType>max</aggregationType>
      <valueType>double</valueType>
      <displayAttributes>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
    </customMetricQuery>
    <derivedQuery id="HighUtilizationTime" displayName="%HighBandwidthTimePercents">
      <description>%HighBandwidthTimePercentsDescription</description>
      <issueText>%HighBandwidthTimePercentsIssue</issueText>
      <valueEval><![CDATA[ query("/BandwidthUtilizationElapsedTime/BandwidthUtilizationType[%HighBandwidth]") / query("/BandwidthUtilizationElapsedTime") ]]></valueEval>
      <issueEval><![CDATA[ query("/BandwidthUtilizationElapsedTime/BandwidthUtilizationType[%HighBandwidth]") / query("/BandwidthUtilizationElapsedTime") > 0.1 ]]></issueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="HighPacketRateTime" displayName="%HighPacketRateTimePercents">
      <queryInherit>/HighUtilizationTime</queryInherit>
    </derivedQuery>
    <timeQuery id="AverageBandwidth" displayName="%AverageBandwidth" displayNameOverride="%AverageBandwidth">
      <description>%AverageBandwidthDescription</description>
      <valueType>double</valueType>
      <queryInherit>/BandwidthUtilizationElapsedTime</queryInherit>
      <displayAttributes>
        <aggregation>AggregateWeightedAvg</aggregation>
        <selfFormat>_double_</selfFormat>
      </displayAttributes>
      <expand>
        <queryRef>/BandwidthUtilizationBinValue</queryRef>
      </expand>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
    </timeQuery>
    <timeQuery id="AveragePacketRate" displayName="%AveragePacketRate" displayNameOverride="%AveragePacketRate">
      <queryInherit>/AverageBandwidth</queryInherit>
    </timeQuery>
    <infoQuery id="BandwidthUtilizationValue" displayName="%BandwidthUtilizationValue">
      <dbPath>bandwidth_utilization_data::dd_bandwidth_utilization</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="MaxBandwidth" displayName="%BandwidthMax" displayNameOverride="%BandwidthMax">
      <description>%BandwidthMaxDescription</description>
      <queryInherit>/BandwidthUtilizationBinValue</queryInherit>
      <displayAttributes>
        <aggregation>AggregateMax</aggregation>
      </displayAttributes>
      <expand>
        <queryRef>/BandwidthUtilizationBinValue</queryRef>
      </expand>
      <boolean:useGlobalGrouper>true</boolean:useGlobalGrouper>
    </infoQuery>
    <derivedQuery id="HighDRAMBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
        <xsl:choose>
          <xsl:when test="exsl:ctx('packageCount', 0) > 1">
            <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%DRAMSingle]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
          </xsl:when>
          <xsl:otherwise>
            <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%DRAM]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
          </xsl:otherwise>
        </xsl:choose>
    </derivedQuery>
    <derivedQuery id="HighPCIeBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%PCIeBandwidthMB]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="PCIeBandwidthBoundUncore" displayName="%PCIeBandwidthBoundUncore">
      <helpKeyword>configs.pciebandwidthbounduncore_pciebandwidthbounduncoredescription</helpKeyword>
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%PCIeBandwidthBoundUncoreDescription</description>
      <issueText>%PCIeBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighPCIeBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/PCIeBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="HighQPIBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%QPISingle]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="HighUPIUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%UPIUtilizationSingle]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="High3DXPointBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
        <xsl:choose>
          <xsl:when test="exsl:ctx('packageCount', 0) > 1">
            <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%3DXPDomainSingle]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
          </xsl:when>
          <xsl:otherwise>
            <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%3DXPDomain]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
          </xsl:otherwise>
        </xsl:choose>
    </derivedQuery>
    <derivedQuery id="DRAMBandwidthBoundUncore" displayName="%DRAMBandwidthBoundUncore">
      <helpKeyword>configs.drambandwidthbounduncore_drambandwidthbounduncoredescription</helpKeyword>
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%DRAMBandwidthBoundUncoreDescription</description>
      <issueText>%DRAMBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighDRAMBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/DRAMBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="QPIBandwidthBoundUncore" displayName="%QPIBandwidthBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%QPIBandwidthBoundUncoreDescription</description>
      <unitOfMeasureQueryId>ElapsedTimeForUnit</unitOfMeasureQueryId>
      <issueText>%QPIBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighQPIBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/QPIBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="UPIUtilizationBound" displayName="%UPIUtilizationBound">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%UPIUtilizationDescription</description>
      <unitOfMeasureQueryId>ElapsedTimeForUnit</unitOfMeasureQueryId>
      <issueText>%UPIUtilizationIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighUPIUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/UPIUtilizationBound") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="3DXPointBandwidthBoundUncore" displayName="%3DXPointBandwidthBoundUncore">
      <helpKeyword>configs.3dxpointbandwidthbounduncore_3dxpointbandwidthbounduncoredescription</helpKeyword>
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%3DXPointBandwidthBoundUncoreMADescription</description>
      <issueText>%3DXPointBandwidthBoundUncoreMAIssueText</issueText>
      <valueEval><![CDATA[ ( query("/High3DXPointBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/3DXPointBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="Average3DXPointBandwidthBoundUncore" displayName="%Average3DXPointBandwidth">
      <valueEval><![CDATA[ ( query("/APDataTransferredGB") ) / queryAll("/GlobalElapsedTime", true) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="DRAMBandwidthBoundUncoreMA">
      <queryInherit>/DRAMBandwidthBoundUncore</queryInherit>
      <description>%DRAMBandwidthBoundUncoreMADescription</description>
      <unitOfMeasureQueryId>ElapsedTimeForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="3DXPointBandwidthBoundUncoreMA">
      <queryInherit>/3DXPointBandwidthBoundUncore</queryInherit>
      <description>%3DXPointBandwidthBoundUncoreMADescription</description>
      <unitOfMeasureQueryId>ElapsedTimeForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="HighMCDRAMFlatBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%MCDRAMFlat]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="MCDRAMFlatBandwidthBoundUncore" displayName="%MCDRAMFlatBandwidthBoundUncore">
      <helpKeyword>configs.mcdramflatbandwidthbounduncore_mcdramflatbandwidthbounduncoredescription</helpKeyword>
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%MCDRAMFlatBandwidthBoundUncoreDescription</description>
      <issueText>%MCDRAMFlatBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighMCDRAMFlatBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/MCDRAMFlatBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="HighMCDRAMCacheBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%MCDRAMCache]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="MCDRAMCacheBandwidthBoundUncore" displayName="%MCDRAMCacheBandwidthBoundUncore">
      <helpKeyword>configs.mcdramcachebandwidthbounduncore_mcdramcachebandwidthbounduncoredescription</helpKeyword>
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%MCDRAMCacheBandwidthBoundUncoreDescription</description>
      <issueText>%MCDRAMCacheBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighMCDRAMCacheBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/MCDRAMCacheBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="HighMCDRAMBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%MCDRAM]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="MCDRAMBandwidthBoundUncore" displayName="%MCDRAMBandwidthBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%MCDRAMBandwidthBoundUncoreDescription</description>
      <issueText>%MCDRAMBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighMCDRAMBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/MCDRAMBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="AverageDRAMBandwidth" displayName="%AverageDRAMBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OvertimeBandwidth") ) / queryAll("/GlobalElapsedTime", true) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageMCDRAMFlatBandwidth" displayName="%AverageMCDRAMFlatBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OvertimeMCDRAMFlatBandwidth") ) / queryAll("/GlobalElapsedTime", true) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageMCDRAMCacheBandwidth" displayName="%AverageMCDRAMCacheBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OvertimeMCDRAMCacheBandwidth") ) / queryAll("/GlobalElapsedTime", true) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageMCDRAMBandwidth" displayName="%AverageMCDRAMBandwidth">
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('hbmMemoryMode', '') = 'Flat'">
          <valueEval><![CDATA[ query("/AverageMCDRAMFlatBandwidth") ]]></valueEval>
        </xsl:when>
        <xsl:when test="exsl:ctx('hbmMemoryMode', '') = 'Cache' or exsl:ctx('hbmMemoryMode', '') = 'Hybrid'">
          <valueEval><![CDATA[ query("/AverageMCDRAMCacheBandwidth") ]]></valueEval>
        </xsl:when>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="ClocktickConfidence">
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <valueEval><![CDATA[ ( ($useCountingMode || $useAggregatedCounting) ? $TRUE : ( query("/ClocktickSamples") >= 10 ) ) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ ( ( query("/CPUSampleCount") >= 10 ) ) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="AverageCPUUtilizationCountingMode" displayName="%AverageCPUUtilizationCountingMode">
      <queryInherit>/AverageCPUUsageOpenMPWithThreadConcurrency</queryInherit>
      <description>%AverageCPUUtilizationCountingModeDescription</description>
    </derivedQuery>
    <derivedQuery id="AveragePhysicalCPUUtilizationCountingMode" displayName="%AveragePhysicalCPUUtilizationCountingMode">
      <queryInherit>/AveragePhysicalCPUUtilizationOpenMPSummaryString</queryInherit>
      <description>%AveragePhysicalCPUUtilizationCountingModeDescription</description>
      <issueText>%AveragePhysicalCPUUtilizationCountingModeIssue</issueText>
    </derivedQuery>
    <derivedQuery id="AverageLogicalCPUUtilizationCountingMode" displayName="%AverageLogicalCPUUtilizationCountingMode">
      <queryInherit>/AverageCPUUtilizationOpenMPBigCoresSummaryString</queryInherit>
      <description>%AverageCPUUtilizationCountingModeDescription</description>
    </derivedQuery>
    <derivedQuery id="HighOmniPathOutgoingBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%OmniPathOutgoingBandwidthDomain]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathOutgoingBandwidthBoundUncore" displayName="%OmniPathOutgoingBandwidthBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%OmniPathOutgoingBandwidthBoundUncoreDescription</description>
      <issueText>%OmniPathOutgoingBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighOmniPathOutgoingBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/OmniPathOutgoingBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathUsage" displayName="%OmniPathUsage">
      <valueEval><![CDATA[ ( query("/OmniPathOutgoingBandwidthBoundUncore") ? " " : $NULL ) ]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <derivedQuery id="HighOmniPathIncomingBandwidthUtilizationElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%OmniPathIncomingBandwidthDomain]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathIncomingBandwidthBoundUncore" displayName="%OmniPathIncomingBandwidthBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%OmniPathIncomingBandwidthBoundUncoreDescription</description>
      <issueText>%OmniPathIncomingBandwidthBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighOmniPathIncomingBandwidthUtilizationElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/OmniPathIncomingBandwidthBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="HighOmniPathOutgoingPacketRateElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%OmniPathOutgoingPacketRateDomain]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathOutgoingPacketRateBoundUncore" displayName="%OmniPathOutgoingPacketRateBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%OmniPathOutgoingPacketRateBoundUncoreDescription</description>
      <issueText>%OmniPathOutgoingPacketRateBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighOmniPathOutgoingPacketRateElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/OmniPathOutgoingPacketRateBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="HighOmniPathIncomingPacketRateElapsedTime">
      <valueType>time</valueType>
      <valueEval><![CDATA[ ( query("/BandwidthUtilizationElapsedTime/BandwidthDomain[%OmniPathIncomingPacketRateDomain]/BandwidthUtilizationType[%HighBandwidth]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OmniPathIncomingPacketRateBoundUncore" displayName="%OmniPathIncomingPacketRateBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <description>%OmniPathIncomingPacketRateBoundUncoreDescription</description>
      <issueText>%OmniPathIncomingPacketRateBoundUncoreIssueText</issueText>
      <valueEval><![CDATA[ ( query("/HighOmniPathIncomingPacketRateElapsedTime") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
      <issueEval><![CDATA[ ( query("/OmniPathIncomingPacketRateBoundUncore") > 0.1 ) ]]></issueEval>
    </derivedQuery>
    <infoQuery id="BandwidthDomainMemory">
      <queryInherit>/BandwidthDomain</queryInherit>
      <restrict>
        <value>%DRAM</value>
        <value>%DRAMSingle</value>
        <value>%eDRAM</value>
        <value>%eDRAMSingle</value>
        <value>%QPIOutgoingTotal</value>
        <value>%UPIOutgoingTotal</value>
        <value>%MCDRAMFlat</value>
        <value>%MCDRAMCache</value>
        <value>%MCDRAM</value>
        <value>%GPUMemoryRead</value>
        <value>%GPUMemoryWrite</value>
        <value>%GPUSharedLocalMemoryRead</value>
        <value>%GPUSharedLocalMemoryWrite</value>
        <value>%GPUTypedMemoryRead</value>
        <value>%GPUTypedMemoryWrite</value>
        <value>%GPUUntypedMemoryRead</value>
        <value>%GPUUntypedMemoryWrite</value>
        <value>%3DXPDomain</value>
        <value>%3DXPDomainSingle</value>
      </restrict>
    </infoQuery>
    <infoQuery id="BandwidthDomainOmniPath">
      <queryInherit>/BandwidthDomain</queryInherit>
      <restrict>
        <value>%OmniPathOutgoingBandwidthDomain</value>
        <value>%OmniPathIncomingBandwidthDomain</value>
      </restrict>
    </infoQuery>
    <infoQuery id="BandwidthDomainOmniPathPacketRate" displayName="%Domain">
      <queryInherit>/BandwidthDomain</queryInherit>
      <restrict>
        <value>%OmniPathOutgoingPacketRateDomain</value>
        <value>%OmniPathIncomingPacketRateDomain</value>
      </restrict>
    </infoQuery>
    <infoQuery id="BandwidthUtilizationTypePacketRate" displayName="%BandwidthUtilizationTypePacketRate">
      <queryInherit>/BandwidthUtilizationType</queryInherit>
    </infoQuery>
    <derivedQuery id="HighUtilizationCPUTime" displayName="%CPUTime">
      <valueEval><![CDATA[
            query("/RefTime/BandwidthUtilizationType[%HighBandwidth]") / queryAll("/RefTime", true)
          ]]>
      </valueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="AverageOmniPathOutgoingBandwidth" displayName="%AverageOmniPathOutgoingBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OmniPathOutgoingBandwidth") ) / queryAll("/GlobalElapsedTime", true) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageOmniPathIncomingBandwidth" displayName="%AverageOmniPathIncomingBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OmniPathIncomingBandwidth") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageOmniPathOutgoingPacketRate" displayName="%AverageOmniPathOutgoingPacketRate">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OmniPathOutgoingPacketRate") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageOmniPathIncomingPacketRate" displayName="%AverageOmniPathIncomingPacketRate">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/OmniPathIncomingPacketRate") / queryAll("/GlobalElapsedTime", true) ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="AverageOmniPathUsage" displayName="%OmniPathUsage">
      <valueEval><![CDATA[ ( query("/AverageOmniPathOutgoingBandwidth") ? " " : $NULL ) ]]></valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <infoQuery id="BandwidthUtilizationBinValuePacketRate" displayName="%BandwidthUtilizationBinValuePacketRate">
      <queryInherit>/BandwidthUtilizationBinValue</queryInherit>
    </infoQuery>
    <derivedQuery id="GpuUsageRecommendation">
      <queryInherit>/GPUTimeContext</queryInherit>
      <issueEval><![CDATA[ ( query("/GPUTimeContext") / query("/TotalElapsedTime") > 0.1 ) ]]></issueEval>
      <issueText>%GpuUsageRecommendationTmpl %% %GpuProfilingExpHotspotsAtypeName</issueText>
    </derivedQuery>
    <derivedQuery id="IOWaitTimeRecommendation">
      <queryInherit>/QuantumIOWaitTime</queryInherit>
      <issueEval><![CDATA[ ( query("/QuantumIOWaitTime") / query("/TotalElapsedTime") > 0.1 ) ]]></issueEval>
      <issueText>%IOWaitTimeRecommendationTmpl %% %IOAtypeName</issueText>
    </derivedQuery>
    <derivedQuery id="NetworkDevicesPCIETrafficRecommendation" displayName="Network Devices PCIE Bandwidth">
      <valueEval><![CDATA[ query("/PCIETotalMb/PciDeviceClass[Network controller]") / query("/TotalElapsedTime") * 1024 * 1024 ]]></valueEval>
      <issueEval><![CDATA[ query("/NetworkDevicesPCIETrafficRecommendation") > 10 * 1024 * 1024 ]]></issueEval>
      <issueText>%NetworkDevicesPCIETrafficRecommendationTmpl %% %IOAtypeName</issueText>
      <valueType>bandwidth</valueType>
    </derivedQuery>
    <derivedQuery id="AcceleratorsPCIETrafficRecommendation" displayName="FPGA PCIE Traffic">
      <valueEval>
        <xsl:choose>
          <xsl:when test="exsl:ctx('fpgaOnBoard', 'None') != 'None'">
            <![CDATA[ query("/PCIETotalMb/PciDeviceClass[Processing accelerators]") * 1024  * 1024]]>
          </xsl:when>
          <xsl:otherwise>
            0
          </xsl:otherwise>
        </xsl:choose>
      </valueEval>
      <issueEval><![CDATA[ ( query("/AcceleratorsPCIETrafficRecommendation") > 0 ) ]]></issueEval>
      <issueText>%AcceleratorsPCIETrafficRecommendationTmpl %% %FPGAInteractionAtypeName</issueText>
      <valueType>memory</valueType>
    </derivedQuery>
    <derivedQuery id="shortCollectionMuxRecommendation" displayName="%ShortCollectionMuxRecommendation">
      <valueType>string</valueType>
      <valueEval><![CDATA[ ( $shortCollectionMux ? " " : $FALSE ) ]]></valueEval>
      <issueEval><![CDATA[ query("/shortCollectionMuxRecommendation") == " " ]]></issueEval>
      <issueText>%ShortCollectionMuxRecommendationIssue</issueText>
    </derivedQuery>
  </queryLibrary>
</bag>
