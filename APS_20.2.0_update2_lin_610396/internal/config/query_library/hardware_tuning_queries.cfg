<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www..org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
  >
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary
    xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace=""
    xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    extension-element-prefixes="str"
  >
    <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
    <xsl:variable name="tmamFile" select="$pmuCommon//variables/tmamQueryFile"/>
    <xsl:variable name="fpuFile" select="$pmuCommon//variables/fpuQueryFile"/>
    <xsl:choose>
      <xsl:when  test="exsl:ctx('PMU') = 'corei7w' or exsl:ctx('PMU') = 'corei7wsp' or exsl:ctx('PMU') = 'corei7wdp' or exsl:ctx('PMU') = 'nhm' or exsl:ctx('PMU') = 'corei7b' or exsl:ctx('PMU') = 'corei7' or exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
        <derivedQuery id="InstructionStarvation" displayName="%InstructionStarvation">
          <helpKeyword>configs.instructionstarvation_instructionstarvationdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%InstructionStarvationDescriptionAll</description>
          <issueText>%InstructionStarvationIssueTextAll</issueText>
          <xsl:choose>
            <xsl:when  test="exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <valueEval><![CDATA[
                ( query("/PMUEventCount/PMUEventType[CYCLES_L1I_MEM_STALLED]") / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( query("/PMUEventCount/PMUEventType[CYCLES_L1I_MEM_STALLED]") / query("/DerivedClockticks") ) > 0.15 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[
                ( ( query("/PMUEventCount/PMUEventType[UOPS_ISSUED.CORE_STALL_CYCLES]") - query("/PMUEventCount/PMUEventType[RESOURCE_STALLS.ANY]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( query("/PMUEventCount/PMUEventType[UOPS_ISSUED.CORE_STALL_CYCLES]") - query("/PMUEventCount/PMUEventType[RESOURCE_STALLS.ANY]") ) / query("/DerivedClockticks") ) > 0.15 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
              <confidenceEval><![CDATA[
                ( ( ( query("/PMUSampleCount/PMUEventType[UOPS_ISSUED.CORE_STALL_CYCLES]") >= 10 ) ) && ( query("/ClocktickSamples") >= 10 ) && ( query("/Reliability") >= 0.5 ) )
              ]]></confidenceEval>
            </xsl:otherwise>
          </xsl:choose>
        </derivedQuery>
        <derivedQuery id="L1IStallCycles" displayName="%L1IStallCycles">
          <helpKeyword>configs.l1istallcycles_l1istallcyclesdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%L1IStallCyclesDescriptionAll</description>
          <issueText>%L1IStallCyclesIssueTextAll</issueText>
          <xsl:choose>
            <xsl:when  test="exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <valueEval><![CDATA[
                ( query("/PMUEventCount/PMUEventType[CYCLES_L1I_MEM_STALLED]") / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( query("/PMUEventCount/PMUEventType[CYCLES_L1I_MEM_STALLED]") / query("/DerivedClockticks") ) > 0.15 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[
                ( query("/PMUEventCount/PMUEventType[L1I.CYCLES_STALLED]") / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( query("/PMUEventCount/PMUEventType[L1I.CYCLES_STALLED]") / query("/DerivedClockticks") ) > 0.15 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:otherwise>
          </xsl:choose>
        </derivedQuery>
        <derivedQuery id="LLCLoadMissesServicedByRemoteDRAM" displayName="%LLCLoadMissesServicedByRemoteDRAM">
          <helpKeyword>configs.llcloadmissesservicedbyremotedram_llcloadmissesservicedbyremotedramdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%LLCLoadMissesServicedByRemoteDRAMDescriptionAll</description>
          <issueText>%LLCLoadMissesServicedByRemoteDRAMIssueTextAll</issueText>
          <valueEval><![CDATA[
            ( ( 275 * query("/PMUEventCount/PMUEventType[MEM_UNCORE_RETIRED.REMOTE_DRAM]") ) / query("/DerivedClockticks") )
          ]]></valueEval>
          <issueEval><![CDATA[
            ( ( ( ( 275 * query("/PMUEventCount/PMUEventType[MEM_UNCORE_RETIRED.REMOTE_DRAM]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
          ]]></issueEval>
        </derivedQuery>
        <derivedQuery id="ExecutionStalls" displayName="%ExecutionStalls">
          <helpKeyword>configs.executionstalls_executionstallsdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%ExecutionStallsDescriptionAll</description>
          <issueText>%ExecutionStallsIssueTextAll</issueText>
          <valueEval><![CDATA[
            ( query("/PMUEventCount/PMUEventType[UOPS_EXECUTED.CORE_STALL_CYCLES]") / query("/DerivedClockticks") )
          ]]></valueEval>
          <issueEval><![CDATA[
            ( ( ( query("/PMUEventCount/PMUEventType[UOPS_EXECUTED.CORE_STALL_CYCLES]") / query("/DerivedClockticks") ) > 0.3 ) * ( query("/PMUHotspot") > 0.05 ) )
          ]]></issueEval>
        </derivedQuery>
        <derivedQuery id="DataSharing" displayName="%DataSharing">
          <helpKeyword>configs.datasharing_datasharingdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%DataSharingDescriptionAll</description>
          <issueText>%DataSharingIssueTextAll</issueText>
          <xsl:choose>
            <xsl:when  test="exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <valueEval><![CDATA[
                ( ( ( 150 * query("/PMUEventCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HIT]") ) + ( 80 * query("/PMUEventCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HITM]") ) ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( ( 150 * query("/PMUEventCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HIT]") ) + ( 80 * query("/PMUEventCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HITM]") ) ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
              <confidenceEval><![CDATA[
                ( ( ( query("/PMUSampleCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HIT]") >= 10 ) || ( query("/PMUSampleCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HITM]") >= 10 ) ) && ( query("/ClocktickSamples") >= 10 ) && ( query("/Reliability") >= 0.5 ) )
              ]]></confidenceEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[
                ( ( 70 * query("/PMUEventCount/PMUEventType[MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 70 * query("/PMUEventCount/PMUEventType[MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:otherwise>
          </xsl:choose>
        </derivedQuery>
        <derivedQuery id="RetireStalls" displayName="%RetireStalls">
          <helpKeyword>configs.retirestalls_retirestallsdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%RetireStallsDescriptionAll</description>
          <issueText>%RetireStallsIssueTextAll</issueText>
          <valueEval><![CDATA[
            ( query("/PMUEventCount/PMUEventType[UOPS_RETIRED.STALL_CYCLES]") / query("/DerivedClockticks") )
          ]]></valueEval>
          <issueEval><![CDATA[
            ( ( ( query("/PMUEventCount/PMUEventType[UOPS_RETIRED.STALL_CYCLES]") / query("/DerivedClockticks") ) > 0.35 ) * ( query("/PMUHotspot") > 0.05 ) )
          ]]></issueEval>
        </derivedQuery>
        <derivedQuery id="BranchMispredict" displayName="%BranchMispredict">
          <helpKeyword>configs.branchmispredict_branchmispredictdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBasePercentage</queryInherit>
          <description>%BranchMispredictDescriptionAll</description>
          <issueText>%BranchMispredictIssueTextAll</issueText>
          <xsl:choose>
            <xsl:when  test="exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <valueEval><![CDATA[
                ( ( 20 * query("/PMUEventCount/PMUEventType[BR_MISSP_EXEC]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 20 * query("/PMUEventCount/PMUEventType[BR_MISSP_EXEC]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[
                ( ( 15 * query("/PMUEventCount/PMUEventType[BR_MISP_EXEC.ANY]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 15 * query("/PMUEventCount/PMUEventType[BR_MISP_EXEC.ANY]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:otherwise>
          </xsl:choose>
        </derivedQuery>
        <derivedQuery id="ContestedAccesses" displayName="%ContestedAccesses">
          <helpKeyword>configs.contestedaccesses_contestedaccessesdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%ContestedAccessesDescriptionAll</description>
          <issueText>%ContestedAccessesIssueTextAll</issueText>
          <xsl:choose>
            <xsl:when  test="exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <valueEval><![CDATA[
                ( ( 150 * query("/PMUEventCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HITM]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 150 * query("/PMUEventCount/PMUEventType[EXT_SNOOP.ALL_AGENTS.HITM]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[
                ( ( 74 * query("/PMUEventCount/PMUEventType[MEM_UNCORE_RETIRED.OTHER_CORE_L2_HITM]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 74 * query("/PMUEventCount/PMUEventType[MEM_UNCORE_RETIRED.OTHER_CORE_L2_HITM]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:otherwise>
          </xsl:choose>
        </derivedQuery>
        <derivedQuery id="MemoryBusTransactions" displayName="%MemoryBusTransactions">
          <helpKeyword>configs.memorybustransactions_memorybustransactionsdescriptionall</helpKeyword>
          <queryInherit>/HWEventCountQuery</queryInherit>
          <description>%MemoryBusTransactionsDescriptionAll</description>
          <issueText>%MemoryBusTransactionsIssueTextAll</issueText>
          <confidenceText>%PMUMetricConfidenceText</confidenceText>
          <valueEval><![CDATA[
            query("/PMUEventCount/PMUEventType[BUS_TRANS_MEM.ALL_AGENTS]")
          ]]></valueEval>
        </derivedQuery>
        <derivedQuery id="LLCMiss" displayName="%LLCMiss">
          <helpKeyword>configs.llcmiss_llcmissdescriptionall</helpKeyword>
          <queryInherit>/GeMetricBaseFraction</queryInherit>
          <description>%LLCMissDescriptionAll</description>
          <issueText>%LLCMissIssueTextAll</issueText>
          <xsl:choose>
            <xsl:when  test="exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <valueEval><![CDATA[
                ( ( 200 * query("/PMUEventCount/PMUEventType[MEM_LOAD_RETIRED.L2_MISS]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 200 * query("/PMUEventCount/PMUEventType[MEM_LOAD_RETIRED.L2_MISS]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:when>
            <xsl:when  test="exsl:ctx('PMU') = 'corei7b'">
              <valueEval><![CDATA[
                ( query("/PMUEventCount/PMUEventType[OFFCORE_RESPONSE_0.DEMAND_DATA_RD.ANY_LLC_MISS]") / query("/PMUEventCount/PMUEventType[MEM_INST_RETIRED.LOADS]") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( query("/PMUEventCount/PMUEventType[OFFCORE_RESPONSE_0.DEMAND_DATA_RD.ANY_LLC_MISS]") / query("/PMUEventCount/PMUEventType[MEM_INST_RETIRED.LOADS]") ) > 0.01 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[
                ( ( 200 * query("/PMUEventCount/PMUEventType[MEM_LOAD_RETIRED.LLC_MISS]") ) / query("/DerivedClockticks") )
              ]]></valueEval>
              <issueEval><![CDATA[
                ( ( ( ( 200 * query("/PMUEventCount/PMUEventType[MEM_LOAD_RETIRED.LLC_MISS]") ) / query("/DerivedClockticks") ) > 0.05 ) * ( query("/PMUHotspot") > 0.05 ) )
              ]]></issueEval>
            </xsl:otherwise>
          </xsl:choose>
        </derivedQuery>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="tmamQueryFile" select="document($tmamFile)"/>
        <xsl:copy-of select="$tmamQueryFile//bag/queryLibrary/*"/>
        <xsl:copy-of select="$tmamQueryFile//bag/locatorqueryLibrary/*"/>
      </xsl:otherwise>
    </xsl:choose>
    <derivedQuery id="DRAMBoundForHPCPC">
      <helpKeyword>configs.drambound_drambounddescriptionhpcpc</helpKeyword>
      <queryInherit>/DRAMBound</queryInherit>
      <description>%DRAMBoundDescriptionHPCPC</description>
      <valueEval><![CDATA[ (query("/DRAMBound") ) ]]></valueEval>
      <issues>
        <issue>
          <issueEval><![CDATA[
              ( (query("/DRAMBound") > 0.1 ) && ( query("/BackendBound") > 0.2 ) && ( query("/MemBound") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) )
          ]]></issueEval>
          <issueText>%DRAMBoundIssueHPCPC</issueText>
        </issue>
        <issue>
            <issueEval><![CDATA[
                ( ( query("/MEMBandwidth") > 0.1 ) && ( query("/PMUHotspot") > 0.05 ) && ( query("/DRAMBound") > 0.1 ) && ( query("/MemBound") > 0.2 ) )
            ]]></issueEval>
            <issueText>%DRAMBandwidthBoundIssue</issueText>
        </issue>
        <issue>
            <issueEval><![CDATA[
                ( ( query("/MEMLatency") > 0.1 ) * ( query("/PMUHotspot") > 0.05 ) && ( query("/DRAMBound") > 0.1 ) && ( query("/MemBound") > 0.2 ) )
            ]]></issueEval>
            <issueText>%DRAMLatencyBoundIssue</issueText>
        </issue>
      </issues>
    </derivedQuery>
    <derivedQuery id="DRAMBoundForHPCPCPercentage">
      <queryInherit>/DRAMBoundForHPCPC</queryInherit>
      <valueType>ratio</valueType>
      <displayAttributes>
        <selfFormat>ratio</selfFormat>
        <totalFormat>ratio</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <xsl:copy-of select="document($fpuFile)//queryLibrary/*"/>
    <derivedQuery id="MemBoundAPSThreshold">
      <valueType>double</valueType>
      <valueEval><![CDATA[ 0.2 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CacheBoundAPS">
      <queryInherit>/CacheBound</queryInherit>
      <valueEval><![CDATA[ ( queryOptional("/CacheBound") ? queryOptional("/CacheBound") : 0) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="CacheBoundPercentageAPS">
      <queryInherit>/CacheBoundPercentage</queryInherit>
      <valueEval><![CDATA[ ( queryOptional("/CacheBoundPercentage") ? queryOptional("/CacheBoundPercentage") : 0) ]]></valueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="DRAMBoundAPS">
      <queryInherit>/DRAMBound</queryInherit>
      <valueEval><![CDATA[ ( queryOptional("/DRAMBound") ? queryOptional("/DRAMBound") : 0 ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="DRAMBoundForHPCPCPercentageAPS">
      <queryInherit>/DRAMBoundForHPCPCPercentage</queryInherit>
      <valueEval><![CDATA[ ( queryOptional("/DRAMBoundForHPCPCPercentage") ? queryOptional("/DRAMBoundForHPCPCPercentage") : 0 ) ]]></valueEval>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="BackendBoundAPS">
      <queryInherit>/BackendBound</queryInherit>
      <valueEval><![CDATA[ (queryOptional("/BackendBound") ? queryOptional("/BackendBound") : 0) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="BackendBoundPipelineSlotsAPS">
      <queryInherit>/BackendBoundPipelineSlots</queryInherit>
      <valueEval><![CDATA[ (queryOptional("/BackendBoundPipelineSlots") ? queryOptional("/BackendBoundPipelineSlots") : 0) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="MEMBandwidthAPS">
      <queryInherit>/MEMBandwidth</queryInherit>
      <valueEval><![CDATA[ (queryOptional("/MEMBandwidth") ? queryOptional("/MEMBandwidth") : 0) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="MEMLatencyAPS">
      <queryInherit>/MEMLatency</queryInherit>
      <valueEval><![CDATA[ (queryOptional("/MEMLatency") ? queryOptional("/MEMLatency") : 0) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="LLCHitKNLAPS">
      <queryInherit>/LLCHitKNLHPC</queryInherit>
      <valueEval><![CDATA[ (queryOptional("/LLCHitKNLHPC") ? queryOptional("/LLCHitKNLHPC") : 0) ]]></valueEval>
      <valueType>ratio</valueType>
      <displayAttributes>
        <selfFormat>ratio</selfFormat>
        <totalFormat>ratio</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="LLCMissKNLAPS">
      <queryInherit>/LLCMissKNLHPC</queryInherit>
      <valueEval><![CDATA[ (queryOptional("/LLCMissKNLHPC") ? queryOptional("/LLCMissKNLHPC") : 0) ]]></valueEval>
      <valueType>ratio</valueType>
      <displayAttributes>
        <selfFormat>ratio</selfFormat>
        <totalFormat>ratio</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="MemBoundAPS">
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU') = 'knl'">
          <queryInherit>/BackendBoundPipelineSlots</queryInherit>
          <description>%BackendBoundAPSDescription</description>
          <issues>
            <issue>
              <issueEval><![CDATA[ ( (query("/BackendBoundPipelineSlotsAPS") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) && ( (query("/LLCHitKNLAPS") > 0.1) || (query("/LLCMissKNLAPS") > 0.15) ) ) ]]></issueEval>
              <issueText>%BackendBoundAPSIssueShort</issueText>
            </issue>
            <issue>
             <issueEval><![CDATA[ ( (query("/BackendBoundPipelineSlotsAPS") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) && !( (query("/LLCHitKNLAPS") > 0.1) || (query("/LLCMissKNLAPS") > 0.15) ) ) ]]></issueEval>
             <issueText>%BackendBoundAPSIssueLong</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[ ( ( (query("/LLCHitKNLAPS") > 0.1) ) && ( query("/PMUHotspot") > 0.05 ) ) ]]></issueEval>
              <issueText>%L2HitBoundAPSIssue</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[ ( ( (query("/LLCMissKNLAPS") > 0.15) ) && ( query("/PMUHotspot") > 0.05 ) ) ]]></issueEval>
              <issueText>%L2MissBoundAPSIssue</issueText>
            </issue>
          </issues>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/MemBound</queryInherit>
          <description>%MemBoundAPSDescription</description>
          <issues>
            <issue>
              <issueEval><![CDATA[ ( (query("/MemBound") > query("/MemBoundAPSThreshold")) && ( (query("/CacheBoundAPS") > 0.2) || ( (query("/DRAMBoundAPS") > 0.1 ) && ( query("/BackendBoundAPS") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) ) ) ) ]]></issueEval>
              <issueText>%MemBoundAPSIssueShort</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[ ( (query("/MemBound") > query("/MemBoundAPSThreshold")) && !( (query("/CacheBoundAPS") > 0.2) || ( (query("/DRAMBoundAPS") > 0.1 ) && ( query("/BackendBoundAPS") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) ) ) ) ]]></issueEval>
              <issueText>%MemBoundAPSIssueLong</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[ (query("/CacheBoundAPS") > 0.2 ) ]]></issueEval>
              <issueText>%CacheBoundAPSIssueText</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[
                  ( (query("/DRAMBoundAPS") > 0.1 ) && ( query("/BackendBoundAPS") > 0.2 ) && ( query("/MemBound") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) && ( ( query("/MEMBandwidthAPS") > 0.1 ) || ( query("/MEMLatencyAPS") > 0.1 ) ) )
              ]]></issueEval>
              <issueText>%DRAMBoundAPSIssueShort</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[
                  ( (query("/DRAMBoundAPS") > 0.1 ) && ( query("/BackendBoundAPS") > 0.2 ) && ( query("/MemBound") > 0.2 ) && ( query("/PMUHotspot") > 0.05 ) && !( query("/MEMBandwidthAPS") > 0.1 ) && !( query("/MEMLatencyAPS") > 0.1 ) )
              ]]></issueEval>
              <issueText>%DRAMBoundAPSIssueLong</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[
                  ( ( query("/MEMBandwidthAPS") > 0.1 ) && ( query("/PMUHotspot") > 0.05 ) && ( query("/DRAMBoundAPS") > 0.1 ) && ( query("/MemBound") > 0.2 ) )
              ]]></issueEval>
              <issueText>%DRAMBandwidthBoundAPSIssueText</issueText>
            </issue>
            <issue>
              <issueEval><![CDATA[
                  ( ( query("/MEMLatencyAPS") > 0.1 ) * ( query("/PMUHotspot") > 0.05 ) && ( query("/DRAMBoundAPS") > 0.1 ) && ( query("/MemBound") > 0.2 ) )
              ]]></issueEval>
              <issueText>%DRAMLatencyBoundAPSIssueText</issueText>
            </issue>
          </issues>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="FPUUtilizationAPSThreshold" displayName="%FPUUtilizationAPSThreshold">
      <valueType>double</valueType>
      <valueEval><![CDATA[ 0.5 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="FPUUtilizationAPS">
      <queryInherit>/FPUUtilization</queryInherit>
      <description>%FPUUtilizationAPSDescription</description>
      <issueText>%FPUUtilizationAPSIssue</issueText>
      <issueEval><![CDATA[ ( query("/FPUUtilizationAPS") < query("/FPUUtilizationAPSThreshold") ) ]]></issueEval>
    </derivedQuery>
    <derivedQuery id="GFLOPsSummary">
      <queryInherit>/GFLOPS</queryInherit>
    </derivedQuery>
    <derivedQuery id="CPUTimeConditionalOnFPRatio" displayName="%RefTime">
      <description>%RefTimeDescription</description>
      <valueType>time</valueType>
      <boolean:valueSummable>true</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/FPRatio") > 0.0 ? (query("/RefTime")) : 0 ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="IssueedFPUUtilizationForHPCSummary">
      <queryInherit>/SummaryFPUUtilization</queryInherit>
      <valueEval><![CDATA[ (query("/FPRatio") > 0.0 ? query("/FPUUtilization") : 0) ]]></valueEval>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="MemBoundFraction">
      <queryInherit>/MemBound</queryInherit>
      <displayAttributes>
        <selfFormat>_double_</selfFormat>
        <totalFormat>_double_</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="LLCMissKNLHPC">
      <queryInherit>/LLCMissKNL</queryInherit>
      <issueEval><![CDATA[
        ( ( (query("/LLCMissKNL") > 0.15) ) && ( query("/PMUHotspot") > 0.05 ) )
      ]]></issueEval>
    </derivedQuery>
  </queryLibrary>
</bag>
