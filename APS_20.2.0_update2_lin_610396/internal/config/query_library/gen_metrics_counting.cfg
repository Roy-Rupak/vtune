<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
  >
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="gpuCountingMetrics">
      <item name="EuActive" alt_name="GPUEUActiveWhenBusy"/>
      <item name="EuStall" alt_name="GPUEUStalledWhenBusy"/>
      <item name="EuAvgIpcRate"/>
      <item name="EuThreadOccupancy" alt_name="GPUThreadOccupancyWhenBusy"/>
      <item name="EuFpuBothActive"/>
      <item name="EuSendActive"/>
      <item name="TypedReadsPerCacheLine"/>
      <item name="TypedWritesPerCacheLine"/>
      <item name="UntypedReadsPerCacheLine"/>
      <item name="UntypedWritesPerCacheLine"/>
      <item name="SamplerL1Misses"/>
      <item name="UntypedBytesWritten"/>
      <item name="UntypedBytesRead"/>
      <item name="SlmBytesRead"/>
      <item name="SlmBytesWritten"/>
      <item name="TypedBytesWritten"/>
      <item name="TypedBytesRead"/>
      <item name="GtiReadThroughput"/>
      <item name="GtiWriteThroughput"/>
      <item name="L3Misses"/>
      <item name="CsThreads"/>
      <item name="GtiL3Throughput"/>
    </xsl:variable>
    <xsl:for-each select="exsl:node-set($gpuCountingMetrics)/item">
      <derivedQuery id="GPU{@name}WhenBusyCounting">
        <queryInherit>
          <xsl:choose>
            <xsl:when test="@alt_name">
              <xsl:value-of select="concat('/', string(@alt_name))"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="str:replace('/GPU{@name}', '{@name}', string(@name))"/>
            </xsl:otherwise>
          </xsl:choose>
        </queryInherit>
        <xsl:variable name="queryPrototype">query("/{@queryName}")</xsl:variable>
        <xsl:variable name="samplingQuery">
          <xsl:choose>
            <xsl:when test="@alt_name">
              <xsl:value-of select='str:replace($queryPrototype, "{@queryName}", string(@alt_name))'/>
            </xsl:when>
            <xsl:otherwise>
              query("/GPU{@name}WhenBusy")
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="valueEvalText"> ($useGpuCounting) ? ( query("/GPU{@name}Metric") ) : <xsl:value-of select="$samplingQuery"/></xsl:variable>
        <valueEval>
          <xsl:value-of select="str:replace($valueEvalText, '{@name}', string(@name))"/>
        </valueEval>
      </derivedQuery>
    </xsl:for-each>
    <derivedQuery id="GPUEuIdleWhenBusyCounting">
      <queryInherit>/GPUEUIdleWhenBusy</queryInherit>
      <valueEval><![CDATA[ (query("/GPUEuActiveWhenBusyCounting") + query("/GPUEuStallWhenBusyCounting")) <= 1 ? ((query("/GPUEuActiveWhenBusyCounting") + query("/GPUEuStallWhenBusyCounting")) >=0 ? 1 - (query("/GPUEuActiveWhenBusyCounting") + query("/GPUEuStallWhenBusyCounting")) : (query("/GPUEuActiveWhenBusyCounting") + query("/GPUEuStallWhenBusyCounting"))) : 0.0 ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEUAvgUtilizationWhenBusyCounting">
      <queryInherit>/GPUEUAvgUtilization</queryInherit>
      <issueEval><![CDATA[ query("/GPUEUAvgUtilizationWhenBusyCounting") < 0.8]]></issueEval>
      <valueEval>query("/GPUEuActiveWhenBusyCounting")</valueEval>
    </derivedQuery>
    <derivedQuery id="GPUUsageElapsedTimeWhenBusyCounting">
      <queryInherit>/GPUUsageElapsedTimeWhenBusy</queryInherit>
      <valueEval>($useGpuCounting) ? (query("/GPUGpuTimeMetric") / 1e9) : query("/GPUUsageElapsedTimeWhenBusy")</valueEval>
    </derivedQuery>
    <derivedQuery id="GPUTimeWhenBusyCounting" displayName="%GPUHPCActiveTime">
      <description>%GPUHPCActiveTimeDescription</description>
      <queryInherit>/GPUUtilization</queryInherit>
      <issueEval><![CDATA[ (query("/GPUTimeWhenBusyCounting") < 0.8) ]]></issueEval>
      <valueEval><![CDATA[ query("/GPUUsageElapsedTimeWhenBusyCounting") / query("/GPUElapsedTime") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUTimePrettyPrintedWhenBusyCounting" displayName="%Time">
      <description>%GPUHPCActiveTimeDescription</description>
      <queryInherit>/GPUUtilization</queryInherit>
      <valueType>string</valueType>
      <valueEval><![CDATA[ %#(query("/GPUUsageElapsedTimeWhenBusyCounting") / query("/GPUElapsedTime")) + " (" + t#query("/GPUUsageElapsedTimeWhenBusyCounting") + ")" ]]></valueEval>
      <unitOfMeasureQueryId>GPUElapsedTimeForUnit</unitOfMeasureQueryId>
    </derivedQuery>
  </queryLibrary>
</bag>
