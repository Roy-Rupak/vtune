<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www..org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
  >
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary
    xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace=""
    xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    extension-element-prefixes="str"
  >
    <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
    <xsl:variable name="clkEvent" select="$pmuCommon//variables/clockticksEvent"/>
    <xsl:variable name="refClkEvent" select="$pmuCommon//variables/refClockticksEvent"/>
    <xsl:variable name="factorFromRefClkToTsc" select="$pmuCommon//variables/factorFromRefClkToTsc"/>
    <xsl:variable name="instEvent" select="$pmuCommon//variables/instructionsEvent"/>
    <xsl:variable name="callCountEvent" select="$pmuCommon//variables/callCountQueryEvent"/>
    <xsl:variable name="peciseClockticksEvent" select="$pmuCommon//variables/peciseClockticksEvent"/>
    <xsl:variable name="L3CATSegments" select="$pmuCommon//variables/L3CATSegments"/>
    <xsl:variable name="L2CATSegments" select="$pmuCommon//variables/L2CATSegments"/>
    <xsl:variable name="uncacheableReadsEventNameOnly" select="$pmuCommon//variables/uncacheableReadsEventNameOnly"/>
    <xsl:variable name="uncacheableReadsEventAvailable" select="string($uncacheableReadsEventNameOnly) != ''"/>
    <infoQuery id="RefTimeEvent">
      <queryInherit>
        <xsl:text>/PMUEventType[</xsl:text>
        <xsl:value-of select="$refClkEvent"></xsl:value-of>
        <xsl:text>]</xsl:text>
      </queryInherit>
    </infoQuery>
    <infoQuery id="PMUEventCoreFrequency">
      <dbPath>pmu_data::dd_sample.cpu.core.freq</dbPath>
      <displayDbPathSuffix>freq_hz</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="RefTime" displayName="%RefTime">
      <description>%RefTimeDescription</description>
      <valueType>time</valueType>
      <boolean:valueSummable>true</boolean:valueSummable>
      <displayAttributes>
        <timelineFormat>area</timelineFormat>
        <timelineGraphColor>98,79,19</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <selfFormat>timeAndBar</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <timelineObjectType>interval</timelineObjectType>
      </displayAttributes>
      <confidenceEval><![CDATA[ query("/ClocktickConfidence") ]]></confidenceEval>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
      <notApplicableGroupings>
        <vectorQuery id="notApplicableGroupingsGroup">
          <vectorQueryInsert>/PMUMemoryObjectGroupingQueries</vectorQueryInsert>
        </vectorQuery>
      </notApplicableGroupings>
      <valueEval>
        <xsl:for-each select="str:tokenize(exsl:ctx('coreFrequencies',''), ',')">
          <xsl:variable name='freqValue' select="."/>
          <xsl:variable name="pmuComm" select="document(concat('config://include/pmu_common.xsl?referenceFrequency=', $freqValue))"/>
          <xsl:text>query("/PMUEventCount/RefTimeEvent/PMUEventCoreFrequency[</xsl:text>
          <xsl:value-of select="$freqValue"/>
          <xsl:text>]") / </xsl:text>
          <xsl:value-of select="$pmuComm//variables/factorFromRefClkToTsc"/>
          <xsl:if test="position() != last()">
            <xsl:text> + </xsl:text>
          </xsl:if>
        </xsl:for-each>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="RefTimeForGPUPacketStage">
      <queryInherit>/RefTime</queryInherit>
      <valueEval>
        <xsl:text>query("/PMUEventCountForGPUPacketStage/RefTimeEvent") / </xsl:text>
        <xsl:value-of select="$factorFromRefClkToTsc"/>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="PMUTime" displayName="%RefTime">
      <queryInherit>/RefTime</queryInherit>
    </derivedQuery>
    <derivedQuery id="PreciseClockticks" displayName="%PreciseClockticks">
      <helpKeyword>configs.preciseclockticks_preciseclockticksdescription</helpKeyword>
      <description>%PreciseClockticksDescription</description>
      <valueType>count</valueType>
      <valueEval>
        <xsl:text>query("/PMUEventCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$peciseClockticksEvent"></xsl:value-of>
        <xsl:text>]")</xsl:text>
      </valueEval>
      <displayAttributes>
        <timelineFormat>area</timelineFormat>
        <timelineGraphColor>98,79,19</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineObjectType>interval</timelineObjectType>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="RefTimeByThread" displayName="%RefTime">
      <queryInherit>/RefTime</queryInherit>
    </derivedQuery>
    <derivedQuery id="RefTimeAllCoresCumulative" displayName="%RefTime">
      <queryInherit>/RefTime</queryInherit>
      <maxEval>100 * $logicalCPUCount</maxEval>
    </derivedQuery>
    <derivedQuery id="RefTimePerPackage" displayName="%RefTime">
      <queryInherit>/RefTime</queryInherit>
      <maxEval>100 * $logicalCPUCount / $packageCount</maxEval>
    </derivedQuery>
    <countQuery id="Clockticks" displayName="%Clockticks">
      <valueType>count</valueType>
      <queryInherit>
        <xsl:text>/PMUEventCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]</xsl:text>
      </queryInherit>
    </countQuery>
    <derivedQuery id="InstructionsRetired" displayName="%InstructionsRetired">
      <valueType>count</valueType>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
      <valueEval>
        <xsl:text>query("/PMUEventCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$instEvent"></xsl:value-of>
        <xsl:text>]")</xsl:text>
      </valueEval>
      <confidenceEval>
        <xsl:text>($useCountingMode || $useAggregatedCounting) ? $TRUE : (</xsl:text>
        <xsl:text>query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$instEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 )</xsl:text>
      </confidenceEval>
    </derivedQuery>
    <instanceCountQuery id="ClocktickSamples" displayName="%ClocktickSamples">
      <valueType>count</valueType>
      <queryInherit>
        <xsl:text>/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]</xsl:text>
      </queryInherit>
    </instanceCountQuery>
    <countQuery id="Corei7Clockticks" displayName="%Clockticks">
      <valueType>count</valueType>
      <xsl:if test="exsl:ctx('PMU') = 'corei7' or exsl:ctx('PMU') = 'corei7wsp' or exsl:ctx('PMU') = 'corei7wdp' or exsl:ctx('PMU') = 'corei7b'">
        <queryInherit>/PMUEventCount/PMUEventType[CPU_CLK_UNHALTED.THREAD]</queryInherit>
      </xsl:if>
    </countQuery>
    <derivedQuery id="DerivedClockticks" displayName="%Clockticks">
      <valueType>count</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('allowMultipleRuns', 0)">
          <valueEval><![CDATA[query("/Clockticks") / $muxGroupCount]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[query("/Clockticks")]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <confidenceEval>
        <xsl:text>($useCountingMode || $useAggregatedCounting) ? $TRUE : (</xsl:text>
        <xsl:text>query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 )</xsl:text>
      </confidenceEval>
    </derivedQuery>
    <derivedQuery id="DerivedInstructionsRetired">
      <queryInherit>/InstructionsRetired</queryInherit>
      <xsl:if test="exsl:ctx('allowMultipleRuns', 0)">
        <valueEval><![CDATA[query("/InstructionsRetired") / $muxGroupCount]]></valueEval>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="DerivedRefClockticks" displayName="%Clockticks">
      <valueType>count</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('allowMultipleRuns', 0)">
          <valueEval><![CDATA[query("/PMUEventCount/PMUEventType[CPU_CLK_UNHALTED.REF_TSC]") / $muxGroupCount]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[query("/PMUEventCount/PMUEventType[CPU_CLK_UNHALTED.REF_TSC]")]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="DerivedIssueSlots" displayName="%SLOTS">
      <valueType>count</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('allowMultipleRuns', 0)">
          <valueEval><![CDATA[query("/PMUEventCount/PMUEventType[TOPDOWN.SLOTS]") / $muxGroupCount]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[query("/PMUEventCount/PMUEventType[TOPDOWN.SLOTS]")]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <infoQuery id="CallCountEvent">
      <queryInherit>
        <xsl:text>/PMUEventType[</xsl:text>
        <xsl:value-of select="$callCountEvent"></xsl:value-of>
        <xsl:text>]</xsl:text>
      </queryInherit>
    </infoQuery>
    <derivedQuery id="GlobalRefTime" displayName="%RefTime">
      <queryInherit>/RefTime</queryInherit>
      <valueEval>query("/GlobalPMUEventCount/RefTimeEvent") / $referenceFrequency</valueEval>
    </derivedQuery>
    <derivedQuery id="GlobalCPUUtilization" displayName="%CPUUtilization">
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('runsa:enable', 0) or (exsl:ctx('runsa:enable', 'na') = 'na' and exsl:ctx('runss:enable', 'na') = 'na' and not(exsl:IsTableExist('cpu_data')) and exsl:IsTableExist('pmu_data'))">
          <valueEval>query("/GlobalRefTime") / ($logicalCPUCount * query("/GlobalElapsedTime"))</valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>query("/GlobalCPUTime") / ($logicalCPUCount * query("/GlobalElapsedTime"))</valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="CallCount" displayName="%CallCount">
      <helpKeyword>configs.callcount_callcountdescription</helpKeyword>
      <valueType>count</valueType>
      <boolean:valueSummable>true</boolean:valueSummable>
      <valueEval><![CDATA[ query("/PMUEventCount/CallCountEvent")
                              - query("/PMUEventCount/CallCountEvent/PMUCallsiteType[%LoopLocation]")
                              - query("/PMUEventCount/CallCountEvent/PMUCallsiteType[%CallLocation]")
                              - query("/PMUEventCount/CallCountEvent/PMUCallsiteType[%InlineLocation]")
      ]]></valueEval>
      <description>%CallCountDescription</description>
    </derivedQuery>
    <derivedQuery id="ExactCallCount" displayName="%ExactCallCount">
      <queryInherit>/CallCount</queryInherit>
      <description>%ExactCallCountDescription</description>
    </derivedQuery>
    <infoQuery id="TotalIterationCountEvent">
      <queryInherit>/PMUEventType[ITERATION_COUNT]</queryInherit>
    </infoQuery>
    <infoQuery id="LoopEntryCountEvent">
      <queryInherit>/PMUEventType[LOOP_ENTRY_COUNT]</queryInherit>
    </infoQuery>
    <infoQuery id="PTInstructionsEvent">
      <queryInherit>/PMUEventType[PT_INSTRUCTIONS]</queryInherit>
    </infoQuery>
    <infoQuery id="PTBranchesEvent">
      <queryInherit>/PMUEventType[PT_BRANCHES]</queryInherit>
    </infoQuery>
    <derivedQuery id="PTInstructions" displayName="%PTInstructions">
      <valueType>count</valueType>
      <valueEval>
        <![CDATA[ query("/PMUEventCount/PTInstructionsEvent")]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="PTBranches" displayName="%PTBranches">
      <valueType>count</valueType>
      <valueEval>
        <![CDATA[ query("/PMUEventCount/PTBranchesEvent")]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="EstimatedBBExecCount" displayName="%EstimatedBBExecCount">
      <helpKeyword>configs.estimatedbbexeccount_bbexeccountdescription</helpKeyword>
      <valueType>int</valueType>
      <xsl:choose>
        <xsl:when test = "exsl:ctx('collectFullProcTrace', 0)">
          <valueEval><![CDATA[ query("/InstructionsRetired") / query("/PMUBasicBlockNumInstr")]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/PTBranches")]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%BBExecCountDescription</description>
    </derivedQuery>
    <derivedQuery id="TotalIterationCount" displayName="%TotalIterationCount">
      <helpKeyword>configs.totaliterationcount_totaliterationcountdescription</helpKeyword>
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/PMUEventCount/TotalIterationCountEvent")
                              - query("/PMUEventCount/TotalIterationCountEvent/PMUCallsiteType[%LoopLocation]")
                              - query("/PMUEventCount/TotalIterationCountEvent/PMUCallsiteType[%CallLocation]")
                              - query("/PMUEventCount/TotalIterationCountEvent/PMUCallsiteType[%InlineLocation]")
      ]]></valueEval>
      <description>%TotalIterationCountDescription</description>
    </derivedQuery>
    <derivedQuery id="ExactTotalIterationCount">
      <queryInherit>/TotalIterationCount</queryInherit>
      <description>%ExactTotalIterationCountDescription</description>
    </derivedQuery>
    <derivedQuery id="LoopEntryCount" displayName="%LoopEntryCount">
      <helpKeyword>configs.loopentrycount_loopentrycountdescription</helpKeyword>
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/PMUEventCount/LoopEntryCountEvent")
                              - query("/PMUEventCount/LoopEntryCountEvent/PMUCallsiteType[%LoopLocation]")
                              - query("/PMUEventCount/LoopEntryCountEvent/PMUCallsiteType[%CallLocation]")
                              - query("/PMUEventCount/LoopEntryCountEvent/PMUCallsiteType[%InlineLocation]")
      ]]></valueEval>
      <description>%LoopEntryCountDescription</description>
    </derivedQuery>
    <derivedQuery id="AverageTripCount" displayName="%AverageTripCount">
      <helpKeyword>configs.averagetripcount_averagetripcountdescription</helpKeyword>
      <valueType>count</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <displayAttributes>
        <selfFormat>count</selfFormat>
        <totalFormat>count</totalFormat>
      </displayAttributes>
      <valueEval><![CDATA[ query("/TotalIterationCount") / query("/LoopEntryCount") ]]></valueEval>
      <description>%AverageTripCountDescription</description>
    </derivedQuery>
    <derivedQuery id="CPI" displayName="%CPI">
      <valueType>double</valueType>
      <boolean:valueSummable>true</boolean:valueSummable>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
      <valueEval><![CDATA[query("/Clockticks") / query("/InstructionsRetired") ]]></valueEval>
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU') = 'atom'">
          <description>%AtomCPIDescription</description>
          <issueEval><![CDATA[ ( query("/CPI") > 2.0) && (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
        </xsl:when>
        <xsl:when test="exsl:ctx('PMU') = 'silvermont' or exsl:ctx('PMU') = 'airmont' or exsl:ctx('PMU') = 'goldmont' or exsl:ctx('PMU') = 'goldmont_plus' or exsl:ctx('PMU') = 'lakemont'">
          <xsl:choose>
            <xsl:when test = "exsl:ctx('cpuFamily') = 6 and exsl:ctx('cpuModel') = 93">
              <description>%SoFIA3GCPIDescription</description>
              <issueEval><![CDATA[ ( query("/CPI") > 18.0) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
            </xsl:when>
            <xsl:when test = "exsl:ctx('cpuFamily') = 6 and exsl:ctx('cpuModel') = 101">
              <description>%SoFIALTECPIDescription</description>
              <issueEval><![CDATA[ ( query("/CPI") > 7.2) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
            </xsl:when>
            <xsl:when test = "exsl:ctx('PMU') = 'silvermont' or exsl:ctx('PMU') = 'airmont'">
              <description>%AtomCPIDescription</description>
              <issueEval><![CDATA[ ( query("/CPI") > 2.0) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
            </xsl:when>
            <xsl:otherwise>
              <description>%GoldmontCPIDescription</description>
              <issueEval><![CDATA[ ( query("/CPI") > 2.0) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:when test="exsl:ctx('PMU') = 'miccore' or exsl:ctx('PMU') = 'knc'">
          <description>%KNCCPIDescription</description>
          <issueEval><![CDATA[ ( query("/CPI") > 4.0) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
        </xsl:when>
        <xsl:when test="exsl:ctx('PMU') = 'knl'">
          <description>%KNCCPIDescription</description>
          <issueEval><![CDATA[ ( query("/CPI") > 2.0) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
        </xsl:when>
        <xsl:otherwise>
          <description>%CPIDescription</description>
          <issueEval><![CDATA[ ( query("/CPI") > 1.0) *  (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
        </xsl:otherwise>
      </xsl:choose>
      <issueText>%CPIIssueText</issueText>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
      <confidenceEval>
        <xsl:text>($useCountingMode || $useAggregatedCounting) ? $TRUE : (</xsl:text>
        <xsl:text>(query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 ) &amp;&amp; ( query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$instEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 ) )</xsl:text>
      </confidenceEval>
    </derivedQuery>
    <derivedQuery id="MicroarchitectureUsage" displayName="%MicroarchitectureUsage">
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU') = 'atom' or exsl:ctx('PMU') = 'core2' or exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'corei7' or exsl:ctx('PMU') = 'corei7wsp' or exsl:ctx('PMU') = 'corei7wdp' or exsl:ctx('PMU') = 'corei7b'">
          <valueType>ratio</valueType>
          <valueEval><![CDATA[ (query("/CPI") < 0.5) : 1 ? (0.5 / query("/CPI")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/RetiredPipelineSlots</queryInherit>
          <issueEval><![CDATA[( query("/RetiredPipelineSlots") < 0.7 )]]></issueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%MicroarchitectureUsageDescription</description>
      <issueText>%MicroarchitectureUsageIssueText</issueText>
    </derivedQuery>
    <derivedQuery id="MicroarchitectureUsageExpanded" displayName="%MicroarchitectureUsage">
      <queryInherit>/MicroarchitectureUsage</queryInherit>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
      </displayAttributes>
      <expand>
        <vectorQuery id="MicroarchitectureUsageExpandedVector">
          <queryRef>/MicroarchitectureUsage</queryRef>
          <queryRef>/CPI</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="MicroarchitectureUsageExpandedSummary" displayName="%MicroarchitectureUsage">
      <queryInherit>/MicroarchitectureUsage</queryInherit>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
      </displayAttributes>
      <expand>
        <vectorQuery id="MicroarchitectureUsageExpandedVector">
          <queryRef>/CPI</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="IPC" displayName="%IPC">
      <helpKeyword>configs.ipc_ipcdescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
      </displayAttributes>
      <valueEval><![CDATA[query("/InstructionsRetired") / query("/Clockticks") ]]></valueEval>
      <description>%IPCDescription</description>
      <issueEval><![CDATA[ ( query("/IPC") < 1.0) && (query("/PMUHotspot") > 0.05 )  ]]></issueEval>
      <issueText>%IPCIssueText</issueText>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
      <confidenceEval>
        <xsl:text>($useCountingMode || $useAggregatedCounting) ? $TRUE : (</xsl:text>
        <xsl:text>(query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 ) &amp;&amp; ( query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$instEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 ) )</xsl:text>
      </confidenceEval>
    </derivedQuery>
    <derivedQuery id="TurboFreqRate" displayName="%TurboFreqRate">
      <helpKeyword>configs.turbofreqrate_turbofreqratedescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>true</boolean:valueSummable>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
        <timelineObjectType>interval</timelineObjectType>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
        <boolean:canBeDoi>false</boolean:canBeDoi>
      </displayAttributes>
      <valueEval><![CDATA[ ( query("/Clockticks") / $referenceFrequency ) / query("/RefTime") ]]></valueEval>
      <description>%TurboFreqRateDescription</description>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
      <confidenceEval>
        <xsl:text>($useCountingMode || $useAggregatedCounting) ? $TRUE : (</xsl:text>
        <xsl:text>(query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 ) &amp;&amp; ( query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$refClkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 10 ) )</xsl:text>
      </confidenceEval>
    </derivedQuery>
    <derivedQuery id="AverageFrequency" displayName="%AverageFrequency">
      <helpKeyword>configs.averagefrequency_averagefrequencydescription</helpKeyword>
      <valueType>frequency</valueType>
      <valueEval>
        <![CDATA[ ( query("/TurboFreqRate") * $referenceFrequency )]]>
      </valueEval>
      <description>%AverageFrequencyDescription</description>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
      <confidenceEval>
        <xsl:text>($useCountingMode || $useAggregatedCounting) ? $TRUE : (</xsl:text>
        <xsl:text>(query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$clkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 1000 ) &amp;&amp; ( query("/PMUSampleCount/PMUEventType[</xsl:text>
        <xsl:value-of select="$refClkEvent"></xsl:value-of>
        <xsl:text>]") &gt;= 1000 ) )</xsl:text>
      </confidenceEval>
    </derivedQuery>
    <derivedQuery id="PMUCoreFrequency" displayName="%CPUFrequency">
      <helpKeyword>configs.corefrequency_pmucorefrequencydescription</helpKeyword>
      <description>%PMUCoreFrequencyDescription</description>
      <valueType>frequency</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <displayAttributes>
        <timelineObjectType>interval</timelineObjectType>
        <minimumResolutionms>20</minimumResolutionms>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
        <timeScalems>1000</timeScalems>
      </displayAttributes>
      <valueEval><![CDATA[ query("/Clockticks") ]]></valueEval>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
    </derivedQuery>
    <derivedQuery id="DerivedQueryClockticks" displayName="%Clockticks">
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/Clockticks") ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="PMUDataOfInterest" displayName="%PMUDataOfInterest">
       <queryInherit>/RefTime</queryInherit>
    </derivedQuery>
    <derivedQuery id="UncacheableReads" displayName="%UncacheableReads">
      <valueType>count</valueType>
      <xsl:if test="$uncacheableReadsEventAvailable">
        <valueEval>
          <xsl:text>query("/PMUEventCount/PMUEventType[</xsl:text>
          <xsl:value-of select="$uncacheableReadsEventNameOnly"></xsl:value-of>
          <xsl:text>]")</xsl:text>
        </valueEval>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="UncacheableReadsPerSecond" displayName="%UncacheableReadsPerSecond">
      <description>%UncacheableReadsPerSecondDescription</description>
      <valueType>double</valueType>
      <valueEval>
        <![CDATA[ query("/UncacheableReads") / queryAll("/GlobalElapsedTime", true) ]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="PercentageQuery">
      <valueType>double</valueType>
      <minEval>0</minEval>
      <maxEval>1</maxEval>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="ClockticksPercentageQuery">
      <queryInherit>/PercentageQuery</queryInherit>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="UOPSPercentageQuery">
      <queryInherit>/PercentageQuery</queryInherit>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="InstructionsRetiredPercentageQuery">
      <queryInherit>/PercentageQuery</queryInherit>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="ClockticksPercentageBarQuery">
      <queryInherit>/PercentageQuery</queryInherit>
      <displayAttributes>
        <selfFormat>bar</selfFormat>
        <totalFormat>bar</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="InstructionsRetiredPercentageBarQuery">
      <queryInherit>/PercentageQuery</queryInherit>
      <displayAttributes>
        <selfFormat>bar</selfFormat>
        <totalFormat>bar</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="DoubleQuery">
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <displayAttributes>
        <selfFormat>number</selfFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="HWEventCountQuery">
      <boolean:valueSummable>true</boolean:valueSummable>
      <valueType>count</valueType>
      <displayAttributes>
        <selfFormat>number</selfFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="PMUHotspot" displayName="%PMUHotspot">
      <helpKeyword>configs.pmuhotspot_pmuhotspotdescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>true</boolean:valueSummable>
      <displayAttributes>
        <selfFormat>number</selfFormat>
        <totalFormat>number</totalFormat>
      </displayAttributes>
      <valueEval><![CDATA[
        query("/Clockticks") / queryAll("/DerivedQueryClockticks", true)
        ]]></valueEval>
      <description>%PMUHotspotDescription</description>
    </derivedQuery>
    <derivedQuery id="BadSpeculationuOps">
      <queryInherit>/CancelledPipelineSlots</queryInherit>
    </derivedQuery>
    <derivedQuery id="BackEndBounduOps">
      <queryInherit>/BackendBoundPipelineSlots</queryInherit>
    </derivedQuery>
    <derivedQuery id="FrontEndBounduOps">
      <queryInherit>/FrontendBoundPipelineSlots</queryInherit>
    </derivedQuery>
    <vectorQuery id="MPSMetrics">
       <queryRef>/CPI</queryRef>
       <queryRef>/MemBoundFraction</queryRef>
       <queryRef>/GFLOPsSummary</queryRef>
       <queryRef>/ParallelFs</queryRef>
    </vectorQuery>
    <vectorQuery id="MPSMetricsChecker">
       <queryRef>/CPI</queryRef>
    </vectorQuery>
    <derivedQuery id="DRAMPeakSysBW" displayName="%DRAMPeakSysBW">
      <helpKeyword>configs.drampeaksysbw_drampeaksysbwdescription</helpKeyword>
      <description>%DRAMPeakSysBWDescription</description>
      <valueType>bandwidth</valueType>
      <valueEval><![CDATA[
        $maxLocalBandwidthGB * 1000000000 * $packageCount
        ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="DRAMPeakLocalBW" displayName="%DRAMPeakLocalBW">
      <helpKeyword>configs.drampeaklocalbw_drampeaklocalbwdescription</helpKeyword>
      <description>%DRAMPeakLocalBWDescription</description>
      <valueType>bandwidth</valueType>
      <valueEval><![CDATA[
        $maxLocalBandwidthGB * 1000000000
        ]]></valueEval>
    </derivedQuery>
    <infoQuery id="BranchType" displayName="%BranchType">
      <dbPath>branch_data::dd_branch.attributes</dbPath>
      <displayDbPathSuffix>type.name</displayDbPathSuffix>
      <displayEval><![CDATA[ ( query("/BranchType") == "%Call" ) ? ( query("/BranchDirectFlag") == "%True" ? "Call" : "IndCall" ) :
                           (( query("/BranchType") == "%Jmp" ) ? ( query("/BranchDirectFlag") == "%True" ? "Jump" : "IndJump" ) :
                            ( query("/BranchType") == "%Ret" ? "Ret" : ( query("/BranchType") == "%Fallthrough" ? "Conditional" : "Other" ))
                            )
                            ]]>
      </displayEval>
    </infoQuery>
    <infoQuery id="BranchDirectFlag" displayName="%BranchDirectFlag">
      <dbPath>branch_data::dd_branch.attributes.is_direct</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
    </infoQuery>
    <countQuery id="BranchHitCount" displayName="%BranchHitCount">
      <instanceDbTable>branch_data::dd_branch</instanceDbTable>
      <instanceBandTable>branch_metrics</instanceBandTable>
    </countQuery>
    <instanceCountQuery id="BranchHitCountInstance" displayName="%BranchHitCount">
      <instanceDbTable>branch_data::dd_branch</instanceDbTable>
      <instanceBandTable>branch_metrics</instanceBandTable>
    </instanceCountQuery>
    <derivedQuery id="BranchHitCountDerived" displayName="%BranchHitCount">
      <valueEval><![CDATA[ query("/BranchHitCount") ]]></valueEval>
      <valueType>uint</valueType>
    </derivedQuery>
    <derivedQuery id="GeMetricBaseFraction">
        <valueType>ratio</valueType>
        <confidenceText>%PMUMetricConfidenceText</confidenceText>
        <displayAttributes>
            <selfFormat>_double_</selfFormat>
            <totalFormat>_double_</totalFormat>
        </displayAttributes>
        <minEval>0</minEval>
        <maxEval>1</maxEval>
        <notApplicableGroupings>
            <vectorQuery id="notApplicableGroupingsGroup">
                <vectorQueryInsert>/PMUMemoryObjectGroupingQueries</vectorQueryInsert>
            </vectorQuery>
        </notApplicableGroupings>
    </derivedQuery>
    <derivedQuery id="GeMetricBasePercentage">
        <queryInherit>/GeMetricBaseFraction</queryInherit>
        <displayAttributes>
            <selfFormat>ratio</selfFormat>
            <totalFormat>ratio</totalFormat>
        </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GeMetricBasePercentageNotClockticks">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
    </derivedQuery>
    <derivedQuery id="GeMetricBaseLocator">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <boolean:valueSummable>true</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery displayName="%PipelineSlotsForUnits" id="PipelineSlotsForUnits">
      <queryInherit>/SLOTS</queryInherit>
      <description>%PipelineSlotsDescription</description>
      <helpKeyword>configs.pipelineslotsforunits_pipelineslotsdescription</helpKeyword>
    </derivedQuery>
    <derivedQuery displayName="%UOPSForUnits" id="UOPSForUnits">
      <helpKeyword>configs.uopsforunits_uopsdescription</helpKeyword>
      <description>%UOPSDescription</description>
    </derivedQuery>
    <derivedQuery displayName="%ClksForUnit" id="ClksForUnit">
      <queryInherit>/DerivedClockticks</queryInherit>
      <helpKeyword>configs.clockticks_pipeline_slots</helpKeyword>
    </derivedQuery>
    <derivedQuery displayName="%ElapsedTimeForUnit" id="ElapsedTimeForUnit"/>
    <derivedQuery displayName="%SPFPForUnits" id="SPFPForUnits"/>
    <derivedQuery displayName="%DPFPForUnits" id="DPFPForUnits"/>
    <derivedQuery displayName="%PackedFPOpsForUnits" id="PackedFPOpsForUnits"/>
    <derivedQuery id="GeMetricBaseSlots">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <unitOfMeasureQueryId>PipelineSlotsForUnits</unitOfMeasureQueryId>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="GeMetricBaseClockticks">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <unitOfMeasureQueryId>ClksForUnit</unitOfMeasureQueryId>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery id="GeMetricBaseUops">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <unitOfMeasureQueryId>UOPSForUnits</unitOfMeasureQueryId>
      <boolean:valueSummable>false</boolean:valueSummable>
    </derivedQuery>
    <derivedQuery displayName="%HTisOnValue" id="GeMetricNA">
      <description>%HTisONMetric</description>
      <valueEval>"N/A with HT on"</valueEval>
      <valueType>string</valueType>
    </derivedQuery>
    <countQuery id="APerfMPerfDataCount">
      <instanceDbTable>aperf_mperf_data::dd_aperf_mperf</instanceDbTable>
      <instanceBandTable>dd_hw_context</instanceBandTable>
    </countQuery>
    <infoQuery id="APerfMperfDataType">
      <dbPath>aperf_mperf_data::dd_aperf_mperf</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="CPUFrequencyFromAPerfMPerf" displayName="%CPUFrequency">
      <description>%CPUFrequencyFromAPerfMPerfDescription</description>
      <valueType>frequency</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <displayAttributes>
        <timelineObjectType>interval</timelineObjectType>
        <minimumResolutionms>20</minimumResolutionms>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
      <valueEval><![CDATA[ $referenceFrequency * query("/APerfMPerfDataCount/APerfMperfDataType[APERF]") / query("/APerfMPerfDataCount/APerfMperfDataType[MPERF]") ]]></valueEval>
      <confidenceText>%PMUMetricConfidenceText</confidenceText>
    </derivedQuery>
    <derivedQuery id="L3CATPercentageAvailability" displayName="%L3CATAvailability">
      <valueType>ratio</valueType>
      <valueEval>
        <xsl:text>query("/PMUEventCount/PMUEventType[UNC_CAT_L3_MASK:intread]") / </xsl:text>
        <xsl:text>query("/PMUSampleCount/PMUEventType[UNC_CAT_L3_MASK:intread]") / </xsl:text>
        <xsl:value-of select="$L3CATSegments"></xsl:value-of>
      </valueEval>
      <displayAttributes>
        <timelineGraphColor>255,0,0</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="AvgL3CATPercentageAvailability" displayName="%AverageL3CATAvailability">
      <queryInherit>/L3CATPercentageAvailability</queryInherit>
    </derivedQuery>
    <derivedQuery id="L2CATPercentageAvailability" displayName="%L2CATAvailability">
      <valueType>ratio</valueType>
      <valueEval>
        <xsl:text>query("/PMUEventCount/PMUEventType[UNC_CAT_L2_MASK:intread]") / </xsl:text>
        <xsl:text>query("/PMUSampleCount/PMUEventType[UNC_CAT_L2_MASK:intread]") / </xsl:text>
        <xsl:value-of select="$L2CATSegments"></xsl:value-of>
      </valueEval>
      <displayAttributes>
        <timelineGraphColor>231,73,17</timelineGraphColor>
        <timelineFormat>line</timelineFormat>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="AvgL2CATPercentageAvailability" displayName="%AverageL2CATAvailability">
      <queryInherit>/L2CATPercentageAvailability</queryInherit>
    </derivedQuery>
  </queryLibrary>
</bag>
