<?xml version="1.0" encoding="UTF-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
>
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:str="http://exslt.org/strings" str:keep_str_namespace=""
    xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <xsl:variable name="unversalCollectorUsed">
      <xsl:choose>
        <xsl:when test="exsl:ctx('gpuFormatVersion', 0)=1 and exsl:ctx('gsimClockDuration', 0) = 0">true</xsl:when>
        <xsl:otherwise>false</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="unversalCollectorInMultirunMode">
      <xsl:choose>
        <xsl:when test="(exsl:ctx('gpuFormatVersion', 0) = 1) and (exsl:ctx('appRunsCount', 1) > 1)">true</xsl:when>
        <xsl:otherwise>false</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="samplerMultiplier">
      <xsl:choose>
        <xsl:when test="$gpuPerformanceMode='IVB_GT2'">2</xsl:when>
        <xsl:when test="$gpuPerformanceMode='IVB_GT1'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='IVB_GT2_TO_GT1_L'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='IVB_GT2_TO_GT1_U'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH'">2</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH_PERF'">2</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH_TO_GT2'">2</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH_TO_GT1_U'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH_TO_GT1_L'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTM'">2</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTM_TO_GT1_U'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTM_TO_GT1_L'">1</xsl:when>
        <xsl:when test="$gpuPerformanceMode='VLV_2'">1</xsl:when>
        <xsl:otherwise>1</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="memoryMultiplier">
      <xsl:choose>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH'">2</xsl:when>
        <xsl:when test="$gpuPerformanceMode='HSW_GTH_PERF'">2</xsl:when>
        <xsl:otherwise>1</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <infoQuery id="GPUGTPinInstructionType" displayName="%GPUGTPinInstructionType">
      <dbPath>gpu_gtpin_data::dd_sample.callsite.code_loc.asm.instr.type</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <displayAttributes>
        <boolean:hideZeroDataOnExpansion>true</boolean:hideZeroDataOnExpansion>
      </displayAttributes>
    </infoQuery>
    <infoQuery id="GPUGTPinEventType" displayName="%UncoreEventType">
      <dbPath>gpu_gtpin_data::dd_sample.event_type.name</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <displayAttributes>
        <boolean:unitDistinctQuery>true</boolean:unitDistinctQuery>
      </displayAttributes>
    </infoQuery>
    <countQuery id="GPUGTPinEventCount" displayName="%UncoreEventCount">
      <instanceDbTable>gpu_gtpin_data::dd_sample</instanceDbTable>
      <instanceBandTable>dd_compute_task</instanceBandTable>
      <displayAttributes>
        <selfFormat>count</selfFormat>
        <totalFormat>countAndBar</totalFormat>
        <boolean:allowCollapse>false</boolean:allowCollapse>
        <boolean:detailedFormulaDisplayRepresentation>false</boolean:detailedFormulaDisplayRepresentation>
      </displayAttributes>
    </countQuery>
    <instanceCountQuery id="GPUGTPinInstanceCount" displayName="%GpuComputeTaskCount">
      <instanceDbTable>gpu_gtpin_data</instanceDbTable>
      <instanceBandTable>dd_compute_task</instanceBandTable>
    </instanceCountQuery>
    <derivedQuery id="GPUGpuCoreClocksMetricDerived" displayName="GPU Core Clocks" description="The total number of GPU core clocks elapsed during the measurement.">
      <valueEval><![CDATA[ query("/GPUGpuCoreClocksMetric") * $EuCoresTotalCount ]]></valueEval>
      <valueType>int</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinCycles" displayName="%GPUGTPinCycles">
      <description>%GPUGTPinCyclesDesc</description>
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_CYCLES]") ]]></valueEval>
      <valueType>int</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinMemReadLatency" displayName="%GPUGTPinMemReadLatency">
      <description>%GPUGTPinMemReadLatencyDesc</description>
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_CYCLES.MEM_READ]") / query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION_EXECUTED.MEM_READ]") ]]></valueEval>
      <valueType>int</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinSyncLatency" displayName="%GPUGTPinSyncLatency">
      <description>%GPUGTPinSyncLatencyDesc</description>
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_CYCLES.SYNC]") / query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION_EXECUTED.SYNC]") ]]></valueEval>
      <valueType>int</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstLatencyExpanded" displayName="%GPUGTPinInstLatency">
      <description>%GPUGTPinInstLatencyDesc</description>
      <valueEval><![CDATA[ (query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_CYCLES.MEM_READ]") + query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_CYCLES.SYNC]")) / (query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION_EXECUTED.MEM_READ]") + query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION_EXECUTED.SYNC]")) ]]></valueEval>
      <valueType>int</valueType>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
        <boolean:allowCollapse>true</boolean:allowCollapse>
      </displayAttributes>
      <expand>
        <vectorQuery id="GPUGTPinInstLatencyVector">
          <queryRef>/GPUGTPinMemReadLatency</queryRef>
          <queryRef>/GPUGTPinSyncLatency</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstLatency" displayName="%GPUGTPinInstLatency">
      <queryInherit>/GPUGTPinInstLatencyExpanded</queryInherit>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstructionCount" displayName="%GPUGTPinInstructionCount">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION_EXECUTED]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstructionStaticMask" displayName="%GPUGTPinInstructionStaticMask">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION.EXEC_MASK]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstructionExecMask" displayName="%GPUGTPinInstructionExecMask">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_INSTRUCTION_EXECUTED.EXEC_MASK]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstructionSimdUtilization" displayName="%GPUGTPinInstructionSimdUtilization">
      <description>%GPUGTPinInstructionSimdUtilizationDesc</description>
      <valueEval><![CDATA[ ( query("/GPUGTPinInstructionStaticMask") ? query("/GPUGTPinInstructionExecMask") / query("/GPUGTPinInstructionStaticMask") : $NULL ) ]]></valueEval>
      <valueType>ratio</valueType>
      <displayAttributes>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstructionCountInCountAndBarFormat">
      <queryInherit>/GPUGTPinInstructionCount</queryInherit>
      <displayAttributes>
        <selfFormat>countAndBar</selfFormat>
        <totalFormat>countAndBar</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperationInt16Executed">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_OPERATIONS_EXECUTED.INT16]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperationInt32Executed">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_OPERATIONS_EXECUTED.INT32]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperationInt64Executed">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_OPERATIONS_EXECUTED.INT64]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperationHpExecuted">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_OPERATIONS_EXECUTED.FLOAT_HP]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperationSpExecuted">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_OPERATIONS_EXECUTED.FLOAT_SP]") ]]></valueEval>
      <valueType>count</valueType>
      <displayAttributes>
        <boolean:unitDistinctQuery>true</boolean:unitDistinctQuery>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperationDpExecuted">
      <valueEval><![CDATA[ query("/GPUGTPinEventCount/GPUGTPinEventType[GPU_OPERATIONS_EXECUTED.FLOAT_DP]") ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperations16bitExecuted">
      <valueEval><![CDATA[ ( query("/GPUGTPinOperationInt16Executed") + query("/GPUGTPinOperationHpExecuted") ) ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperations32bitExecuted">
      <valueEval><![CDATA[ ( query("/GPUGTPinOperationInt32Executed") + query("/GPUGTPinOperationSpExecuted") ) ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinOperations64bitExecuted">
      <valueEval><![CDATA[ ( query("/GPUGTPinOperationInt64Executed") + query("/GPUGTPinOperationDpExecuted") ) ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGTPinInstructionMix">
      <queryInherit>/GPUGTPinInstructionCountInCountAndBarFormat/GPUGTPinInstructionType</queryInherit>
      <description>%GPUGTPinInstructionMixDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUGTPinCyclesInPercentFormat" displayName="%GPUGTPinCycles">
      <queryInherit>/GPUGTPinCycles</queryInherit>
      <displayAttributes>
        <selfFormat>percentAndBar</selfFormat>
        <totalFormat>percentAndBar</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUGTPinDataAvailableForComputeTask">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ ( (queryOptional("/GPUGTPinCycles") > 0) || (queryOptional("/GPUGTPinInstructionCount") > 0) ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUGTPinComputeTaskTimeSummary" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUGTPinDataAvailableForComputeTask") ? query("/GPUComputeTaskTimeDerived") : $NULL) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUGTPinComputeTaskDurationSummary" displayName="%GpuComputeTaskDuration">
      <queryInherit>/GPUComputeTaskDuration</queryInherit>
      <valueEval><![CDATA[ (query("/GPUGTPinDataAvailableForComputeTask") ? query("/GPUComputeTaskDuration") : $NULL) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUGTPinComputeTaskCountSummary" displayName="%GpuComputeTaskCount">
      <queryInherit>/GPUComputeTaskCountDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUGTPinDataAvailableForComputeTask") ? query("/GPUComputeTaskCountDerived") : $NULL) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskTimeSummary" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeTaskTimeDerived/GPUComputeTaskPurpose[%ComputeComputingTaskPurpose]")) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskDurationSummary" displayName="%GpuComputeTaskDuration">
      <queryInherit>/GPUComputeTaskDuration</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeTaskDuration/GPUComputeTaskPurpose[%ComputeComputingTaskPurpose]")) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskCountSummary" displayName="%GpuComputeTaskCount">
      <queryInherit>/GPUComputeTaskCountDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeTaskCountDerived/GPUComputeTaskPurpose[%ComputeComputingTaskPurpose]") ) ]]></valueEval>
    </derivedQuery>
    <countQuery id="GPUEventCount" displayName="%UncoreEventCount">
      <instanceDbTable>gpu_data::dd_sample</instanceDbTable>
      <instanceBandTable>dd_gpu_node</instanceBandTable>
      <displayAttributes>
        <selfFormat>count</selfFormat>
        <boolean:allowCollapse>false</boolean:allowCollapse>
        <timelineObjectType>interval</timelineObjectType>
      </displayAttributes>
      <joinGroupInstanceDbTable>gpu_compute_task_data</joinGroupInstanceDbTable>
    </countQuery>
    <infoQuery id="GPUEventType" displayName="%UncoreEventType">
      <dbPath>gpu_data::dd_sample.uncore_event_type</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
      <confidenceTemplate><![CDATA[ ( ( ( query("/GPUSampleCount") > 5 ) ) ) ]]></confidenceTemplate>
    </infoQuery>
    <derivedQuery id="GPUTimeAllCoresCumulative" displayName="%GPUTime">
      <helpKeyword>configs.gputime_gputimedescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUEUActiveBase") + query("/GPUEUStalledBase")) ]]></valueEval>
      <description>%GPUTimeDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelinePenWidth>1</timelinePenWidth>
        <timelineGraphColor>0,0,0</timelineGraphColor>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>$logicalGPUCount</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUGpuTime" displayName="%GPUGpuTime">
      <description>%GPUGpuTimeDescription</description>
      <xsl:choose>
        <xsl:when test="exsl:IsNonEmptyTableExist('dma_packet_data')">
       <valueEval><![CDATA[ query("/GPUDXTime") ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
      <valueEval><![CDATA[ (query("/GPUUsageElapsedTimeWhenBusy")) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>time</valueType>
    </derivedQuery>
    <derivedQuery id="GPUGpuBusyBase" displayName="%GPUBusy">
      <helpKeyword>configs.gpubusy_gpubusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUGpuBusyMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[GPU Busy]") / (query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]"))]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUBusyDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>250,180,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>$logicalGPUCount</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUEUActiveBase" displayName="%GPUEUActiveShort">
      <helpKeyword>configs.gpueuactive_gpueuactivedescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUEuActiveMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <valueEval><![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[EuActive]") / query("/gSimGPUEventCountWeighted/gSimGPUEventType[EuActive]") / 10000]]></valueEval>
            </xsl:when>
            <xsl:otherwise>
          <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[Aggregated Core Array Active]") / ($gpuEuCount * query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]")) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUEUActiveDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,170,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUEUActive" displayName="%GPUEUActive">
      <queryInherit>/GPUEUActiveBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEUActiveBase/ConditionalEuActiveSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <joinGroupInstanceDbTable>gpu_compute_task_data</joinGroupInstanceDbTable>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUHPCEUActive" displayName="%GPUEUActiveShort">
      <queryInherit>/GPUEuActiveWhenBusyCounting</queryInherit>
    </derivedQuery>
    <xsl:if test="exsl:ctx('gpuCounters','none') = 'render-basic'">
      <derivedQuery id="GPUPsEuActiveBase" displayName="%GPUPsEuActive">
        <valueType>ratio</valueType>
        <queryInherit>/GPUPsEuActiveMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>0,170,0</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="GPUPsEuStallBase" displayName="%GPUPsEuStall">
        <valueType>ratio</valueType>
        <queryInherit>/GPUPsEuStallMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>170,0,0</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="GPUVsEuStallBase" displayName="%GPUVsEuStall">
        <valueType>ratio</valueType>
        <queryInherit>/GPUVsEuStallMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>170,0,0</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="GPUVsEuActiveBase" displayName="%GPUVsEuActive">
        <valueType>ratio</valueType>
        <queryInherit>/GPUVsEuActiveMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>0,170,0</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="GPUSamplesKilledInPsBase" displayName="%GPUSamplesKilledInPs">
        <valueType>count</valueType>
        <queryInherit>/GPUSamplesKilledInPsMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>186,85,211</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="GPUSamplesWrittenBase" displayName="%GPUSamplesWritten">
        <valueType>count</valueType>
        <queryInherit>/GPUSamplesWrittenMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>255,215,0</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="GPUSamplesBlendedBase" displayName="%GPUSamplesBlended">
        <valueType>count</valueType>
        <queryInherit>/GPUSamplesBlendedMetric</queryInherit>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>65,105,224</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
    </xsl:if>
    <derivedQuery id="GPUEUStalledBase" displayName="%GPUEUStalledShort">
      <helpKeyword>configs.gpueustalled_gpueustalleddescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUEuStallMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <valueEval><![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[EuStalled]") / query("/gSimGPUEventCountWeighted/gSimGPUEventType[EuStalled]") / 10000]]></valueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[Aggregated Core Array Stalled]") / ($gpuEuCount * query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUEUStalledDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>170,0,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUEUStalled" displayName="%GPUEUStalled">
      <queryInherit>/GPUEUStalledBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEUStalledBase/ConditionalEuStallSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <issueEval><![CDATA[ (query("/GPUEUStalled") > 0.2) * (query("/GPUComputeTaskTime") > 0) ]]></issueEval>
      <issueText>%GPUEUStalledIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUHPCEUStalled" displayName="%GPUEUStalledShort">
      <queryInherit>/GPUEuStallWhenBusyCounting</queryInherit>
      <issueEval><![CDATA[ (query("/GPUHPCEUStalled") > 0.2) * (query("/GPUEUAvgUtilizationWhenBusyCounting") < 0.8) ]]></issueEval>
      <issueText>%GPUEUStalledIssueText</issueText>
    </derivedQuery>
    <derivedQuery id="GPUEUIdleBase" displayName="%GPUEUIdleShort">
      <helpKeyword>configs.gpueuidle_gpueuidledescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUEUActiveBase") + query("/GPUEUStalledBase")) <= 1 ? ((query("/GPUEUActiveBase") + query("/GPUEUStalledBase")) >=0 ? 1 - (query("/GPUEUActiveBase") + query("/GPUEUStalledBase")) : (query("/GPUEUActiveBase") + query("/GPUEUStalledBase"))) : 0.0 ]]></valueEval>
      <description>%GPUEUIdleDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>180,180,180</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUEUIdle" displayName="%GPUEUIdle">
        <queryInherit>/GPUEUIdleBase</queryInherit>
        <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ ( query("/GPUEUIdleBase/ConditionalEuIdleSamplesExist[%True]") ) ]]></valueEval>
        </xsl:if>
      <issueEval><![CDATA[ (query("/GPUEUIdle") > 0.05) * (query("/GPUComputeTaskTime") > 0) ]]></issueEval>
      <issueText>%GPUEUIdleIssueText</issueText>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <confidenceEval><![CDATA[ (query("/gsimGPUSampleCount/gSimGPUEventType[EuActive]") > 5) ]]></confidenceEval>
        </xsl:when>
        <xsl:otherwise>
          <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[EuActive]") > 5) ]]></confidenceEval>
        </xsl:otherwise>
      </xsl:choose>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUHPCEUIdle" displayName="%GPUEUIdleShort">
      <queryInherit>/GPUEuIdleWhenBusyCounting</queryInherit>
      <issueEval><![CDATA[ (query("/GPUHPCEUIdle") > 0.05) * (query("/GPUEUAvgUtilizationWhenBusyCounting") < 0.8) ]]></issueEval>
      <issueText>%GPUEUIdleIssueText</issueText>
    </derivedQuery>
    <derivedQuery id="GPUEUStateGridSection" displayName="%GPUEUState">
      <valueEval>""</valueEval>
      <valueType>string</valueType>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
        <boolean:allowCollapse>false</boolean:allowCollapse>
      </displayAttributes>
      <expand>
        <vectorQuery id="GPUEUStateGroupExpanded">
          <queryRef>/GPUHPCEUActive</queryRef>
          <queryRef>/GPUHPCEUStalled</queryRef>
          <queryRef>/GPUHPCEUIdle</queryRef>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="IsGPUBusy">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUGpuBusyBase") > 0 ? 1 : 0) ]]></valueEval>
    </derivedQuery>
    <infoQuery id="ConditionalGPUBusyData">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_gpu_busy</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <infoQuery id="ConditionalGPUBusyDataGrouping" displayName="%PacketStageNew">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_gpu_busy</dbPath>
      <displayDbPathSuffix>grouping_name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="GPUEUNotActiveBase">
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ 1 - query("/GPUEUActiveBase")]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
      <valueEval><![CDATA[ (query("/GPUEUStalledBase") + query("/GPUEUIdleBase")) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="IsGPUBusyAndEuStallSamplesExist">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (((query("/GPUGpuBusyBase") > 0) && (query("/IsEuStallSamplesExist") > 0)) ? 1 : 0) ]]></valueEval>
    </derivedQuery>
    <infoQuery id="ConditionalGPUBusyAndEuStallSamplesExist">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_GPUBusyAndEuStall_exist</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="GPUEUNotActiveWhenBusyIssue">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ (query("/GPUEUNotActiveWhenBusy") > 0.2) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEUNotActiveGSim" displayName="%GPUEUNotActiveWhenBusy">
      <helpKeyword>configs.gpueunotactivewhenbusy_gpueunotactivewhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <queryInherit>/GPUEUNotActiveBase</queryInherit>
      <description>%GPUEUNotActiveWhenBusyDescription</description>
      <issueEval><![CDATA[ query("/GPUEUNotActiveBase") > 0.2 ]]></issueEval>
      <issueText>%GPUEUNotActiveWhenBusyIssueText</issueText>
      <unitOfMeasureQueryId>GPUElapsedTimeWhenBusyForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUEUNotActiveWhenBusy" displayName="%GPUEUNotActiveWhenBusy">
      <helpKeyword>configs.gpueunotactivewhenbusy_gpueunotactivewhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUEUNotActiveBase/ConditionalGPUBusyAndEuStallSamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <queryInherit>/GPUEUNotActiveBase</queryInherit>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ (query("/GPUEUNotActiveBase/ConditionalGPUBusyData[%True]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUEUNotActiveWhenBusyDescription</description>
      <issueEval><![CDATA[ query("/GPUEUNotActiveWhenBusyIssue") ]]></issueEval>
      <issueText>%GPUEUNotActiveWhenBusyIssueText</issueText>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ ((query("/GPUSampleCount/GPUEventType[EuIdle]") > 5) || (query("/GPUSampleCount/GPUEventType[EuStall]") > 5)) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <unitOfMeasureQueryId>GPUElapsedTimeWhenBusyForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUEUNotActiveWhenBusyInKernel" displayName="%GPUEUNotActiveWhenBusy">
      <helpKeyword>configs.gpueunotactivewhenbusy_gpueunotactivewhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUEUNotActiveBase/ConditionalGPUBusyAndEuStallSamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <queryInherit>/GPUEUNotActiveBase</queryInherit>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ (query("/GPUEUNotActiveBase/ConditionalGPUBusyData[%True]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUEUNotActiveWhenBusyDescriptionInKernel</description>
      <issueEval><![CDATA[ query("/GPUEUNotActiveWhenBusyIssue") ]]></issueEval>
      <issueText>%GPUEUNotActiveWhenBusyIssueText</issueText>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ ((query("/GPUSampleCount/GPUEventType[EuIdle]") > 5) || (query("/GPUSampleCount/GPUEventType[EuStall]") > 5)) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="IsGPUBusyAndEuThreadOccupancySamplesExist">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (((query("/GPUGpuBusyBase") > 0) && (query("/IsEuThreadOccupancySamplesExist") > 0)) ? 1 : 0) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEUActiveWhenBusy">
      <queryInherit>/GPUEUActive</queryInherit>
      <valueEval><![CDATA[(query("/GPUEUActiveBase/ConditionalGPUBusyData[%True]"))]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEUStalledWhenBusy">
      <queryInherit>/GPUEUStalled</queryInherit>
      <valueEval><![CDATA[(query("/GPUEUStalledBase/ConditionalGPUBusyData[%True]"))]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEUIdleWhenBusy">
      <queryInherit>/GPUEUIdle</queryInherit>
      <valueEval><![CDATA[(query("/GPUEUIdleBase/ConditionalGPUBusyData[%True]"))]]></valueEval>
    </derivedQuery>
    <timeQuery id="GPUUsageElapsedTime">
      <instanceDbTable>conditional_gpu_data::dd_conditional_metric</instanceDbTable>
      <displayAttributes>
        <selfFormat>time</selfFormat>
        <totalFormat>timeAndBar</totalFormat>
        <sortType>descending</sortType>
      </displayAttributes>
      <instanceBandTable>dd_gpu_node</instanceBandTable>
    </timeQuery>
    <derivedQuery id="GPUUsageElapsedTimeWhenBusy">
      <valueType>time</valueType>
      <valueEval><![CDATA[ (query("/GPUUsageElapsedTime/ConditionalGPUBusyData[%True]")) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUTimePrettyPrinted" displayName="%Time">
      <description>%GPUHPCActiveTimeDescription</description>
      <queryInherit>/GPUUtilization</queryInherit>
      <valueType>string</valueType>
      <valueEval><![CDATA[ %#(query("/GPUUsageElapsedTimeWhenBusy") / query("/GPUElapsedTime")) + " (" + t#query("/GPUUsageElapsedTimeWhenBusy") + ")" ]]></valueEval>
      <unitOfMeasureQueryId>GPUElapsedTimeForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUUsageForHPCPC" displayName="%GPUHPCActiveTime">
      <queryInherit>/GPUUtilization</queryInherit>
      <valueEval><![CDATA[query("/GPUUsageElapsedTimeWhenBusy") / query("/GPUElapsedTime")]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEUAvgUtilization" displayName="%GPUHPCEUAvgUtilization">
      <queryInherit>/GPUEUActive</queryInherit>
      <valueEval><![CDATA[query("/GPUEUActiveWhenBusy")]]></valueEval>
      <issueEval><![CDATA[ query("/GPUEUAvgUtilization") < 0.8]]></issueEval>
      <issueText>%GPUEUNotActiveWhenBusyIssueText</issueText>
    </derivedQuery>
    <derivedQuery id="GPUEuAvgCpiRate" displayName="%GPUHPCEuAvgCpiRate">
      <queryInherit>/GPUEuAvgIpcRate</queryInherit>
      <description>%GPUHPCEuAvgCpiRateDescription</description>
      <valueEval><![CDATA[ 1 / ( query("/GPUEuAvgIpcRate") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEuAlternativeIpcRate">
      <queryInherit>/GPUEuAvgIpcRate</queryInherit>
      <valueEval><![CDATA[ ( query("/GPUEventCount/GPUEventType[Fpu0Active]") + query("/GPUEventCount/GPUEventType[Fpu1Active]") ) / ($gpuEuCoresTotalCount * query("/GPUEventCount/GPUEventType[GpuCoreClocks]") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUEuAlternativeCpiRate" displayName="%GPUHPCEuAltAvgCpiRate">
      <queryInherit>/GPUEuAvgCpiRate</queryInherit>
      <description>%GPUHPCEuAltAvgCpiRateDescription</description>
      <valueEval><![CDATA[ 1 / query("/GPUEuAlternativeIpcRate") ]]></valueEval>
    </derivedQuery>
    <infoQuery id="ConditionalGPUBusyAndEuThreadOccupancySamplesExist">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_GPUBusyAndEuThreadOccupancy_exist</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="GPUThreadOccupancyWhenBusyIssue">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ (query("/GPUThreadOccupancyWhenBusy") < 0.9) && (query("/GPUEUNotActiveBase") > 0.2) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="OccupancyLowIssue">
      <valueType>bool</valueType>
      <valueEval>
        <![CDATA[ (query("/Occupancy") < 1.5) ]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="OccupancyHighIssue">
      <valueType>bool</valueType>
      <valueEval>
        <![CDATA[ (query("/Occupancy") > 10000) ]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="OccupancyNoIssue">
      <valueType>bool</valueType>
      <valueEval>
        <![CDATA[ ( (query("/Occupancy") >= 1.5) && (query("/Occupancy") <= 10000) ) ]]>
      </valueEval>
    </derivedQuery>
    <derivedQuery id="GPUThreadOccupancyWhenBusy" displayName="%GPUThreadOccupancyWhenBusy">
      <helpKeyword>configs.gputhreadoccupancywhenbusy_gputhreadoccupancywhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUEuThreadOccupancyBase/ConditionalGPUBusyAndEuThreadOccupancySamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <queryInherit>/GPUEuThreadOccupancyBase</queryInherit>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ (query("/GPUEuThreadOccupancyBase/ConditionalGPUBusyData[%True]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUThreadOccupancyWhenBusyDescription</description>
      <issueEval><![CDATA[ query("/GPUThreadOccupancyWhenBusyIssue") ]]></issueEval>
      <issueText>%GPUThreadOccupancyWhenBusyIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <unitOfMeasureQueryId>GPUPeakForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUThreadOccupancyWhenBusyInKernel" displayName="%GPUThreadOccupancyWhenBusy">
      <helpKeyword>configs.gputhreadoccupancywhenbusy_gputhreadoccupancywhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUEuThreadOccupancyBase/ConditionalGPUBusyAndEuThreadOccupancySamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <queryInherit>/GPUEuThreadOccupancyBase</queryInherit>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ (query("/GPUEuThreadOccupancyBase/ConditionalGPUBusyData[%True]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUThreadOccupancyWhenBusyDescriptionInKernel</description>
      <issueEval><![CDATA[ query("/GPUThreadOccupancyWhenBusyIssue") ]]></issueEval>
      <issueText>%GPUThreadOccupancyWhenBusyIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="IsGPUBusyAndSamplerBusySamplesExist">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (((query("/GPUGpuBusyBase") > 0) && (query("/IsSamplerBusySamplesExist") > 0)) ? 1 : 0) ]]></valueEval>
    </derivedQuery>
    <infoQuery id="ConditionalGPUBusyAndSamplerBusySamplesExist">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_GPUBusyAndSamplerBusy_exist</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="GPUSamplerBusyWhenBusyIssue">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ (query("/GPUSamplerBusyWhenBusy") > 0.95) && (query("/GPUEUNotActiveBase") > 0.2) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUSamplerBusyWhenBusy" displayName="%GPUSamplerBusyWhenBusy">
      <helpKeyword>configs.gpusamplerbusywhenbusy_gpusamplerbusywhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUSamplerBusyBase/ConditionalGPUBusyAndSamplerBusySamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ (query("/GPUSamplerBusyBase/ConditionalGPUBusyData[%True]")) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUSamplerBusyWhenBusyDescription</description>
      <issueEval><![CDATA[ query("/GPUSamplerBusyWhenBusyIssue") ]]></issueEval>
      <issueText>%GPUSamplerBusyWhenBusyIssueText</issueText>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[SamplersBusy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <unitOfMeasureQueryId>GPUPeakForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUSamplerBusyWhenBusyInKernel" displayName="%GPUSamplerBusyWhenBusy">
      <helpKeyword>configs.gpusamplerbusywhenbusy_gpusamplerbusywhenbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUSamplerBusyBase/ConditionalGPUBusyAndSamplerBusySamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ (query("/GPUSamplerBusyBase/ConditionalGPUBusyData[%True]")) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUSamplerBusyWhenBusyDescriptionInKernel</description>
      <issueEval><![CDATA[ query("/GPUSamplerBusyWhenBusyIssue") ]]></issueEval>
      <issueText>%GPUSamplerBusyWhenBusyIssueText</issueText>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[SamplersBusy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="Occupancy">
      <valueType>double</valueType>
      <valueEval><![CDATA[ query("/GPUComputeGlobalSize") / query("/GPUComputeSimdWidthDerived") / (query("/GPUEUCount") * query("/GPUMaxEUThreadCount")) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskTimeWhenLowOccupancy" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeGlobalDimDerived") ? (query("/GPUThreadOccupancyWhenBusyIssue") ? query("/GPUComputeTaskTimeDerived") : $NULL) : ((query("/GPUComputeGlobalDimDerived") == "") ? $NULL : query("/GPUComputeTaskTimeDerived"))) ]]></valueEval>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[EuThreadOccupancy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%GPUOccupancyNotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="IsGPUComputeTaskWithOccupancyIssues" displayName="%GpuComputingTaskTimeTotal">
      <valueEval><![CDATA[ (query("/GPUComputeGlobalDimDerived") ? (query("/GPUThreadOccupancyWhenBusyIssue") ? query("/GPUComputeTaskTimeDerived") : $NULL) : ((query("/GPUComputeGlobalDimDerived") == "") ? $NULL : query("/GPUComputeTaskTimeDerived"))) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeGlobalDimWhenLowOccupancy" displayName="%ComputingGlobalSize">
      <queryInherit>/GPUComputeGlobalDimDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUThreadOccupancyWhenBusyIssue") ? query("/GPUComputeGlobalDimDerived") : $NULL) ]]></valueEval>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[EuThreadOccupancy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%GPUOccupancyNotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUComputeLocalDimWhenLowOccupancy" displayName="%ComputingLocalSize">
      <queryInherit>/GPUComputeLocalDimDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUThreadOccupancyWhenBusyIssue") ? query("/GPUComputeLocalDimDerived") : $NULL) ]]></valueEval>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[EuThreadOccupancy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%GPUOccupancyNotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUComputeSimdWidthWhenLowOccupancy" displayName="%ComputingSimdWidth">
      <queryInherit>/GPUComputeSimdWidthDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUThreadOccupancyWhenBusyIssue") ? query("/GPUComputeSimdWidthDerived") : $NULL) ]]></valueEval>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[EuThreadOccupancy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%GPUOccupancyNotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskTimeWhenSamplerOverutilized" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeGlobalDimDerived") ? (query("/GPUSamplerBusyWhenBusyIssue") ? query("/GPUComputeTaskTimeDerived") : $NULL) : ((query("/GPUComputeGlobalDimDerived") == "") ? $NULL : query("/GPUComputeTaskTimeDerived"))) ]]></valueEval>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[SamplersBusy]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%GPUSamplerBusyNotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GSimL3BandwidthConfidence">
        <valueEval>
            <![CDATA[ ((query("/gsimGPUSampleCount/gSimGPUEventType[NormalRdByteCount9]") > 5) ||
                       (query("/gsimGPUSampleCount/gSimGPUEventType[NormalWrByteCount9]") > 5) ||
                       (query("/gsimGPUSampleCount/gSimGPUEventType[NormalRdByteCount12]") > 5) ||
                       (query("/gsimGPUSampleCount/gSimGPUEventType[NormalWrByteCount12]") > 5) ||
                       (query("/gsimGPUSampleCount/gSimGPUEventType[L3SentBank]") > 5) ) ]]>
        </valueEval>
    </derivedQuery>
    <derivedQuery id="GPUL3BandwidthWhenBusy" displayName="%GpuL3Bound">
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUL3ShaderBDWMaxRatio/ConditionalL3ShaderThroughputSamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <queryInherit>/GPUL3ShaderBDWMaxRatio</queryInherit>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ (query("/GPUL3ShaderBDWMaxRatio/ConditionalGPUBusyData[%True]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <issueEval><![CDATA[ query("/GPUL3BandwidthWhenBusyIssue") ]]></issueEval>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <confidenceEval><![CDATA[ query("/GSimL3BandwidthConfidence") ]]></confidenceEval>
        </xsl:when>
        <xsl:otherwise>
          <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[L3ShaderThroughput]") > 5) ]]></confidenceEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GpuL3BoundDescription</description>
      <issueText>%GpuL3BoundIssueText</issueText>
      <confidenceText>%GPUMetricConfidenceText</confidenceText>
      <unitOfMeasureQueryId>GPUPeakForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUL3BandwidthWhenBusyInKernel" displayName="%GpuL3Bound">
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ (query("/GPUL3ShaderBDWMaxRatio/ConditionalL3ShaderThroughputSamplesExist[%True]")) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <queryInherit>/GPUL3ShaderBDWMaxRatio</queryInherit>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ (query("/GPUL3ShaderBDWMaxRatio/ConditionalGPUBusyData[%True]")) ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <issueEval><![CDATA[ query("/GPUL3BandwidthWhenBusyIssue") ]]></issueEval>
      <description>%GpuL3BoundDescriptionInKernel</description>
      <issueText>%GpuL3BoundIssueText</issueText>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <confidenceEval><![CDATA[ query("/GSimL3BandwidthConfidence") ]]></confidenceEval>
        </xsl:when>
        <xsl:otherwise>
          <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[L3ShaderThroughput]") > 5) ]]></confidenceEval>
        </xsl:otherwise>
      </xsl:choose>
      <confidenceText>%GPUMetricConfidenceText</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUL3BandwidthWhenBusyIssue">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ ((query("/GPUL3BandwidthWhenBusy") > 0.6) && (query("/GPUEUNotActiveBase") > 0.2)) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUFPUIssue">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ ((query("/GPUEuFpuBothActive") > 0.8) && (query("/GPUEUNotActiveBase") < 0.2)) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskTimeWhenHighL3Bandwidth" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeGlobalDimDerived") ? (query("/GPUL3BandwidthWhenBusyIssue") ? query("/GPUComputeTaskTimeDerived") : $NULL) : ((query("/GPUComputeGlobalDimDerived") == "") ? $NULL : query("/GPUComputeTaskTimeDerived"))) ]]></valueEval>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <confidenceEval><![CDATA[ query("/GSimL3BandwidthConfidence") ]]></confidenceEval>
        </xsl:when>
        <xsl:otherwise>
          <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[L3ShaderThroughput]") > 5) ]]></confidenceEval>
        </xsl:otherwise>
      </xsl:choose>
      <confidenceText>%GPUL3BandwidthNotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskTimeWhenGPUEuFpuBothActive" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeGlobalDimDerived") ? (query("/GPUFPUIssue") ? query("/GPUComputeTaskTimeDerived") : $NULL) : ((query("/GPUComputeGlobalDimDerived") == "") ? $NULL : query("/GPUComputeTaskTimeDerived"))) ]]></valueEval>
    </derivedQuery>
    <derivedQuery displayName="%GPUElapsedTimeForUnit" id="GPUElapsedTimeForUnit">
    </derivedQuery>
    <derivedQuery displayName="%GPUElapsedTimeWhenBusyForUnit" id="GPUElapsedTimeWhenBusyForUnit">
    </derivedQuery>
    <derivedQuery displayName="%GPUPeakForUnit" id="GPUPeakForUnit">
    </derivedQuery>
    <derivedQuery id="GPUDRAMBandwidthBoundUncore">
      <queryInherit>/GeMetricBasePercentage</queryInherit>
      <valueEval><![CDATA[ ( query("/HighDRAMBandwidthUtilizationElapsedTime") / query("/GPUElapsedTime") ) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUDRAMBoundWhenBusy" displayName="%GPUDRAMBoundWhenBusy">
      <valueEval><![CDATA[ (query("/GPUDRAMBandwidthBoundUncore/ConditionalGPUBusyData[%True]")) ]]></valueEval>
      <useGlobalGrouper>true</useGlobalGrouper>
      <issueEval><![CDATA[ query("/GPUDRAMBoundWhenBusyIssue") ]]></issueEval>
      <description>%GPUDRAMBoundWhenBusyDescription</description>
      <issueText>%GPUDRAMBoundWhenBusyIssueText</issueText>
      <valueType>ratio</valueType>
      <unitOfMeasureQueryId>GPUElapsedTimeForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUDRAMBoundWhenBusyInKernel" displayName="%GPUDRAMBoundWhenBusy">
      <valueEval><![CDATA[ (query("/GPUDRAMBandwidthBoundUncore/ConditionalGPUBusyData[%True]")) ]]></valueEval>
      <useGlobalGrouper>true</useGlobalGrouper>
      <issueEval><![CDATA[ query("/GPUDRAMBoundWhenBusyIssue") ]]></issueEval>
      <description>%GPUDRAMBoundWhenBusyDescription</description>
      <issueText>%GPUDRAMBoundWhenBusyIssueText</issueText>
      <valueType>ratio</valueType>
    </derivedQuery>
    <derivedQuery id="GPUDRAMBoundWhenBusyIssue">
      <valueType>bool</valueType>
      <valueEval><![CDATA[ ((query("/GPUDRAMBoundWhenBusy") > 0.1) && (query("/GPUEUNotActiveBase") > 0.2)) ]]></valueEval>
    </derivedQuery>
    <derivedQuery id="GPUComputeTaskTimeWhenHighDRAMBandwidth" displayName="%GpuComputingTaskTimeTotal">
      <queryInherit>/GPUComputeTaskTimeDerived</queryInherit>
      <valueEval><![CDATA[ (query("/GPUComputeGlobalDimDerived") ? (query("/GPUDRAMBoundWhenBusyIssue") ? query("/GPUComputeTaskTimeDerived") : $NULL) : ((query("/GPUComputeGlobalDimDerived") == "") ? $NULL : query("/GPUComputeTaskTimeDerived"))) ]]></valueEval>
    </derivedQuery>
    <infoQuery id="GPUCoreFrequency" displayName="%GPUCoreFrequency">
      <valueType>frequency</valueType>
      <dbPath>gpu_freq_data::dd_gpu_freq</dbPath>
      <displayDbPathSuffix>freq_hz</displayDbPathSuffix>
      <description>%GPUCoreFrequencyDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>20,20,20</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
      </displayAttributes>
    </infoQuery>
    <derivedQuery id="GPUCSThreadIssuedCountBase" displayName="%GPUCSThreadIssuedCount">
      <helpKeyword>configs.gpucsthreadissuedcount_gpucsthreadissuedcountdescription</helpKeyword>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[ComputingThreadsStarted]") ]]></valueEval>
        </xsl:when>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUCsThreadsMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[Compute Shader Threads Loaded Count]") ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <valueType>count</valueType>
      <description>%GPUCSThreadIssuedCountDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUCSThreadIssuedCount" displayName="%GPUCSThreadIssuedCount">
      <queryInherit>/GPUCSThreadIssuedCountBase</queryInherit>
        <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
          <valueEval><![CDATA[ ( query("/GPUCSThreadIssuedCountBase/ConditionalCsThreadsSamplesExist[%True]") ) ]]></valueEval>
        </xsl:if>
      <issueEval><![CDATA[ ( (query("/GPUCSThreadIssuedCount") / (query("/GPUComputeTaskTime") ) ) > 20000000 ) * (query("/GPUEUStalled") > 0.1) ]]></issueEval>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUCSThreadIssuedBase" displayName="%GPUCSThreadIssued">
      <helpKeyword>configs.gpucsthreadissued_gpucsthreadissueddescription</helpKeyword>
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/GPUCSThreadIssuedCountBase") ]]></valueEval>
      <description>%GPUCSThreadIssuedDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>20,20,20</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <timelineValueFormat>LargeNumber</timelineValueFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUCSThreadIssuedRate" displayName="%GPUCSThreadIssued">
      <helpKeyword>configs.gpucsthreadissued_gpucsthreadissueddescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/GPUCSThreadIssuedCount") / (query("/GPUElapsedTime") ) ) ]]></valueEval>
      <description>%GPUCSThreadIssuedDescription</description>
      <issueEval><![CDATA[ ( (query("/GPUCSThreadIssuedCount") / (query("/GPUElapsedTime") ) ) > 20000000 ) * (query("/GPUEUStalled") > 0.1) ]]></issueEval>
      <issueText>%GPUCSThreadIssuedIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <displayAttributes>
        <selfFormat>LargeNumber</selfFormat>
        <totalFormat>LargeNumber</totalFormat>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUSamplerBusyBase" displayName="%GPUSamplerBusy">
      <helpKeyword>configs.gpusamplerbusy_gpusamplerbusydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUSamplersBusyMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                ((query("/GPUEventCount/GPUEventType[Sampler Busy Slice 0]") + query("/GPUEventCount/GPUEventType[Sampler Busy Slice 1]")) / ({$samplerMultiplier} * query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]")))
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                ((query("/GPUEventCount/GPUEventType[Sampler Busy Slice 0]")) / ({$samplerMultiplier} * query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]")))
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$samplerMultiplier}', string($samplerMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <description>%GPUSamplerBusyDescriptionGSim</description>
          <confidenceEval><![CDATA[ (query("/gsimGPUSampleCount/gSimGPUEventType[SamplersBusy]") > 5) ]]></confidenceEval>
        </xsl:when>
        <xsl:otherwise>
          <description>%GPUSamplerBusyDescription</description>
          <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[SamplersBusy]") > 5) ]]></confidenceEval>
        </xsl:otherwise>
      </xsl:choose>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>60,60,60</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <diagramObjectId>SamplerBusySlot</diagramObjectId>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUSamplerBusy" displayName="%GPUSamplerBusy">
      <queryInherit>/GPUSamplerBusyBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUSamplerBusyBase/ConditionalSamplerBusySamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <issueEval><![CDATA[ (query("/GPUSamplerBusy") > 0.98) * (query("/GPUComputeTaskTime") > 0) ]]></issueEval>
      <issueText>%GPUSamplerBusyIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUSamplerBottleneckBase" displayName="%GPUSamplerBottleneck">
      <helpKeyword>configs.gpusamplerbottleneck_gpusamplerbottleneckdescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUSamplerBottleneckMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                ((query("/GPUEventCount/GPUEventType[Sampler Stalled on Fetch from Memory Slice 0]") + query("/GPUEventCount/GPUEventType[Sampler Stalled on Fetch from Memory Slice 1]")) / ({$samplerMultiplier} * query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]")))
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                ((query("/GPUEventCount/GPUEventType[Sampler Stalled on Fetch from Memory Slice 0]")) / ({$samplerMultiplier} * query("/GPUEventCount/GPUEventType[GPU CS Core Clockticks]")))
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$samplerMultiplier}', string($samplerMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUSamplerBottleneckDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>170,0,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <diagramObjectId>SamplerBottleneckSlot</diagramObjectId>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUSamplerBottleneck" displayName="%GPUSamplerBottleneck">
      <queryInherit>/GPUSamplerBottleneckBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUSamplerBottleneckBase/ConditionalSamplerBottleneckSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <issueEval><![CDATA[ (query("/GPUSamplerBottleneck") > 0.01) * (query("/GPUComputeTaskTime") > 0) ]]></issueEval>
      <issueText>%GPUSamplerBottleneckIssueText</issueText>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[SamplerBottleneck]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerThroughputGB" displayName="%GPUL3SamplerThroughputShort">
      <helpKeyword>configs.gpul3samplerthroughput_gpul3samplerthroughputdescription</helpKeyword>
      <valueType>double</valueType>
      <queryInherit>/GPUL3SamplerThroughputMetric</queryInherit>
      <xsl:if test="exsl:ctx('gsimClockDuration', 0) > 0">
        <valueEval>
          <![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[SamplerInputRequests]") * 64 / 1000000000 ]]>
        </valueEval>
      </xsl:if>
      <description>%GPUL3SamplerThroughputDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>207,236,183</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerBandwidthBase" displayName="%GPUL3SamplerThroughput">
      <helpKeyword>configs.gpul3samplerthroughput_gpul3samplerthroughputdescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUL3SamplerThroughputGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <description>%GPUL3SamplerThroughputDescriptionGSim</description>
        </xsl:when>
        <xsl:otherwise>
      <description>%GPUL3SamplerThroughputDescription</description>
        </xsl:otherwise>
      </xsl:choose>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerBandwidth" displayName="%GPUL3SamplerThroughput">
      <queryInherit>/GPUL3SamplerBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUL3SamplerBandwidthBase/ConditionalSamplerL1MissesSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUL3SamplerBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerBDWMax" displayName="%GPUL3SamplerThroughputMaxGB">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUL3SamplerThroughputMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%"GPUL3SamplerBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerBDWAbsMax" displayName="%GPUL3SamplerThroughputMaxGB">
      <valueType>double</valueType>
      <valueEval>$gpuL3SamplerThroughputAbsMaxValue</valueEval>
      <description>%"GPUL3SamplerBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpubdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUL3SamplerBandwidth") / query("/GPUL3SamplerBDWMax") ) ]]></valueEval>
      <description>%GPUBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3SamplerBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpubdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUL3SamplerBandwidth") / query("/GPUL3SamplerBDWAbsMax") ) ]]></valueEval>
      <description>%GPUBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderThroughputGB" displayName="%GPUL3ShaderThroughputShort">
      <helpKeyword>configs.gpul3shaderthroughput_gpul3shaderthroughputdescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval>
            <![CDATA[ (query("/gSimGPUEventCount/gSimGPUEventType[NormalRdByteCount9]") + query("/gSimGPUEventCount/gSimGPUEventType[NormalWrByteCount9]")
            + query("/gSimGPUEventCount/gSimGPUEventType[NormalRdByteCount12]") + query("/gSimGPUEventCount/gSimGPUEventType[NormalWrByteCount12]") +
            query("/gSimGPUEventCount/gSimGPUEventType[L3SentBank]")) * 64 / 1000000000 ]]>
          </valueEval>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/GPUL3ShaderThroughputMetric</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUL3ShaderThroughputDescription</description>
      <issues>
        <issue>
          <issueEval><![CDATA[ query("/GPUL3BandwidthWhenBusyIssue") ]]></issueEval>
          <issueText>%GpuL3BoundIssueText</issueText>
        </issue>
      </issues>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>78,119,79</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderBandwidthBase" displayName="%GPUL3ShaderThroughput">
      <helpKeyword>configs.gpul3shaderthroughput_gpul3shaderthroughputdescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUL3ShaderThroughputGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUL3ShaderThroughputDescription</description>
      <displayAttributes>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderBandwidth" displayName="%GPUL3ShaderThroughput">
      <queryInherit>/GPUL3ShaderBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUL3ShaderBandwidthBase/ConditionalL3ShaderThroughputSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <confidenceEval><![CDATA[ query("/GSimL3BandwidthConfidence") ]]></confidenceEval>
        </xsl:when>
        <xsl:otherwise>
          <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[L3ShaderThroughput]") > 5) ]]></confidenceEval>
        </xsl:otherwise>
      </xsl:choose>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <issues>
        <issue>
          <issueEval><![CDATA[ query("/GPUL3BandwidthWhenBusyIssue") ]]></issueEval>
          <issueText>%GpuL3BoundIssueText</issueText>
        </issue>
      </issues>
      <percentBases>
        <queryRef>/GPUL3ShaderBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderBDWMax" displayName="%GPUL3ShaderThroughputMetricMaxGB">
      <helpKeyword>configs.gpusharedlocalmemoryread_gpusharedlocalmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ $gsimFrequency * $gsimSubSlicesCount * 64 / 1000000000 ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ (query("/GPUL3ShaderThroughputMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUL3ShaderThroughputMetricMaxGBDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderBDWAbsMax" displayName="%GPUL3ShaderThroughputMetricMaxGB">
      <helpKeyword>configs.gpusharedlocalmemoryread_gpusharedlocalmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ $gsimFrequency * $gsimSubSlicesCount * 64 / 1000000000 ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>$gpuL3ShaderThroughputAbsMaxValue</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUL3ShaderThroughputMetricMaxGBDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpubdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUL3ShaderBandwidth") / query("/GPUL3ShaderBDWMax") ) ]]></valueEval>
      <description>%GPUBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3ShaderBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpubdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUL3ShaderBandwidth") / query("/GPUL3ShaderBDWAbsMax") ) ]]></valueEval>
      <description>%GPUBDWRatioUniversalDescription</description>
      <issues>
        <issue>
          <issueEval><![CDATA[ query("/GPUL3BandwidthWhenBusyIssue") ]]></issueEval>
          <issueText>%GpuL3BoundIssueText</issueText>
        </issue>
      </issues>
    </derivedQuery>
    <derivedQuery id="GPUEuThreadOccupancyBase" displayName="%GPUEuThreadOccupancy">
      <helpKeyword>configs.gpueuthreadoccupancy_gpueuthreadoccupancydescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval>
            <![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[ThreadsActive]") /
            query("/gSimGPUEventCountWeighted/gSimGPUEventType[ThreadsActive]") / $gsimThreadCount]]>
          </valueEval>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/GPUEuThreadOccupancyMetric</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUEuThreadOccupancyDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,170,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUEuThreadOccupancy" displayName="%GPUEuThreadOccupancy">
      <queryInherit>/GPUEuThreadOccupancyBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEuThreadOccupancyBase/ConditionalEuThreadOccupancySamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <issues>
        <issue>
          <issueEval><![CDATA[ query("/GPUThreadOccupancyWhenBusyIssue") && query("/OccupancyLowIssue") && query("/IsGPUComputeTaskWithOccupancyIssues") ]]></issueEval>
          <issueText>%GPULowOccupancyIssue</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[ query("/GPUThreadOccupancyWhenBusyIssue") && query("/OccupancyHighIssue") && query("/IsGPUComputeTaskWithOccupancyIssues") ]]></issueEval>
          <issueText>%GPUHighOccupancyIssue</issueText>
        </issue>
        <issue>
          <issueEval><![CDATA[ query("/GPUThreadOccupancyWhenBusyIssue") &&  query("/OccupancyNoIssue") && query("/IsGPUComputeTaskWithOccupancyIssues") ]]></issueEval>
          <issueText>%GPUMiscIssue</issueText>
        </issue>
        <xsl:if test="exsl:ctx('gsimClockDuration', 0) > 0">
          <issue>
            <issueEval><![CDATA[ query("/GPUEuThreadOccupancyBase") < 0.9]]></issueEval>
            <issueText>%GPUThreadOccupancyWhenBusyIssueText</issueText>
          </issue>
        </xsl:if>
      </issues>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUEuAvgIpcRateBase" displayName="%GPUEuAvgIpcRate">
      <helpKeyword>configs.gpueuavgipcrate_gpueuavgipcratedescription</helpKeyword>
      <valueType>double</valueType>
      <queryInherit>/GPUEuAvgIpcRateMetric</queryInherit>
      <description>%GPUEuAvgIpcRateDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,170,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <maxEval>2</maxEval>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUEuAvgIpcRate" displayName="%GPUEuAvgIpcRate">
      <queryInherit>/GPUEuAvgIpcRateBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEuAvgIpcRateBase/ConditionalEuAvgIpcRateSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[EuAvgIpcRate]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUHPCEuAvgIpcRate" displayName="%GPUEuAvgIpcRateShort">
      <queryInherit>/GPUEuAvgIpcRate</queryInherit>
    </derivedQuery>
    <derivedQuery id="GPUEuFpuBothActiveBase" displayName="%GPUEuFpuBothActive">
      <helpKeyword>configs.gpueufpubothactive_gpueufpubothactivedescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[BothFPUActive]") / query("/gSimGPUEventCountWeighted/gSimGPUEventType[BothFPUActive]") / 10000]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <queryInherit>/GPUEuFpuBothActiveMetric</queryInherit>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUEuFpuBothActiveDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,64,255</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUEuFpuBothActive" displayName="%GPUEuFpuBothActive">
      <queryInherit>/GPUEuFpuBothActiveBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEuFpuBothActiveBase/ConditionalEuFpuBothActiveSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <issueEval><![CDATA[ query("/GPUFPUIssue") ]]></issueEval>
      <issueText>%FPUIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <unitOfMeasureQueryId>GPUElapsedTimeWhenBusyForUnit</unitOfMeasureQueryId>
    </derivedQuery>
    <derivedQuery id="GPUEuFpuBothActiveInKernel" displayName="%GPUEuFpuBothActive">
      <queryInherit>/GPUEuFpuBothActiveBase</queryInherit>
      <description>%GPUEuFpuBothActiveDescriptionInKernel</description>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEuFpuBothActiveBase/ConditionalEuFpuBothActiveSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <issueEval><![CDATA[ query("/GPUFPUIssue") ]]></issueEval>
      <issueText>%FPUIssueText</issueText>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUEuSendActiveBase" displayName="%GPUEuSendActive">
      <helpKeyword>configs.gpueusendactive_gpueusendactivedescription</helpKeyword>
      <valueType>ratio</valueType>
      <queryInherit>/GPUEuSendActiveMetric</queryInherit>
      <description>%GPUEuSendActiveDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,64,128</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
        <maxEval>1</maxEval>
        <diagramObjectId>EuSendActiveSlot</diagramObjectId>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUEuSendActive" displayName="%GPUEuSendActive">
      <queryInherit>/GPUEuSendActiveBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUEuSendActiveBase/ConditionalEuSendActiveSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUTypedReadCoalRatioBase" displayName="%GPUTypedReadCoalRatio">
      <helpKeyword>configs.gputypedreadcoalratio_gpucoalratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <queryInherit>/GPUTypedReadsPerCacheLineMetric</queryInherit>
      <description>%GPUCoalRatioUniversalDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,64,255</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUTypedReadCoalRatio" displayName="%GPUTypedReadCoalRatio">
      <queryInherit>/GPUTypedReadCoalRatioBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUTypedReadCoalRatioBase/ConditionalTypedReadsPerCacheLineSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[TypedReadsPerCacheLine]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUTypedWriteCoalRatioBase" displayName="%GPUTypedWriteCoalRatio">
      <helpKeyword>configs.gputypedwritecoalratio_gpucoalratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <queryInherit>/GPUTypedWritesPerCacheLineMetric</queryInherit>
      <description>%GPUCoalRatioUniversalDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>255,102,255</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUTypedWriteCoalRatio" displayName="%GPUTypedWriteCoalRatio">
      <queryInherit>/GPUTypedWriteCoalRatioBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUTypedWriteCoalRatioBase/ConditionalTypedWritesPerCacheLineSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[TypedWritesPerCacheLine]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUUntypedReadCoalRatioBase" displayName="%GPUUntypedReadCoalRatio">
      <helpKeyword>configs.gpuuntypedreadcoalratio_gpucoalratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <queryInherit>/GPUUntypedReadsPerCacheLineMetric</queryInherit>
      <description>%GPUCoalRatioUniversalDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,64,128</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUUntypedReadCoalRatio" displayName="%GPUUntypedReadCoalRatio">
      <queryInherit>/GPUUntypedReadCoalRatioBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUUntypedReadCoalRatioBase/ConditionalUntypedReadsPerCacheLineSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[UntypedReadsPerCacheLine]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUUntypedWriteCoalRatioBase" displayName="%GPUUntypedWriteCoalRatio">
      <helpKeyword>configs.gpuuntypedwritecoalratio_gpucoalratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <queryInherit>/GPUUntypedWritesPerCacheLineMetric</queryInherit>
      <description>%GPUCoalRatioUniversalDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>204,0,153</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <maxEval>1</maxEval>
    </derivedQuery>
    <derivedQuery id="GPUUntypedWriteCoalRatio" displayName="%GPUUntypedWriteCoalRatio">
      <queryInherit>/GPUUntypedWriteCoalRatioBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUUntypedWriteCoalRatioBase/ConditionalUntypedWritesPerCacheLineSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="not (exsl:ctx('gsimClockDuration', 0))">
        <confidenceEval><![CDATA[ (query("/GPUSampleCount/GPUEventType[UntypedWritesPerCacheLine]") > 5) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUShaderBarriers" displayName="%GPUShaderBarriers">
      <valueType>double</valueType>
      <queryInherit>/GPUShaderBarriersMetric</queryInherit>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>170,0,0</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUShaderAtomics" displayName="%GPUShaderAtomics">
      <valueType>double</valueType>
      <queryInherit>/GPUShaderAtomicsMetric</queryInherit>
      <displayAttributes>
        <timeScalems>1000</timeScalems>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>250,102,102</timelineGraphColor>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadGB" displayName="%BandwidthRead">
      <helpKeyword>configs.gpuuntypedmemoryread_gpuuntypedmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUUntypedBytesReadMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                (query("/GPUEventCount/GPUEventType[Untyped Dataport Memory Reads Slice 0]") + query("/GPUEventCount/GPUEventType[Untyped Dataport Memory Reads Slice 1]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                (query("/GPUEventCount/GPUEventType[Untyped Dataport Memory Reads Slice 0]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$memoryMultiplier}', string($memoryMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUUntypedMemoryReadDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadBandwidthBase" displayName="%GPUUntypedMemoryRead">
      <helpKeyword>configs.gpuuntypedmemoryread_gpuuntypedmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUUntypedMemoryReadGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUUntypedMemoryReadDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadBandwidth" displayName="%GPUUntypedMemoryRead">
      <queryInherit>/GPUUntypedMemoryReadBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUUntypedMemoryReadBandwidthBase/ConditionalUntypedBytesReadSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUUntypedMemoryReadBDWAbsMaxGB</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadBDWMaxGB" displayName="%GPUUntypedMemoryReadBDWMaxGB">
      <helpKeyword>configs.gpuuntypedmemoryread_gpuuntypedmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUUntypedBytesReadMetricMaxValue") / ( query("/GPUElapsedTime") * 1000000000 ) ) ]]></valueEval>
      <description>%GPUUntypedMemoryReadBDWMaxGBDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadBDWAbsMaxGB" displayName="%GPUUntypedMemoryReadBDWMaxGB">
      <helpKeyword>configs.gpuuntypedmemoryread_gpuuntypedmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval>$gpuUntypedBytesReadAbsMaxValue</valueEval>
      <description>%GPUUntypedMemoryReadBDWMaxGBDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUUntypedMemoryReadBandwidth") /  query("/GPUUntypedMemoryReadBDWMaxGB")   ) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryReadBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUUntypedMemoryReadBandwidth") /  query("/GPUUntypedMemoryReadBDWAbsMaxGB")   ) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteGB" displayName="%BandwidthWrite">
      <helpKeyword>configs.gpuuntypedmemorywrite_gpuuntypedmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUUntypedBytesWrittenMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                (query("/GPUEventCount/GPUEventType[UAV Untyped Dataport Memory Writes Slice 0]") + query("/GPUEventCount/GPUEventType[UAV Untyped Dataport Memory Writes Slice 1]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                (query("/GPUEventCount/GPUEventType[UAV Untyped Dataport Memory Writes Slice 0]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$memoryMultiplier}', string($memoryMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUUntypedMemoryWriteDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#3765c1</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteBandwidthBase" displayName="%GPUUntypedMemoryWrite">
      <helpKeyword>configs.gpuuntypedmemorywrite_gpuuntypedmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUUntypedMemoryWriteGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUUntypedMemoryWriteDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteBandwidth" displayName="%GPUUntypedMemoryWrite">
      <queryInherit>/GPUUntypedMemoryWriteBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUUntypedMemoryWriteBandwidthBase/ConditionalUntypedBytesWrittenSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUUntypedMemoryWriteBDWAbsMaxGB</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteBDWMaxGB" displayName="%GPUUntypedMemoryWriteBDWMaxGB">
      <helpKeyword>configs.gpuuntypedmemorywrite_gpuuntypedmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUUntypedBytesWrittenMetricMaxValue") / ( query("/GPUElapsedTime") * 1000000000 ) ) ]]></valueEval>
      <description>%GPUUntypedMemoryWriteBDWMaxGBDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteBDWAbsMaxGB" displayName="%GPUUntypedMemoryWriteBDWMaxGB">
      <helpKeyword>configs.gpuuntypedmemorywrite_gpuuntypedmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval>$gpuUntypedBytesWrittenAbsMaxValue</valueEval>
      <description>%GPUUntypedMemoryWriteBDWMaxGBDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUUntypedMemoryWriteBandwidth") /  query("/GPUUntypedMemoryWriteBDWMaxGB")   ) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUUntypedMemoryWriteBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUUntypedMemoryWriteBandwidth") /  query("/GPUUntypedMemoryWriteBDWAbsMaxGB")   ) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSharedLocalMemoryReadGB" displayName="%BandwidthRead">
      <helpKeyword>configs.gpusharedlocalmemoryread_gpusharedlocalmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUSlmBytesReadMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                (query("/GPUEventCount/GPUEventType[SLM Reads Transactions Slice 0]") + query("/GPUEventCount/GPUEventType[SLM Reads Transactions Slice 1]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                (query("/GPUEventCount/GPUEventType[SLM Reads Transactions Slice 0]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
              <xsl:otherwise>
                (query("/gSimGPUEventCount/gSimGPUEventType[SLMRead12]") + query("/gSimGPUEventCount/gSimGPUEventType[SLMRead9]")) * 128 / 1000000000
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$memoryMultiplier}', string($memoryMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUSharedLocalMemoryReadDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUSharedLocalMemoryReadBandwidthBase" displayName="%GPUSharedLocalMemoryRead">
      <helpKeyword>configs.gpusharedlocalmemoryread_gpusharedlocalmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUSharedLocalMemoryReadGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUSharedLocalMemoryReadDescription</description>
      <displayAttributes>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUSharedLocalMemoryReadBandwidth" displayName="%GPUSharedLocalMemoryRead">
      <queryInherit>/GPUSharedLocalMemoryReadBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUSharedLocalMemoryReadBandwidthBase/ConditionalSlmBytesReadSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="exsl:ctx('gsimClockDuration', 0) > 0">
        <confidenceEval><![CDATA[ ( (query("/gsimGPUSampleCount/gSimGPUEventType[SLMRead12]") > 5) || (query("/gsimGPUSampleCount/gSimGPUEventType[SLMRead9]") > 5) ) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUSLMReadBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUSLMReadBDWMax" displayName="%GPUSLMReadBDWMax">
      <helpKeyword>configs.gpusharedlocalmemoryread_gpusharedlocalmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUSlmBytesReadMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%GPUGPUSLMReadBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSLMReadBDWAbsMax" displayName="%GPUSLMReadBDWMax">
      <helpKeyword>configs.gpusharedlocalmemoryread_gpusharedlocalmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ $gsimFrequency * $gsimSubSlicesCount * 128 / 1000000000 ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>$gpuSlmBytesReadAbsMaxValue</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUGPUSLMReadBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSLMReadMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUSharedLocalMemoryReadBandwidth") / query("/GPUSLMReadBDWMax") ) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSLMReadAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUSharedLocalMemoryReadBandwidth") / query("/GPUSLMReadBDWAbsMax") ) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSharedLocalMemoryWriteGB" displayName="%BandwidthWrite">
      <helpKeyword>configs.gpusharedlocalmemorywrite_gpusharedlocalmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUSlmBytesWrittenMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                (query("/GPUEventCount/GPUEventType[SLM Writes Transactions Slice 0]") + query("/GPUEventCount/GPUEventType[SLM Writes Transactions Slice 1]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                (query("/GPUEventCount/GPUEventType[SLM Writes Transactions Slice 0]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:when>
              <xsl:otherwise>
                (query("/gSimGPUEventCount/gSimGPUEventType[SLMWrite12]") + query("/gSimGPUEventCount/gSimGPUEventType[SLMWrite9]")) * {$memoryMultiplier} * 64 / 1000000000
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$memoryMultiplier}', string($memoryMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUSharedLocalMemoryWriteDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#3765c1</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUSharedLocalMemoryWriteBandwidthBase" displayName="%GPUSharedLocalMemoryWrite">
      <helpKeyword>configs.gpusharedlocalmemorywrite_gpusharedlocalmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUSharedLocalMemoryWriteGB") / query("/GPUElapsedTime") ) ]]></valueEval>
      <description>%GPUSharedLocalMemoryWriteDescription</description>
      <displayAttributes>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUSharedLocalMemoryWriteBandwidth" displayName="%GPUSharedLocalMemoryWrite">
      <queryInherit>/GPUSharedLocalMemoryWriteBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUSharedLocalMemoryWriteBandwidthBase/ConditionalSlmBytesWrittenSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <xsl:if test="exsl:ctx('gsimClockDuration', 0) > 0">
        <confidenceEval><![CDATA[ ( (query("/gsimGPUSampleCount/gSimGPUEventType[SLMWrite12]") > 5) || (query("/gsimGPUSampleCount/gSimGPUEventType[SLMWrite9]") > 5) ) ]]></confidenceEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUSLMWriteBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUSLMWriteBDWMax" displayName="%GPUSLMWriteBDWMax">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUSlmBytesWrittenMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%GPUSLMWriteBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSLMWriteBDWAbsMax" displayName="%GPUSLMWriteBDWMax">
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ $gsimFrequency * $gsimSubSlicesCount * 128 / 1000000000 ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval>$gpuSlmBytesWrittenAbsMaxValue</valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUSLMWriteBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSLMWriteMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUSharedLocalMemoryWriteBandwidth") / query("/GPUSLMWriteBDWMax") ) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUSLMWriteAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUSharedLocalMemoryWriteBandwidth") / query("/GPUSLMWriteBDWAbsMax") ) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryReadGB" displayName="%BandwidthRead">
      <helpKeyword>configs.gputypedmemoryread_gputypedmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUTypedBytesReadMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[UAV Typed Reads Transactions]") * 64 / 1000000000 ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUTypedMemoryReadDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryReadBandwidthBase" displayName="%GPUTypedMemoryRead">
      <helpKeyword>configs.gputypedmemoryread_gputypedmemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUTypedMemoryReadGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUTypedMemoryReadDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryReadBandwidth" displayName="%GPUTypedMemoryRead">
      <queryInherit>/GPUTypedMemoryReadBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUTypedMemoryReadBandwidthBase/ConditionalTypedBytesReadSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUTypedMemoryReadBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteGB" displayName="%BandwidthWrite">
      <helpKeyword>configs.gputypedmemorywrite_gputypedmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUTypedBytesWrittenMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
            <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[UAV Typed Writes Transactions]") * 64 / 1000000000 ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUTypedMemoryWriteDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#3765c1</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryReadBDWAbsMax" displayName="%GPUTypedMemoryReadBDWMax">
      <valueType>double</valueType>
      <valueEval>$gpuTypedBytesReadAbsMaxValue</valueEval>
      <description>%GPUMemoryReadBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryReadBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUTypedMemoryReadBandwidth") / query("/GPUTypedMemoryReadBDWAbsMax")) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteBandwidthBase" displayName="%GPUTypedMemoryWrite">
      <helpKeyword>configs.gputypedmemorywrite_gputypedmemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUTypedMemoryWriteGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUTypedMemoryWriteDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteBandwidth" displayName="%GPUTypedMemoryWrite">
      <queryInherit>/GPUTypedMemoryWriteBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUTypedMemoryWriteBandwidthBase/ConditionalTypedBytesWrittenSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUTypedMemoryWriteBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryReadBDWMax" displayName="%GPUTypedMemoryReadBDWMax">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUTypedBytesReadMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%GPUMemoryReadBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteBDWMax" displayName="%GPUTypedMemoryWriteBDWMax">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUTypedBytesWrittenMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%GPUMemoryWriteBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteBDWAbsMax" displayName="%GPUTypedMemoryWriteBDWMax">
      <valueType>double</valueType>
      <valueEval>$gpuTypedBytesWrittenAbsMaxValue</valueEval>
      <description>%GPUMemoryWriteBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUTypedMemoryWriteBandwidth") / query("/GPUTypedMemoryWriteBDWMax")) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUTypedMemoryWriteBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUTypedMemoryWriteBandwidth") / query("/GPUTypedMemoryWriteBDWAbsMax")) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadGB" displayName="%BandwidthRead">
      <helpKeyword>configs.gpumemoryread_gpumemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUGtiReadThroughputMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[GPU Memory: Reads]") * 128 / 1000000000 ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUMemoryReadDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#75dbcb</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadBandwidthBase" displayName="%GPUMemoryRead">
      <helpKeyword>configs.gpumemoryread_gpumemoryreaddescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUMemoryReadGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUMemoryReadDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadBandwidth" displayName="%GPUMemoryRead">
      <queryInherit>/GPUMemoryReadBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUMemoryReadBandwidthBase/ConditionalGtiReadThroughputSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUMemoryReadBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadBDWMax" displayName="%GPUMemoryReadBDWMax">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUGtiReadThroughputMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%GPUMemoryReadBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadBDWAbsMax" displayName="%GPUMemoryReadBDWMax">
      <valueType>double</valueType>
      <valueEval>$gpuGtiReadThroughputAbsMaxValue</valueEval>
      <description>%GPUMemoryReadBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUMemoryReadBandwidth") / query("/GPUMemoryReadBDWMax")) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryReadBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpureadbdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPUMemoryReadBandwidth") / query("/GPUMemoryReadBDWAbsMax")) ]]></valueEval>
      <description>%GPUReadBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteGB" displayName="%BandwidthWrite">
      <helpKeyword>configs.gpumemorywrite_gpumemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUGtiWriteThroughputMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[GPU Memory: Writes]") * 64 / 1000000000 ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUMemoryWriteDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>#3765c1</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteBandwidthBase" displayName="%GPUMemoryWrite">
      <helpKeyword>configs.gpumemorywrite_gpumemorywritedescription</helpKeyword>
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GPUMemoryWriteGB") / query("/GPUElapsedTime")) ]]></valueEval>
      <description>%GPUMemoryWriteDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteBandwidth" displayName="%GPUMemoryWrite">
      <queryInherit>/GPUMemoryWriteBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUMemoryWriteBandwidthBase/ConditionalGtiWriteThroughputSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
      <percentBases>
        <queryRef>/GPUMemoryWriteBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteBDWMax" displayName="%GPUMemoryWriteBDWMax">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUGtiWriteThroughputMetricMaxValue") / query("/GPUElapsedTime") / 1000000000 ) ]]></valueEval>
      <description>%GPUMemoryWriteBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteBDWAbsMax" displayName="%GPUMemoryWriteBDWMax">
      <valueType>double</valueType>
      <valueEval>$gpuGtiWriteThroughputAbsMaxValue</valueEval>
      <description>%GPUMemoryWriteBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteBDWMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUMemoryWriteBandwidth") / query("/GPUMemoryWriteBDWMax")) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUMemoryWriteBDWAbsMaxRatio" displayName="%GPUBDWRatioUniversalName">
      <helpKeyword>configs.gpubdwratiouniversalname_gpuwritebdwratiouniversaldescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ (query("/GPUMemoryWriteBandwidth") / query("/GPUMemoryWriteBDWAbsMax")) ]]></valueEval>
      <description>%GPUWriteBDWRatioUniversalDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3MissCount" displayName="%GPUL3MissCount">
      <helpKeyword>configs.gpul3misscount_gpul3misscountdescription</helpKeyword>
      <valueType>count</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUL3MissesMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
              <valueEval><![CDATA[ query("/gSimGPUEventCount/gSimGPUEventType[L3Misses]") ]]></valueEval>
            </xsl:when>
            <xsl:otherwise>
              <valueEval><![CDATA[ query("/GPUEventCount/GPUEventType[L3 Cache Reads Writes]") ]]></valueEval>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUL3MissCountDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3Hit" displayName="%GPUL3Hit">
      <valueType>count</valueType>
      <xsl:if test="exsl:ctx('gsimClockDuration', 0) > 0">
        <valueEval><![CDATA[ (query("/gSimGPUEventCount/gSimGPUEventType[L3Hits]")) ]]></valueEval>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="GPUL3Miss" displayName="%GPUL3Miss">
      <helpKeyword>configs.gpul3miss_gpul3missdescription</helpKeyword>
      <valueType>count</valueType>
      <valueEval><![CDATA[ query("/GPUL3MissCount") ]]></valueEval>
      <description>%GPUL3MissDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>47,71,47</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUL3MissRateBase" displayName="%GPUL3Miss">
      <helpKeyword>configs.gpul3miss_gpul3missdescription</helpKeyword>
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/GPUL3Miss")/ query("/GPUElapsedTime") ) ]]></valueEval>
      <description>%GPUL3MissDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3MissRate" displayName="%GPUL3Miss">
      <queryInherit>/GPUL3MissRateBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUL3MissRateBase/ConditionalL3MissesSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <confidenceText>%NotEnoughSamples</confidenceText>
    </derivedQuery>
    <derivedQuery id="GPUL3MissRatioBase" displayName="%GPUL3MissRatio">
      <helpKeyword>configs.gpul3missratio_gpul3missratiodescription</helpKeyword>
      <valueType>ratio</valueType>
      <xsl:choose>
        <xsl:when test="exsl:ctx('gsimClockDuration', 0) > 0">
          <valueEval><![CDATA[ ( query("/GPUL3Miss") / (query("/GPUL3Miss") + query("/GPUL3Hit")) ) ]]></valueEval>
        </xsl:when>
        <xsl:otherwise>
          <valueEval><![CDATA[ ( query("/GPUL3Miss")/ query("/GPUL3LookupsMetric") ) ]]></valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUL3MissRatioDescription</description>
    </derivedQuery>
    <derivedQuery id="GPUL3MissRatio" displayName="%GPUL3MissRatio">
      <queryInherit>/GPUL3MissRatioBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPUL3MissRatioBase/ConditionalL3MissesSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="GPULlcMissCount" displayName="%GPULlcMissRatio">
      <valueType>count</valueType>
      <valueEval><![CDATA[ ( query("/GPULlcAccessesMetric") - query("/GPULlcHitsMetric") ) ]]></valueEval>
      <description>%GPULlcMissCountDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>20,20,20</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPULlcMissRatioBase" displayName="%GPULlcMissRatio">
      <helpKeyword>configs.gpullcmissratio_gpullcmissratiodescription</helpKeyword>
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GPULlcMissCount") / query("/GPULlcAccessesMetric") ) ]]></valueEval>
      <description>%GPULlcMissRatioDescription</description>
    </derivedQuery>
    <derivedQuery id="GPULlcMissRatio" displayName="%GPULlcMissRatio">
      <queryInherit>/GPULlcMissRatioBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPULlcMissRatioBase/ConditionalLlcMissSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="GPULlcMissRateBase" displayName="%GPULlcMiss">
      <valueType>double</valueType>
      <valueEval><![CDATA[ ( query("/GPULlcMissCount")/ query("/GPUElapsedTime") ) ]]></valueEval>
      <description>%GPULlcMissRateDescription</description>
    </derivedQuery>
    <derivedQuery id="GPULlcMissRate" displayName="%GPULlcMiss">
      <queryInherit>/GPULlcMissRateBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GPULlcMissRateBase/ConditionalLlcMissSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
    </derivedQuery>
    <derivedQuery id="GPUMemoryTextureRead" displayName="%GPUMemoryTextureRead">
      <helpKeyword>configs.gpumemorytextureread_gpumemorytexturereaddescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:variable name="text">
        <xsl:choose>
          <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
            (query("/GPUEventCount/GPUEventType[GPU Memory: Texture Read Slice 0]") + query("/GPUEventCount/GPUEventType[GPU Memory: Texture Read Slice 1]")) * {$memoryMultiplier} * 128 / 1000000000
          </xsl:when>
          <xsl:when test="$gpuPlatform='VLV'">
            (query("/GPUEventCount/GPUEventType[GPU Memory: Texture Read Slice 0]")) * {$memoryMultiplier} * 128 / 1000000000
          </xsl:when>
        </xsl:choose>
      </xsl:variable>
      <valueEval>
        <xsl:value-of select="str:replace($text, '{$memoryMultiplier}', string($memoryMultiplier))"/>
      </valueEval>
      <description>%GPUMemoryTextureReadDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>0,64,128</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUTexelQuadCount" displayName="%GPUTexelQuadCount">
      <helpKeyword>configs.gputexelquadcount_gputexelquadcountdescription</helpKeyword>
      <valueType>double</valueType>
      <xsl:choose>
        <xsl:when test="$unversalCollectorUsed='true'">
          <queryInherit>/GPUSamplerTexelsMetric</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text">
            <xsl:choose>
              <xsl:when test="$gpuPlatform='IVB' or $gpuPlatform='HSW'">
                (query("/GPUEventCount/GPUEventType[Texel Quads Count Slice 0]") + query("/GPUEventCount/GPUEventType[Texel Quads Count Slice 1]")) * {$memoryMultiplier}
              </xsl:when>
              <xsl:when test="$gpuPlatform='VLV'">
                (query("/GPUEventCount/GPUEventType[Texel Quads Count Slice 0]")) * {$memoryMultiplier}
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <valueEval>
            <xsl:value-of select="str:replace($text, '{$memoryMultiplier}', string($memoryMultiplier))"/>
          </valueEval>
        </xsl:otherwise>
      </xsl:choose>
      <description>%GPUTexelQuadCountDescription</description>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>170,210,255</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <timelinePenWidth>1</timelinePenWidth>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GPUMemoryBandwidth" displayName="%GPUMemoryBandwidth">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUMemoryReadBandwidth") + query("/GPUMemoryWriteBandwidth")) ]]></valueEval>
      <description>%GPUMemoryBandwidthDescription</description>
      <displayAttributes>
        <diagramObjectId>GTIBDWSlot</diagramObjectId>
      </displayAttributes>
    </derivedQuery>
    <instanceCountQuery id="GPUSampleCount" displayName="%GPUSampleCount">
      <instanceDbTable>gpu_data::dd_sample</instanceDbTable>
      <valueType>double</valueType>
      <instanceBandTable>dd_gpu_node</instanceBandTable>
    </instanceCountQuery>
    <xsl:variable name="gpuMetrics">
      <item name="EuActive"/>
      <item name="EuStall"/>
      <item name="EuThreadOccupancy"/>
      <item name="EuFpuBothActive"/>
      <item name="EuSendActive"/>
      <item name="TypedReadsPerCacheLine"/>
      <item name="TypedWritesPerCacheLine"/>
      <item name="UntypedReadsPerCacheLine"/>
      <item name="UntypedWritesPerCacheLine"/>
      <item name="SamplerL1Misses"/>
      <item name="UntypedBytesWritten"/>
      <item name="UntypedBytesRead"/>
      <item name="SlmBytesRead"/>
      <item name="SlmBytesWritten"/>
      <item name="TypedBytesWritten"/>
      <item name="TypedBytesRead"/>
      <item name="GtiReadThroughput"/>
      <item name="GtiWriteThroughput"/>
      <item name="L3Misses"/>
      <item name="CsThreads"/>
      <item name="GtiL3Throughput"/>
    </xsl:variable>
    <xsl:for-each select="exsl:node-set($gpuMetrics)/item">
      <derivedQuery id="Is{@name}SamplesExist">
        <valueType>double</valueType>
        <xsl:variable name="valueEvalText">(query("/GPUSampleCount/GPUEventType[{@name}]") > 0 ? 1 : 0)</xsl:variable>
        <valueEval>
          <xsl:value-of select="str:replace($valueEvalText, '{@name}', string(@name))"/>
        </valueEval>
      </derivedQuery>
      <infoQuery id="Conditional{@name}SamplesExist">
        <xsl:variable name="dbPathText">conditional_gpu_data::dd_conditional_metric.is_{@name}_exist</xsl:variable>
        <dbPath>
          <xsl:value-of select="str:replace($dbPathText, '{@name}', string(@name))"/>
        </dbPath>
        <displayDbPathSuffix>name</displayDbPathSuffix>
      </infoQuery>
    </xsl:for-each>
    <xsl:variable name="gpuMetrics2">
      <item name="EuIdle"            event1="EuActive"           event2="EuStall"/>
      <item name="LlcMiss"           event1="LlcAccesses"        event2="LlcHits"/>
      <item name="SamplerBusy"       event1="Sampler0Busy"       event2="Sampler1Busy"/>
      <item name="EuAvgIpcRate"      event1="Fpu0Active"         event2="Fpu1Active"/>
      <item name="SamplerBottleneck" event1="Sampler0Bottleneck" event2="Sampler1Bottleneck"/>
    </xsl:variable>
    <xsl:for-each select="exsl:node-set($gpuMetrics2)/item">
      <derivedQuery id="Is{@name}SamplesExist">
        <valueType>double</valueType>
        <xsl:variable name="valueEvalText">((query("/GPUSampleCount/GPUEventType[{@event1}]") + query("/GPUSampleCount/GPUEventType[{@event2}]"))> 0 ? 1 : 0)</xsl:variable>
        <valueEval>
          <xsl:value-of select="str:replace(str:replace($valueEvalText, '{@event1}', string(@event1)), '{@event2}', string(@event2))"/>
        </valueEval>
      </derivedQuery>
      <infoQuery id="Conditional{@name}SamplesExist">
        <xsl:variable name="dbPathText">conditional_gpu_data::dd_conditional_metric.is_{@name}_exist</xsl:variable>
        <dbPath>
          <xsl:value-of select="str:replace($dbPathText, '{@name}', string(@name))"/>
        </dbPath>
        <displayDbPathSuffix>name</displayDbPathSuffix>
      </infoQuery>
    </xsl:for-each>
    <derivedQuery id="IsL3ShaderThroughputSamplesExist">
      <valueType>double</valueType>
      <valueEval>
          <![CDATA[ ((query("/GPUSampleCount/GPUEventType[SlmBytesRead]") + query("/GPUSampleCount/GPUEventType[SlmBytesWritten]") + query("/GPUSampleCount/GPUEventType[ShaderMemoryAccesses]"))> 0 ? 1 : 0) ]]>
      </valueEval>
    </derivedQuery>
    <infoQuery id="ConditionalL3ShaderThroughputSamplesExist">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_L3ShaderThroughput_exist</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="GTIL3Throughput">
      <queryInherit>/GPUGtiL3ThroughputMetric</queryInherit>
      <xsl:if test="exsl:ctx('gsimClockDuration', 0) > 0">
        <valueEval>
         <![CDATA[ (query("/gSimGPUEventCount/gSimGPUEventType[GTIL3Read]") + query("/gSimGPUEventCount/gSimGPUEventType[GTIL3Write]")) * 64 / 1000000000 ]]>
        </valueEval>
      </xsl:if>
      <valueType>double</valueType>
    </derivedQuery>
    <derivedQuery id="GTIL3TotalBandwidthForTimeline" displayName="%GTIL3TotalBandwidthGBsec">
      <queryInherit>/GTIL3Throughput</queryInherit>
      <displayAttributes>
        <timelineFormat>line</timelineFormat>
        <timelineGraphColor>72,104,155</timelineGraphColor>
        <timeScalems>1000</timeScalems>
        <minimumResolutionms>0</minimumResolutionms>
      </displayAttributes>
    </derivedQuery>
    <derivedQuery id="GTIL3TotalBandwidthBase" displayName="%GTIL3TotalBandwidth">
      <valueType>double</valueType>
      <boolean:valueSummable>false</boolean:valueSummable>
      <valueEval><![CDATA[ (query("/GTIL3Throughput") / query("/GPUElapsedTime")) ]]></valueEval>
      <displayAttributes>
        <boolean:vtNullAsZero>false</boolean:vtNullAsZero>
      </displayAttributes>
    </derivedQuery>
    <infoQuery id="ConditionalIsGTIL3ThroughputSamplesExist">
      <dbPath>conditional_gpu_data::dd_conditional_metric.is_GtiL3Throughput_exist</dbPath>
      <displayDbPathSuffix>name</displayDbPathSuffix>
    </infoQuery>
    <derivedQuery id="GTIL3TotalBandwidth" displayName="%GTIL3TotalBandwidthGBsec">
      <queryInherit>/GTIL3TotalBandwidthBase</queryInherit>
      <xsl:if test="$unversalCollectorInMultirunMode = 'true'">
        <valueEval><![CDATA[ ( query("/GTIL3TotalBandwidthBase/ConditionalIsGTIL3ThroughputSamplesExist[%True]") ) ]]></valueEval>
      </xsl:if>
      <percentBases>
        <queryRef>/L3GTIBDWAbsMax</queryRef>
      </percentBases>
    </derivedQuery>
    <derivedQuery id="L3GTIBDWSlot" displayName="%GTIL3TotalBandwidth">
      <queryInherit>/GTIL3TotalBandwidth</queryInherit>
    </derivedQuery>
    <derivedQuery id="L3GTIBDWMax" displayName="%L3GTIBDWMax">
      <valueType>double</valueType>
      <valueEval><![CDATA[ (query("/GPUGtiL3ThroughputMetricMaxValue") / ( query("/GPUElapsedTime") * 1000000000 ) ) ]]></valueEval>
      <description>%L3GTIBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="L3GTIBDWAbsMax" displayName="%L3GTIBDWMax">
      <valueType>double</valueType>
      <valueEval>$gpuGtiL3ThroughputAbsMaxValue</valueEval>
      <description>%L3GTIBDWMaxDescription</description>
    </derivedQuery>
    <derivedQuery id="L3GTIBDWAbsMaxRatioSlot" displayName="%GPUBDWRatioUniversalName">
      <valueType>ratio</valueType>
      <valueEval><![CDATA[ ( query("/GTIL3TotalBandwidth") / query("/L3GTIBDWAbsMax") ) ]]></valueEval>
      <description>%GPUBDWRatioUniversalDescription</description>
    </derivedQuery>
    <infoQuery id="gSimStallEventType" displayName="Stall Type">
      <dbPath>gsim_stall_data::dd_sample.event_type.name</dbPath>
      <displayDbPathSuffix>value</displayDbPathSuffix>
      <displayAttributes>
        <boolean:hideZeroDataOnExpansion>true</boolean:hideZeroDataOnExpansion>
      </displayAttributes>
    </infoQuery>
    <countQuery id="gSimStallEventCount" displayName="Stall Count">
      <instanceDbTable>gsim_stall_data::dd_sample</instanceDbTable>
      <instanceBandTable>stalls_grouper</instanceBandTable>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
        <selfFormat>percentAndBar</selfFormat>
        <totalFormat>percentAndBar</totalFormat>
      </displayAttributes>
    </countQuery>
    <derivedQuery id="gSimCollectionStartTsc" displayName="%gSimCollectionStartTsc">
      <valueEval>$collectionStartTsc</valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="gSimCollectionStopTsc" displayName="%gSimCollectionStopTsc">
      <valueEval>$collectionStopTsc</valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="gSimCollectionDuration" displayName="%gSimCollectionDuration">
      <valueEval><![CDATA[ ( query("/gSimCollectionStopTsc") - query("/gSimCollectionStartTsc") ) ]]></valueEval>
      <valueType>count</valueType>
    </derivedQuery>
    <derivedQuery id="gSim16bitGOPsPerClkExpanded" displayName="%gSim16bitGOPsPerClk">
      <description>%gSim16bitGOPsPerClkDescription</description>
      <valueEval><![CDATA[ ( query("/GPUGTPinOperations16bitExecuted") / query("/gSimCollectionDuration") ) ]]></valueEval>
      <valueType>double</valueType>
      <displayAttributes>
        <boolean:expand>false</boolean:expand>
        <boolean:allowCollapse>true</boolean:allowCollapse>
      </displayAttributes>
      <expand>
        <vectorQuery id="gSim16bitGOPsPerClkVector">
          <derivedQuery id="gSim16bitIOPsPerClkExpand" displayName="%gSim16bitIOPsPerClk">
            <description>%gSim16bitIOPsPerClkDescription</description>
            <valueEval><![CDATA[ ( query("/GPUGTPinOperationInt16Executed") / query("/gSimCollectionDuration") ) ]]></valueEval>
            <valueType>double</valueType>
          </derivedQuery>
          <derivedQuery id="gSimHpFLOPsPerClkExpand" displayName="%gSimHpFLOPsPerClk">
            <description>%gSimHpFLOPsPerClkDescription</description>
            <valueEval><![CDATA[ ( query("/GPUGTPinOperationHpExecuted") / query("/gSimCollectionDuration") ) ]]></valueEval>
            <valueType>double</valueType>
          </derivedQuery>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="gSim32bitGOPsPerClkExpanded" displayName="%gSim32bitGOPsPerClk">
      <description>%gSim32bitGOPsPerClkDescription</description>
      <valueEval><![CDATA[ ( query("/GPUGTPinOperations32bitExecuted") / query("/gSimCollectionDuration") ) ]]></valueEval>
      <valueType>double</valueType>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
        <boolean:allowCollapse>true</boolean:allowCollapse>
      </displayAttributes>
      <expand>
        <vectorQuery id="gSim32bitGOPsPerClkVector">
          <derivedQuery id="gSim32bitIOPsPerClkExpand" displayName="%gSim32bitIOPsPerClk">
            <description>%gSim32bitIOPsPerClkDescription</description>
            <valueEval><![CDATA[ ( query("/GPUGTPinOperationInt32Executed") / query("/gSimCollectionDuration") ) ]]></valueEval>
            <valueType>double</valueType>
          </derivedQuery>
          <derivedQuery id="gSimSpFLOPsPerClkExpand" displayName="%gSimSpFLOPsPerClk">
            <description>%gSimSpFLOPsPerClkDescription</description>
            <valueEval><![CDATA[ ( query("/GPUGTPinOperationSpExecuted") / query("/gSimCollectionDuration") ) ]]></valueEval>
            <valueType>double</valueType>
          </derivedQuery>
        </vectorQuery>
      </expand>
    </derivedQuery>
    <derivedQuery id="gSim64bitGOPsPerClkExpanded" displayName="%gSim64bitGOPsPerClk">
      <description>%gSim64bitGOPsPerClkDescription</description>
      <valueEval><![CDATA[ ( query("/GPUGTPinOperations64bitExecuted") / query("/gSimCollectionDuration") ) ]]></valueEval>
      <valueType>double</valueType>
      <displayAttributes>
        <boolean:expand>true</boolean:expand>
        <boolean:allowCollapse>true</boolean:allowCollapse>
      </displayAttributes>
      <expand>
        <vectorQuery id="gSim64bitGOPsPerClkVector">
          <derivedQuery id="gSim64bitIOPsPerClkExpand" displayName="%gSim64bitIOPsPerClk">
            <description>%gSim64bitIOPsPerClkDescription</description>
            <valueEval><![CDATA[ ( query("/GPUGTPinOperationInt64Executed") / query("/gSimCollectionDuration") ) ]]></valueEval>
            <valueType>double</valueType>
          </derivedQuery>
          <derivedQuery id="gSimDpFLOPsPerClkExpand" displayName="%gSimDpFLOPsPerClk">
            <description>%gSimDpFLOPsPerClkDescription</description>
            <valueEval><![CDATA[ ( query("/GPUGTPinOperationDpExecuted") / query("/gSimCollectionDuration") ) ]]></valueEval>
            <valueType>double</valueType>
          </derivedQuery>
        </vectorQuery>
      </expand>
    </derivedQuery>
  </queryLibrary>
</bag>
