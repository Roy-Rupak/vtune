<?xml version="1.0" encoding="utf-8"?>
<!--

 Copyright Â© 2009-2020 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:byte="http://www.w3.org/2001/XMLSchema#byte"
  xmlns:short="http://www.w3.org/2001/XMLSchema#short"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:long="http://www.w3.org/2001/XMLSchema#long"
  xmlns:unsignedByte="http://www.w3.org/2001/XMLSchema#unsignedByte"
  xmlns:unsignedShort="http://www.w3.org/2001/XMLSchema#unsignedShort"
  xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt"
  xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong"
  xmlns:float="http://www.w3.org/2001/XMLSchema#float"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  xmlns:null="http://www.intel.com/2009/BagSchema#null"
  xmlns:blob="http://www.intel.com/2009/BagSchema#blob"
  >
  <internal>
    <int:schemaVersion>1</int:schemaVersion>
    <int:contentVersion>1</int:contentVersion>
  </internal>
  <queryLibrary xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:exsl="http://exslt.org/common" exsl:keep_exsl_namespace="">
    <vectorQuery id="SNBGEMetricsChecker">
         <queryRef>/DerivedClockticks</queryRef>
         <queryRef>/DerivedInstructionsRetired</queryRef>
         <xsl:choose>
           <xsl:when test="exsl:ctx('PMU') = 'atom'">
             <queryRef>/RetiringuOps</queryRef>
             <queryRef>/BranchMispredict</queryRef>
             <queryRef>/LLCMiss</queryRef>
             <queryRef>/ICacheMisses</queryRef>
           </xsl:when>
           <xsl:when  test="exsl:ctx('PMU') = 'corei7w' or exsl:ctx('PMU') = 'corei7wsp' or exsl:ctx('PMU') = 'corei7wdp' or exsl:ctx('PMU') = 'nhm' or exsl:ctx('PMU') = 'corei7b' or exsl:ctx('PMU') = 'corei7' or exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
              <infoQuery id="InvalidQuery">
                <dbPath>invalid_band::invalid_table</dbPath>
              </infoQuery>
           </xsl:when>
           <xsl:otherwise>
             <queryRef>/RetiredPipelineSlots</queryRef>
             <queryRef>/CancelledPipelineSlots</queryRef>
             <xsl:choose>
               <xsl:when test="exsl:ctx('PMU') = 'snb' or exsl:ctx('PMU') = 'snbep' or exsl:ctx('PMU') = 'knl' or exsl:ctx('PMU') = 'silvermont' or exsl:ctx('PMU') = 'airmont' or exsl:ctx('PMU') = 'goldmont' or exsl:ctx('PMU') = 'goldmont_plus'">
                 <queryRef>/BackendBoundPipelineSlots</queryRef>
               </xsl:when>
               <xsl:otherwise>
                 <queryRef>/BackendBound</queryRef>
               </xsl:otherwise>
             </xsl:choose>
             <queryRef>/FrontendBoundPipelineSlots</queryRef>
           </xsl:otherwise>
         </xsl:choose>
    </vectorQuery>
    <vectorQuery id="IVBGEPlainMetrics">
         <queryRef>/DerivedClockticks</queryRef>
         <queryRef>/DerivedInstructionsRetired</queryRef>
         <queryRef>/RetiredPipelineSlots</queryRef>
         <queryRef>/BASE</queryRef>
         <xsl:if test="exsl:ctx('PMU') = 'ivybridge' or exsl:ctx('PMU') = 'ivytown'">
          <queryRef>/FP_Arith</queryRef>
          <queryRef>/FP_x87</queryRef>
          <queryRef>/FP_Scalar</queryRef>
          <queryRef>/FP_Vector</queryRef>
          <queryRef>/OTHER</queryRef>
         </xsl:if>
         <queryRef>/MicroSequencer</queryRef>
         <queryRef>/CancelledPipelineSlots</queryRef>
         <queryRef>/BranchMispredict</queryRef>
         <queryRef>/MachineClears</queryRef>
         <queryRef>/BackendBound</queryRef>
         <queryRef>/MemBound</queryRef>
         <queryRef>/L1Bound</queryRef>
         <queryRef>/DTLBOverhead</queryRef>
         <queryRef>/LoadsBlockedbyStoreForwarding</queryRef>
         <queryRef>/SplitLoads</queryRef>
         <queryRef>/4KAliasing</queryRef>
         <queryRef>/L2Bound</queryRef>
         <queryRef>/L3Bound</queryRef>
         <queryRef>/ContestedAccesses</queryRef>
         <queryRef>/DataSharing</queryRef>
         <queryRef>/L3Latency</queryRef>
         <queryRef>/LLCHit</queryRef>
         <queryRef>/DRAMBound</queryRef>
         <queryRef>/LLCMiss</queryRef>
         <queryRef>/MEMBandwidth</queryRef>
         <queryRef>/MEMLatency</queryRef>
         <xsl:if test="exsl:ctx('PMU') = 'ivytown' or exsl:ctx('PMU') = 'haswell_server'">
           <queryRef>/LocalDRAM</queryRef>
           <queryRef>/RemoteDRAM</queryRef>
           <queryRef>/RemoteCache</queryRef>
         </xsl:if>
         <queryRef>/StoresBound</queryRef>
         <queryRef>/FalseSharing</queryRef>
         <queryRef>/SplitStores</queryRef>
         <queryRef>/DTLBStoreOverhead</queryRef>
         <queryRef>/CoreBound</queryRef>
         <xsl:if test="exsl:ctx('PMU') = 'ivybridge' or exsl:ctx('PMU') = 'ivytown' or exsl:ctx('PMU') = 'broadwell' or exsl:ctx('PMU') = 'broadwell_de' or exsl:ctx('PMU') = 'broadwell_server' or exsl:ctx('PMU') = 'skylake' or exsl:ctx('PMU') = 'skylake_server' or exsl:ctx('PMU') = 'cannonlake'">
          <queryRef>/DIVActive</queryRef>
          <queryRef>/PortUtil</queryRef>
         </xsl:if>
         <queryRef>/Cycles0PortsUtilized</queryRef>
         <queryRef>/Cycles1PortUtilized</queryRef>
         <queryRef>/Cycles2PortsUtilized</queryRef>
         <queryRef>/Cycles3mPortsUtilized</queryRef>
         <queryRef>/FrontendBoundPipelineSlots</queryRef>
         <queryRef>/FELatency</queryRef>
         <queryRef>/ICacheMisses</queryRef>
         <queryRef>/BranchResteers</queryRef>
         <queryRef>/ITLBOverhead</queryRef>
         <queryRef>/DSBtoMITESwitchCost</queryRef>
         <queryRef>/LCP</queryRef>
         <queryRef>/MSSwitches</queryRef>
         <queryRef>/FEBandwidth</queryRef>
         <queryRef>/FEBandwidthDSB</queryRef>
         <queryRef>/FEBandwidthMITE</queryRef>
         <queryRef>/FEBandwidthLSD</queryRef>
    </vectorQuery>
    <vectorQuery id="KNLGEPlainMetrics">
        <queryRef>/FrontendBoundPipelineSlots</queryRef>
        <queryRef>/ICacheMisses</queryRef>
        <queryRef>/ITLBOverhead</queryRef>
        <queryRef>/CancelledPipelineSlots</queryRef>
        <queryRef>/BranchMispredict</queryRef>
        <queryRef>/BackendBoundPipelineSlots</queryRef>
        <queryRef>/LLCMiss</queryRef>
        <queryRef>/LLCHit</queryRef>
        <queryRef>/UTLBOverhead</queryRef>
        <queryRef>/ContestedAccessesKNL</queryRef>
        <queryRef>/PageWalk</queryRef>
        <queryRef>/SplitLoadsKNL</queryRef>
        <queryRef>/SplitStoresKNL</queryRef>
        <queryRef>/LoadsBlockedbyStoreForwarding</queryRef>
        <queryRef>/DIVActive</queryRef>
        <queryRef>/RetiredPipelineSlots</queryRef>
        <queryRef>/MSAssistsKNL</queryRef>
        <queryRef>/FPAssistsKNL</queryRef>
    </vectorQuery>
    <countQuery id="KNCChecker">
      <xsl:choose>
        <xsl:when test="exsl:ctx('PMU') = 'knc'">
          <queryInherit>/PMUEventCount</queryInherit>
        </xsl:when>
        <xsl:otherwise>
          <instanceDbTable>this_table::does_not_exist</instanceDbTable>
        </xsl:otherwise>
      </xsl:choose>
    </countQuery>
    <vectorQuery id="KNCGEMetricsChecker">
         <queryRef>/KNCChecker</queryRef>
    </vectorQuery>
    <xsl:choose>
      <xsl:when test="exsl:ctx('PMU') = 'knc'">
        <vectorQuery id="GEMetricsChecker">
           <vectorQueryInsert>/KNCGEMetricsChecker</vectorQueryInsert>
       </vectorQuery>
      </xsl:when>
      <xsl:otherwise>
       <vectorQuery id="GEMetricsChecker">
           <vectorQueryInsert>/SNBGEMetricsChecker</vectorQueryInsert>
       </vectorQuery>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
    <xsl:variable name="tmamFile" select="$pmuCommon//variables/tmamQueryFile"/>
    <xsl:choose>
    <xsl:when test="exsl:ctx('PMU') = 'knc'">
      <derivedQuery id="KNCL1Misses" displayName="%KNCL1Misses">
        <valueType>count</valueType>
        <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[DATA_READ_MISS_OR_WRITE_MISS]") + query("/PMUEventCount/PMUEventType[L1_DATA_HIT_INFLIGHT_PF1]") ]]></valueEval>
        <confidenceEval><![CDATA[
            ( ( ( query("/PMUSampleCount/PMUEventType[DATA_READ_MISS_OR_WRITE_MISS]") >= 10 ) || ( query("/PMUSampleCount/PMUEventType[L1_DATA_HIT_INFLIGHT_PF1]") >= 10 ) ) && ( query("/Reliability") >= 0.5 ) )
          ]]>
        </confidenceEval>
        <description>%KNCL1MissesDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>0</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="KNCL1HitRate" displayName="%KNCL1HitRate">
        <valueType>double</valueType>
        <valueEval><![CDATA[ ( query("/PMUEventCount/PMUEventType[DATA_READ_OR_WRITE]") - query("/KNCL1Misses") ) / query("/PMUEventCount/PMUEventType[DATA_READ_OR_WRITE]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCL1HitRate") < 0.95 ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <confidenceEval><![CDATA[
            ( ( ( query("/PMUSampleCount/PMUEventType[DATA_READ_OR_WRITE]") >= 10 ) ) && ( query("/Reliability") >= 0.5 ) )
          ]]>
        </confidenceEval>
        <issueText>%KNCL1HitRateIssueText</issueText>
        <description>%KNCL1HitRateDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="KNCEstimatedLatencyImpact" displayName="%KNCEstimatedLatencyImpact">
        <valueType>double</valueType>
        <valueEval><![CDATA[ ( query("/PMUEventCount/PMUEventType[CPU_CLK_UNHALTED]") - query("/PMUEventCount/PMUEventType[EXEC_STAGE_CYCLES]") - query("/PMUEventCount/PMUEventType[DATA_READ_OR_WRITE]") ) / query("/PMUEventCount/PMUEventType[DATA_READ_MISS_OR_WRITE_MISS]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCEstimatedLatencyImpact") > 145 ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <confidenceEval><![CDATA[
            ( ( ( query("/PMUSampleCount/PMUEventType[CPU_CLK_UNHALTED]") >= 10 ) ) && ( query("/PMUSampleCount/PMUEventType[DATA_READ_MISS_OR_WRITE_MISS]") >= 10 ) && ( query("/Reliability") >= 0.5 ) )
          ]]>
        </confidenceEval>
        <issueText>%KNCEstimatedLatencyImpactIssueText</issueText>
        <description>%KNCEstimatedLatencyImpactDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
     <derivedQuery id="KNCVectorizationIntensity" displayName="%KNCVectorizationIntensity">
       <valueType>double</valueType>
       <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[VPU_ELEMENTS_ACTIVE]") / query("/PMUEventCount/PMUEventType[VPU_INSTRUCTIONS_EXECUTED]") ]]></valueEval>
       <issueEval><![CDATA[ ( query("/KNCVectorizationIntensity") < 8 ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
       <issueText>%KNCVectorizationIntensityIssueText</issueText>
       <description>%KNCVectorizationIntensityDescription</description>
       <displayAttributes>
         <timelineFormat>line</timelineFormat>
         <timelineGraphColor>255,64,64</timelineGraphColor>
         <timelinePenWidth>2</timelinePenWidth>
         <minimumResolutionms>10</minimumResolutionms>
       </displayAttributes>
     </derivedQuery>
     <derivedQuery id="KNCL1ComputeToDataAccessRatio" displayName="%KNCL1ComputeToDataAccessRatio">
        <valueType>double</valueType>
        <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[VPU_ELEMENTS_ACTIVE]") / query("/PMUEventCount/PMUEventType[DATA_READ_OR_WRITE]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCL1ComputeToDataAccessRatio") < query("/KNCVectorizationIntensity") ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <issueText>%KNCL1ComputeToDataAccessRatioIssueText</issueText>
        <description>%KNCL1ComputeToDataAccessRatioDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
     </derivedQuery>
     <derivedQuery id="KNCL2ComputeToDataAccessRatio" displayName="%KNCL2ComputeToDataAccessRatio">
        <valueType>double</valueType>
        <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[VPU_ELEMENTS_ACTIVE]") / query("/PMUEventCount/PMUEventType[DATA_READ_MISS_OR_WRITE_MISS]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCL2ComputeToDataAccessRatio") < 100 * query("/KNCL1ComputeToDataAccessRatio") ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <issueText>%KNCL2ComputeToDataAccessRatioIssueText</issueText>
        <description>%KNCL2ComputeToDataAccessRatioDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="KNCL1TLBMissRatio" displayName="%KNCL1TLBMissRatio">
        <valueType>double</valueType>
        <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[DATA_PAGE_WALK]") / query("/PMUEventCount/PMUEventType[DATA_READ_OR_WRITE]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCL1TLBMissRatio") > 0.01 ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <issueText>%KNCL1TLBMissRatioIssueText</issueText>
        <description>%KNCL1TLBMissRatioDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="KNCL2TLBMissRatio" displayName="%KNCL2TLBMissRatio">
        <valueType>double</valueType>
        <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[LONG_DATA_PAGE_WALK]") / query("/PMUEventCount/PMUEventType[DATA_READ_OR_WRITE]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCL2TLBMissRatio") > 0.001 ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <issueText>%KNCL2TLBMissRatioIssueText</issueText>
        <description>%KNCL2TLBMissRatioDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <derivedQuery id="KNCL1TLBMissesPerL2TLBMiss" displayName="%KNCL1TLBMissesPerL2TLBMiss">
        <valueType>double</valueType>
        <valueEval><![CDATA[ query("/PMUEventCount/PMUEventType[DATA_PAGE_WALK]") / query("/PMUEventCount/PMUEventType[LONG_DATA_PAGE_WALK]") ]]></valueEval>
        <issueEval><![CDATA[ ( query("/KNCL1TLBMissesPerL2TLBMiss") > 0.1 ) * ( query("/KNCL1TLBMissesPerL2TLBMiss") < 1.1 ) * ( query("/PMUHotspot") > 0.05 ) ]]></issueEval>
        <issueText>%KNCL1TLBMissesPerL2TLBMissIssueText</issueText>
        <description>%KNCL1TLBMissesPerL2TLBMissDescription</description>
        <displayAttributes>
          <timelineFormat>line</timelineFormat>
          <timelineGraphColor>64,64,64</timelineGraphColor>
          <timelinePenWidth>1</timelinePenWidth>
          <minimumResolutionms>10</minimumResolutionms>
        </displayAttributes>
      </derivedQuery>
      <vectorQuery id="GETopDown">
         <derivedQuery id="KNCCacheUsageGroup" displayName="%KNCCacheUsageGroup">
           <valueEval>0</valueEval>
           <valueType>double</valueType>
           <description>%KNCCacheUsageGroupDescription</description>
           <displayAttributes>
             <boolean:expand>true</boolean:expand>
             <boolean:allowCollapse>false</boolean:allowCollapse>
           </displayAttributes>
           <expand>
             <vectorQuery id="KNCCacheUsageGroupVector">
               <queryRef>/KNCL1Misses</queryRef>
               <queryRef>/KNCL1HitRate</queryRef>
               <queryRef>/KNCEstimatedLatencyImpact</queryRef>
             </vectorQuery>
           </expand>
         </derivedQuery>
         <derivedQuery id="KNCVectorizationGroup" displayName="%KNCVectorizationGroup">
           <valueEval>0</valueEval>
           <valueType>double</valueType>
           <description>%KNCVectorizationGroupDescription</description>
           <displayAttributes>
             <boolean:expand>true</boolean:expand>
             <boolean:allowCollapse>false</boolean:allowCollapse>
           </displayAttributes>
           <expand>
             <vectorQuery id="KNCVectorizationGroupVector">
               <queryRef>/KNCVectorizationIntensity</queryRef>
               <queryRef>/KNCL1ComputeToDataAccessRatio</queryRef>
               <queryRef>/KNCL2ComputeToDataAccessRatio</queryRef>
             </vectorQuery>
           </expand>
         </derivedQuery>
         <derivedQuery id="KNCTLBUsageGroup" displayName="%KNCTLBUsageGroup">
           <valueEval>0</valueEval>
           <valueType>double</valueType>
           <description>%KNCTLBUsageGroupDescription</description>
           <displayAttributes>
             <boolean:expand>true</boolean:expand>
             <boolean:allowCollapse>false</boolean:allowCollapse>
           </displayAttributes>
           <expand>
             <vectorQuery id="KNCTLBUsageGroupVector">
               <queryRef>/KNCL1TLBMissRatio</queryRef>
               <queryRef>/KNCL2TLBMissRatio</queryRef>
               <queryRef>/KNCL1TLBMissesPerL2TLBMiss</queryRef>
             </vectorQuery>
           </expand>
         </derivedQuery>
         <queryRef>/PMUEventCount/PMUEventType[L2_DATA_READ_MISS_CACHE_FILL]</queryRef>
         <queryRef>/PMUEventCount/PMUEventType[L2_DATA_WRITE_MISS_CACHE_FILL]</queryRef>
         <queryRef>/PMUEventCount/PMUEventType[L2_DATA_READ_MISS_MEM_FILL]</queryRef>
         <queryRef>/PMUEventCount/PMUEventType[L2_DATA_WRITE_MISS_MEM_FILL]</queryRef>
      </vectorQuery>
    </xsl:when>
    <xsl:when  test="exsl:ctx('PMU') = 'corei7w' or exsl:ctx('PMU') = 'corei7wsp' or exsl:ctx('PMU') = 'corei7wdp' or exsl:ctx('PMU') = 'nhm' or exsl:ctx('PMU') = 'corei7b' or exsl:ctx('PMU') = 'corei7' or exsl:ctx('PMU') = 'core2p' or exsl:ctx('PMU') = 'core2'">
      <vectorQuery id="GETopDown">
        <infoQuery id="InvalidQuery">
          <dbPath>invalid_band::invalid_table</dbPath>
        </infoQuery>
      </vectorQuery>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="tmamQueryFile" select="document($tmamFile)"/>
      <xsl:copy-of select="$tmamQueryFile//bag/vectorQuery"/>
    </xsl:otherwise>
    </xsl:choose>
    <vectorQuery id="GEMetrics">
        <queryRef>/RefTime</queryRef>
        <queryRef>/DerivedClockticks</queryRef>
        <queryRef>/DerivedInstructionsRetired</queryRef>
        <queryRef>/CPI</queryRef>
        <vectorQueryInsert>/GETopDown</vectorQueryInsert>
        <queryRef>/AverageFrequency</queryRef>
    </vectorQuery>
    <vectorQuery id="GEMetricsSummary">
        <queryRef>/DerivedClockticks</queryRef>
        <queryRef>/DerivedInstructionsRetired</queryRef>
        <queryRef>/CPI</queryRef>
        <xsl:choose>
          <xsl:when test="(exsl:ctx('allowMultipleRuns') = false or exsl:ctx('allowMultipleRuns') = '') and not(exsl:ctx('hideMuxReliability', 0))">
            <queryRef>/ReliabilityForView</queryRef>
          </xsl:when>
        </xsl:choose>
        <vectorQueryInsert>/GETopDown</vectorQueryInsert>
        <queryRef>/AverageFrequency</queryRef>
    </vectorQuery>
    <vectorQuery id="GEMetricsLocators">
        <queryRef>/DerivedClockticks</queryRef>
        <queryRef>/DerivedInstructionsRetired</queryRef>
        <queryRef>/CPI</queryRef>
        <vectorQueryInsert>/locatorGETopDown</vectorQueryInsert>
    </vectorQuery>
    <vectorQuery id="GEMetricsContextSummary">
        <vectorQueryInsert>/GETopDown</vectorQueryInsert>
    </vectorQuery>
  </queryLibrary>
</bag>
